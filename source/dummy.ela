#import core;
#import gl;

#compiler_flags "-g"

float[] vertices = #make(float[], { 
    -0.5, -0.5,
    -0.5, 0.5,
    0.5, -0.5, 
    0.5, -0.5,
    -0.5, 0.5,
    0.5, 0.5,
});


generate_buffers :: (u32 *vbo, u32 *vao) {
  glGenVertexArrays(1, vao);
  glGenBuffers(1, vbo);
  
  glBindVertexArray(*vao);
  glBindBuffer(GL_ARRAY_BUFFER, *vbo);
  glVertexAttribPointer(0, 2, GL_FLOAT, false, sizeof(float) * 2, #make(void*, 0));
  glEnableVertexAttribArray(0);
  glBufferData(GL_ARRAY_BUFFER, sizeof(float) * 6 * 2, #make(float*, vertices), GL_STATIC_DRAW);
}

main :: () -> int {  
  Window window = #make(Window, 800, 600, "Hello opengl");
  glClearColor(1.0, 1.0, 1.0, 1.0);
  glViewport(0, 0, 800, 600);
  
  u32 vbo;
  u32 vao;
  generate_buffers(&vbo, &vao);
  
  Shader shader = #make(Shader, #read "shader.vert", #read "shader.frag");
  shader.use();
  
  while !window.should_close() {
    
    u32 w = glfwGetKey(window.handle, GLFW_KEY_W);
    
    if w == GLFW_PRESS || w == GLFW_REPEAT {
      for v; vertices {
        v = v;
      }
      glBufferData(GL_ARRAY_BUFFER, sizeof(float) * 6 * 2, #make(float*, vertices), GL_STATIC_DRAW);
    }
    
    window.clear();
    glDrawArrays(GL_TRIANGLES, 0, 6);
    window.present();
  }
  
  glfwTerminate();
  return 0;
}