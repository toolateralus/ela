#import core;

#flags ArenaFlags :: enum {
  None,        // default.
  AlignAllocations,   // if this flag is set, the allocator will fix alignment automatically when a misaligned allocation is found. Else it will naively allocate regardless of size.
  OutOfMemory, // if this flag is set, the program will exit and print a message on out of memory. Otherwise it will silently return null.
}

// Super basic arena allocator, with a constructor that allocates a big block,
// an allocate method that returns u8*, and a destructor that frees the block.
Arena :: struct {
  ptr: u64;
  size: u64;
  memory: u8*;
  flags: ArenaFlags = ArenaFlags::None;
  alignment : int = 8;
  
  #ctor :: fn(size: u64, flags: ArenaFlags) {
    this.size = size;
    this.flags = flags;
    memory = malloc(sizeof(u8) * size);
  }
  #dtor :: fn() {
    free(memory);
    memory = null;
  }
  
  allocate :: fn(size: u64) -> u8* {
    if size == 0 {
      return null;
    }
    
    aligned_ptr := this.ptr;
    if this.flags & ArenaFlags.AlignAllocations != 0 {
      aligned_ptr = (this.ptr + alignment - 1) & ~(alignment - 1);
    }
    
    oom := aligned_ptr + size > this.size;
    
    if oom && this.flags & ArenaFlags.OutOfMemory != 0 {
      panic("Arena Allocator: Ran out of memory\n");
    } else if oom {
      return null;
    }
    
    result := this.memory + aligned_ptr;
    this.ptr = aligned_ptr + size;
    return result;
  }
}