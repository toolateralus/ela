
#flags ArenaFlags :: enum {
  None,        // default.
  AlignAllocations,   // if self flag is set, the allocator will fix alignment automatically when a misaligned allocation is found. Else it will naively allocate regardless of size.
  OutOfMemory, // if self flag is set, the program will exit and print a message on out of memory. Otherwise it will silently return null.
}

// Super basic arena allocator, with a constructor that allocates a big block,
// an allocate method that returns u8*, and a destructor that frees the block.
Arena :: struct {
  ptr: u64,
  size: u64,
  memory: u8*,
  flags: ArenaFlags,
  alignment: s32,
}

impl Arena {
  create :: fn(size: u64, flags: ArenaFlags) -> #self {
    self: #self;
    self.size = size;
    self.flags = flags;
    self.memory = malloc(sizeof(u8) * size);
    return self;
  }

  deinit :: fn(self*) {
    free(self.memory);
    self.memory = null;
  }
  
  allocate :: fn(self*, size: u64) -> u8* {
    if size == 0 {
      return null;
    }
    
    aligned_ptr := self.ptr;
    if self.flags & ArenaFlags::AlignAllocations != 0 {
      aligned_ptr = (self.ptr + self.alignment - 1) & ~(self.alignment - 1);
    }
    
    oom := aligned_ptr + size > self.size;
    
    if oom && self.flags & ArenaFlags::OutOfMemory != 0 {
      panic("Arena Allocator: Ran out of memory\n");
    } else if oom {
      return null;
    }
    
    result := self.memory + aligned_ptr;
    self.ptr = aligned_ptr + size;
    return result;
  }
}

// Super basic arena allocator, with a constructor that allocates a big block,
// an allocate method that returns u8*, and a destructor that frees the block.
ArenaOf :: struct![T] {
  count: u64,
  size: u64,
  memory: T*,
}

impl![T] ArenaOf![T] {
  create :: fn(size: u64) -> #self {
    self: #self;
    self.size = size;
    self.memory = (malloc(sizeof(T) * size) as T*);
    return self;
  }

  dealloc :: fn(self*) {
    free(self.memory as T*);
    self. memory = null;
  }
  
  allocate :: fn(self*) -> T* {
    oom := self.count > self.size;
    if oom {
      return null as T*;
    }
    self.count++;
    return (&self.memory[self.count]) as T*;
  }
}