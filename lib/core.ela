

#foreign system :: (cmd: char*) -> int;

#foreign free :: (ptr: void*) -> void;
#foreign malloc :: (nbytes: u64) -> void*;
#foreign realloc :: (ptr: void*, size: u64) -> void*;

#foreign memcpy :: (dest: void*, src: void*, n: u64) -> void*;
#foreign memset :: (dest: void*, c: int, n: u64) -> void*;

#foreign printf :: (format: char*, ...) -> int;
#foreign scanf :: (format: char*, ...) -> int;

#foreign sleep :: (seconds: int);
#foreign usleep :: (c: int);

#foreign getchar :: () -> int;

#foreign fmod :: (l: float, r: float) -> float;

#foreign time :: (value: void*) -> int;
#foreign exit :: (code: int);

#foreign strlen :: (str: char*) -> int;
#foreign strcmp :: (str1: char*, str2: char*) -> int;
#foreign strcat :: (dest: char*, src: char*) -> char*;
#foreign snprintf :: (buffer: u8*, buffer_size: u64, format: char*, ...) -> int;
#foreign sprintf :: (buffer: u8*, format: char*, ...) -> int;
#foreign strncmp :: (str: char*, str2: char*, len: int) -> int;
#foreign isalnum :: (c: int) -> int;
#foreign isalpha :: (c: int) -> int;
#foreign isspace :: (c: int) -> int;
#foreign isdigit :: (c: int) -> int;
#foreign islower :: (c: int) -> int;
#foreign isupper :: (c: int) -> int;
#foreign isprint :: (c: int) -> int;
#foreign ispunct :: (c: int) -> int;

#foreign atoi :: (v: char*) -> int;
#foreign atof :: (v: char*) -> float64;

#foreign fabs :: (f: float64) -> float64;
#foreign pow :: (base: float64, exponent: float64) -> float64;

#foreign isinf :: (arg: float64) -> bool;
#foreign isnan :: (arg: float64) -> bool;

#foreign sqrt :: (f: float64) -> float64;
#foreign cos :: (f: float64) -> float64;
#foreign sin :: (f: float64) -> float64;
#foreign rand :: () -> int;
#foreign srand :: (seed: u32);

str_starts_with :: (str: char*, substr: char*) -> bool {
  if str == null || substr == null
    then return false;

  str_len: int = strlen(str);
  substr_len: int = strlen(substr);

  if str_len < substr_len
    then return false;

  if str_len == substr_len && strcmp(str, substr) == 0
    then return true;

  return strncmp(str, substr, substr_len) == 0;
}

str_ends_with :: (str: char*, pattern: char*) -> bool {
  if !str || !pattern
    then return false;

  len: int = strlen(str);
  patlen: int = strlen(pattern);

  if len < patlen
    then return false;

  return strncmp(str + (len - patlen), pattern, patlen) == 0;
}

str_replace :: (str: string, pattern: string, replacement: string) -> string {
  if !str.data || !pattern.data || !replacement.data
    then return str;

  result: string = string{""};
  str_len: int = strlen(str.data);
  pattern_len: int = strlen(pattern.data);
  replacement_len: int = strlen(replacement.data);

  i: int = 0;
  while i < str_len {
    if strncmp(str.data + i, pattern.data, pattern_len) == 0 {
      result.insert_substr_at(result.length, replacement);
      i += pattern_len;
    } else {
      result.insert_substr_at(result.length, string{str.data + i, str.data + i + 1});
      i += 1;
    }
  }

  return result;
}

string_substr :: (src: char*, start: int, end: int) -> string {
  if !src
    then return string{""};

  len: int = strlen(src);

  if (start > end)
    then return string{""};

  if (len < end - start)
    then return string{""};

  dest: char* = malloc(sizeof(char) * (end - start) + 1);

  memcpy(dest, src + start, end - start);

  dest[(end - start)] = 0;

  v: string = string{dest};

  free(dest);

  return v;
}

to_string :: (num: s64) -> string {
  switch num {
    0: { return string{"0"}; }
    1: { return string{"1"}; }
    2: { return string{"2"}; }
    3: { return string{"3"}; }
    4: { return string{"4"}; }
    5: { return string{"5"}; }
    6: { return string{"6"}; }
    7: { return string{"7"}; }
    8: { return string{"8"}; }
    9: { return string{"9"}; }
  }

  negative := false;
  if num < 0 {
    negative = true;
    num = -num;
  }

  buffer: char[20];
  index: int = 0;

  while num > 0 {
    buffer[index] = #char "0" + (num % 10);
    num /= 10;
    index++;
  }

  if negative {
    buffer[index] = #char "-";
    index++;
  }

  // Reverse the buffer
  for i in 0..(index / 2) {
    temp := buffer[i];
    buffer[i] = buffer[index - i - 1];
    buffer[index - i - 1] = temp;
  }

  return string{(char*)buffer, ((char*) buffer) + index};


}

// to_string :: (num: float64) -> string {
//   if isnan(num) {
//     return string{"NaN"};
//   }
//   if isinf(num) {
//     if num > 0 {
//       return string{"Infinity"};
//     } else {
//       return string{"-Infinity"};
//     }
//   }

//   negative := false;
//   if num < 0 {
//     negative = true;
//     num = -num;
//   }

//   buffer: char[64];
//   index: int = 0;

//   // Handle the integer part
//   int_part: s64 = (s64)num;
//   frac_part: float64 = num - (float64)int_part;

//   if int_part == 0 {
//     buffer[index] = #char "0";
//     index++;
//   } else {
//     while int_part > 0 {
//       buffer[index] = #char "0" + (int_part % 10);
//       int_part /= 10;
//       index++;
//     }
//     if negative {
//       buffer[index] = #char "-";
//       index++;
//     }
//     // Reverse the integer part in the buffer
//     for i in 0..(index / 2) {
//       temp := buffer[i];
//       buffer[i] = buffer[index - i - 1];
//       buffer[index - i - 1] = temp;
//     }
//   }

//   // Add the decimal point
//   buffer[index] = #char ".";
//   index++;

//   // Handle the fractional part
//   for i in 0..5 { // limiting to 5 decimal places
//     frac_part *= 10;
//     digit: int = (int)frac_part;
//     buffer[index] = #char "0" + digit;
//     frac_part -= digit;
//     index++;
//   }

//   buffer[index] = 0; // null-terminate the string

//   return string{(char*)buffer, ((char*) buffer) + index};
// }


streq :: (left: char*, right) -> bool {
  return strcmp(left, right) == 0;
}

print :: (str: string) {
  printf("%s", str.data);
}
print :: (str: char *) {
  printf("%s", str);
}

println :: (str: string) {
  printf("%s\n", str.data);
}

println :: (str: char*) {
  printf("%s\n", str);
}

abs :: (v: s64) -> s64 {
  if v < 0 {
    return -v;
  }
  return v;
}

abs :: (v: float64) -> float64 {
  if v < 0.0 {
    return -v;
  }
  return v;
}

abs :: (v: float) -> float {
  if v < 0.0 {
    return -v;
  }
  return v;
}

abs :: (v: int) -> int {
  if v < 0 {
    return -v;
  }
  return v;
}


min :: (a: int, b: int) -> int {
  if a > b then return b;
  return a;
}

max :: (a: int, b: int) -> int {
  if a > b then return a;
  return b;
}

min :: (a: float, b: float) -> float {
  if a > b then return b;
  return a;
}

max :: (a: float, b: float) -> float {
  if a > b then return a;
  return b;
}


clamp :: (v: float64, min, max) -> float64 {
  if v < min then return min;
  if v > max then return max;
  return v;
}

clamped :: (v: float*, min: float, max) {
  if *v < min then *v = min;
  if *v > max then *v = max;
}

lerp :: (a: float, b, t) -> float {
  return (a * (1.0 - t)) + (b * t);
}

lerp :: (a: int, b, t: float) -> int {
  return (int)(a * (1.0 - t)) + (b * t) + 0.5;
}

Random :: enum {
  Max = 2147483647,
}

randf :: () -> float {
  return (float)rand() / (float)Random.Max;
}

split :: (str: string, delimiter: char) -> string[] {
  if !str.data {
    return {};
  }

  result: string[];
  start: int = 0;
  str_len: int = str.length;

  for i in 0..str_len {
    if str.data[i] == delimiter {
      if i > start {
        result ~= string{str.data + start, str.data + i};
      }
      start = i + 1;
    }
  }

  if start < str_len {
    result ~= string{str.data + start, str.data + str_len};
  }

  return result;
}


timespec_t :: struct {
  tv_sec: s64;
  tv_nsec: s64;
}

#foreign clock_gettime :: (clock_id: int, tp: timespec_t*) -> int;

// returns the timespec_t
get_high_precision_time :: () -> timespec_t {
  ts: timespec_t;
  clock_gettime(0, &ts);
  return ts;
}

// returns a seconds value from get_high_precision_time
timef :: () -> float64 {
  ts := get_high_precision_time();
  return (float64)ts.tv_sec + (float64)ts.tv_nsec / (float64)1_000_000_000.0;
}


milliseconds :: (c: float64) -> int {
  return (int)(c * 100_000.0);
}
seconds :: (c: float64) -> int {
  return (int)(c * 1_000_000.0);
}

panic :: (str: string) {
  println(str);
  exit(1);
}
