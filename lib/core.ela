#foreign system :: (cmd: char*) -> int;

#foreign free :: (ptr: void*) -> void;
#foreign malloc :: (nbytes: u64) -> void*;
#foreign realloc :: (ptr: void*, size: u64) -> void*;

#foreign memcpy :: (dest: void*, src: void*, n: u64) -> void*;
#foreign memset :: (dest: void*, c: int, n: u64) -> void*;

#foreign printf :: (format: char*, ...) -> int;
#foreign scanf :: (format: char*, ...) -> int;

#foreign sleep :: (seconds: int);
#foreign getchar :: () -> int;

#foreign fmod :: (l: float, r: float) -> float;

#foreign time :: (value: void*) -> int;
#foreign exit :: (code: int);

#foreign strlen :: (str: char*) -> int;
#foreign strcmp :: (str1: char*, str2: char*) -> int;
#foreign strcat :: (dest: char*, src: char*) -> char*;
#foreign snprintf :: (buffer: u8*, buffer_size: u64, format: char*, ...) -> int;
#foreign sprintf :: (buffer: u8*, format: char*, ...) -> int;
#foreign strncmp :: (str: char*, str2: char*, len: int) -> int;
#foreign isalnum :: (c: int) -> int;
#foreign isalpha :: (c: int) -> int;
#foreign isspace :: (c: int) -> int;
#foreign isdigit :: (c: int) -> int;
#foreign islower :: (c: int) -> int;
#foreign isupper :: (c: int) -> int;
#foreign isprint :: (c: int) -> int;
#foreign ispunct :: (c: int) -> int;

#foreign atoi :: (v: char*) -> int;
#foreign atof :: (v: char*) -> float64;

str_starts_with :: (str: char*, substr: char*) -> bool {
  if str == null || substr == null 
    then return false;
    
  str_len: int = strlen(str);
  substr_len: int = strlen(substr);
  
  if str_len < substr_len 
    then return false;
    
  if str_len == substr_len && strcmp(str, substr) == 0
    then return true;
    
  return strncmp(str, substr, substr_len) == 0;
}

string_ends_with :: (str: char*, pattern: char*) -> bool {
  if !str || !pattern 
    then return false;
    
  len: int = strlen(str);
  patlen: int = strlen(pattern);
  
  if len < patlen 
    then return false;
    
  return strncmp(str + (len - patlen), pattern, patlen) == 0;
}

string_substr :: (src: char*, start: int, end: int) -> string {
  if !src 
    then return string{""};
    
  len: int = strlen(src);
  
  if (start > end) 
    then return string{""};
  
  if (len < end - start) 
    then return string{""};
    
  dest: char* = malloc(sizeof(char) * (end - start) + 1);
  
  memcpy(dest, src + start, end - start);
  
  dest[(end - start)] = 0;
  
  v: string = string{dest};
  
  free(dest);
  
  return v;
}

print :: (str: string) {
  printf("%s", str.data);
}
print :: (str: char *) {
  printf("%s", str);
}

println :: (str: string) {
  printf("%s\n", str.data);
}

println :: (str: char*) {
  printf("%s\n", str);
}

#foreign fabs :: (f: float64) -> float64;

abs :: (v: $T) -> $T {
  _default: T;
  if v < _default {
    return -v;
  }
  return v;
}


#foreign isinf :: (arg: float) -> bool;
#foreign sqrt :: (f: float64) -> float64;
#foreign cos :: (f: float64) -> float64;
#foreign sin :: (f: float64) -> float64;
#foreign rand :: () -> int;
#foreign srand :: (seed: u32) -> void;

min :: (a: $T, b) -> $T {
  if a > b  then return b;
  return a;
}

max :: (a: $T, b) -> $T {
  if a > b then return a;
  return b;
}

clamp :: (v: float, min, max) -> float {
  if v < min then return min;
  if v > max then return max;
  return v;
}

clamp :: (v: float*, min: float, max) {
  if *v < min then *v = min;
  if *v > max then *v = max;
}

lerp :: (a: float, b, t) -> float {
  return (a * (1.0 - t)) + (b * t);
}

lerp :: (a: int, b, t: float) -> int {
  return (int)(a * (1.0 - t)) + (b * t) + 0.5;
}

Random :: enum {
  Max = 2147483647,
}

randf :: () -> float {
  return (float)rand() / (float)Random.Max;
}

// !BUG can't define this because it's a redefinition of timeval even though we're not including anything that contains it as far as I know.
// #alias __time_t :: s64;
// #alias __suseconds_t :: s64;

// timeval :: struct {
//   tv_sec: __time_t;
//   tv_usec: __suseconds_t;
// };

// #foreign gettimeofday :: (tv : timeval*, timezone: void*) -> int;
