#foreign system :: (cmd: char*) -> int;

#foreign free :: (ptr: void*) -> void;
#foreign malloc :: (nbytes: u64) -> void*;
#foreign realloc :: (ptr: void*, size: u64) -> void*;

#foreign memcpy :: (dest: void*, src: void*, n: u64) -> void*;
#foreign memset :: (dest: void*, c: int, n: u64) -> void*;

#foreign printf :: (format: char*, ...) -> int;

#foreign time :: (value: void*) -> int;
#foreign exit :: (code: int);

#foreign strlen :: (str: char*) -> int;
#foreign strcmp :: (str1: char*, str2: char*) -> int;
#foreign strcat :: (dest: char*, src: char*) -> char*;
#foreign snprintf :: (buffer: u8*, buffer_size: u64, format: char*, ...) -> int;
#foreign sprintf :: (buffer: u8*, format: char*, ...) -> int;
#foreign strncmp :: (str: char*, str2: char*, len: int) -> int;
#foreign isalnum :: (c: int) -> int;
#foreign isalpha :: (c: int) -> int;
#foreign isspace :: (c: int) -> int;
#foreign isdigit :: (c: int) -> int;
#foreign islower :: (c: int) -> int;
#foreign isupper :: (c: int) -> int;
#foreign isprint :: (c: int) -> int;
#foreign ispunct :: (c: int) -> int;

#foreign atoi :: (v: char*) -> int;

str_starts_with :: (str: char*, substr: char*) -> bool {
  if str == null || substr == null { return false; }
  str_len: int = strlen(str);
  substr_len: int = strlen(substr);
  if str_len < substr_len { return false; }
  if str_len == substr_len && strcmp(str, substr) == 0 { return true;  }
  return strncmp(str, substr, substr_len) == 0;
}

string_ends_with :: (str: char*, pattern: char*) -> bool {
  if !str || !pattern {
    return false;
  }
  len: int = strlen(str);
  patlen: int = strlen(pattern);
  if len < patlen {
    return false;
  }
  return strncmp(str + (len - patlen), pattern, patlen) == 0;
}

string_substr :: (src: char*, start: int, end: int) -> string {
  if !src {
    return #make(string, null);
  }
  len: int = strlen(src);
  if (start > end) { return #make(string, null); }
  if (len < end - start) { return #make(string, null); }
  dest: char* = malloc(sizeof(char) * (end - start) + 1);
  memcpy(dest, src + start, end - start);
  dest[(end - start)] = 0;
  v: string = #make(string, dest);
  free(dest);
  return v;
}

println :: (str: string) {
  printf("%s\n", #make(char*, str));
}

#foreign fabs :: (f: float) -> float;
#foreign abs :: (n: int) -> int;
#foreign isinf :: (arg: float) -> bool;
#foreign sqrt :: (f: float) -> float;
#foreign cos :: (f: float) -> float;
#foreign sin :: (f: float) -> float;
#foreign rand :: () -> int;
#foreign srand :: (seed: u32) -> void;

min :: (a: int, b: int) -> int {
  if a > b  {
    return b;
  }
  return a;
}

max :: (a: int, b: int) -> int {
  if a > b  {
    return a;
  }
  return b;
}

min :: (a: float, b: float) -> float {
  if a > b  {
    return b;
  }
  return a;
}

max :: (a: float, b: float) -> float {
  if a > b  {
    return a;
  }
  return b;
}

clamp :: (v: float, min: float, max: float) -> float {
  if v < min { return min; }
  if v > max { return max; }
  return v;
}

clamp :: (v: float*, min: float, max: float) {
  if *v < min { *v = min; }
  if *v > max { *v = max; }
}

Random :: enum {
  Max = 2147483647,
}

randf :: () -> float {
  return #make(float, rand()) / #make(float, Random.Max);
}
