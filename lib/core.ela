#foreign system :: (cmd: char*) -> int;

#foreign free :: (ptr: void*) -> void;
#foreign malloc :: (nbytes: u64) -> void*;
#foreign realloc :: (ptr: void*, size: u64) -> void*;

#foreign memcpy :: (dest: void*, src: void*, n: u64) -> void*;
#foreign memset :: (dest: void*, c: int, n: u64) -> void*;

#foreign printf :: (format: char*, ...) -> int;
#foreign scanf :: (format: char*, ...) -> int;

#foreign sleep :: (seconds: int);
#foreign usleep :: (c: int);

#foreign getchar :: () -> int;

#foreign fmod :: (l: float, r: float) -> float;

#foreign time :: (value: void*) -> int;
#foreign exit :: (code: int);

#foreign strlen :: (str: char*) -> int;
#foreign strcmp :: (str1: char*, str2: char*) -> int;
#foreign strcat :: (dest: char*, src: char*) -> char*;
#foreign snprintf :: (buffer: u8*, buffer_size: u64, format: char*, ...) -> int;
#foreign sprintf :: (buffer: u8*, format: char*, ...) -> int;
#foreign strncmp :: (str: char*, str2: char*, len: int) -> int;
#foreign isalnum :: (c: int) -> int;
#foreign isalpha :: (c: int) -> int;
#foreign isspace :: (c: int) -> int;
#foreign isdigit :: (c: int) -> int;
#foreign islower :: (c: int) -> int;
#foreign isupper :: (c: int) -> int;
#foreign isprint :: (c: int) -> int;
#foreign ispunct :: (c: int) -> int;

#foreign atoi :: (v: char*) -> int;
#foreign atof :: (v: char*) -> float64;

#foreign fabs :: (f: float64) -> float64;

#foreign isinf :: (arg: float64) -> bool;
#foreign isnan :: (arg: float64) -> bool;

#foreign sqrt :: (f: float64) -> float64;
#foreign cos :: (f: float64) -> float64;
#foreign sin :: (f: float64) -> float64;
#foreign rand :: () -> int;
#foreign srand :: (seed: u32);

str_starts_with :: (str: char*, substr: char*) -> bool {
  if str == null || substr == null 
    then return false;
    
  str_len: int = strlen(str);
  substr_len: int = strlen(substr);
  
  if str_len < substr_len 
    then return false;
    
  if str_len == substr_len && strcmp(str, substr) == 0
    then return true;
    
  return strncmp(str, substr, substr_len) == 0;
}

string_ends_with :: (str: char*, pattern: char*) -> bool {
  if !str || !pattern 
    then return false;
    
  len: int = strlen(str);
  patlen: int = strlen(pattern);
  
  if len < patlen 
    then return false;
    
  return strncmp(str + (len - patlen), pattern, patlen) == 0;
}

string_substr :: (src: char*, start: int, end: int) -> string {
  if !src 
    then return string{""};
    
  len: int = strlen(src);
  
  if (start > end) 
    then return string{""};
  
  if (len < end - start) 
    then return string{""};
    
  dest: char* = malloc(sizeof(char) * (end - start) + 1);
  
  memcpy(dest, src + start, end - start);
  
  dest[(end - start)] = 0;
  
  v: string = string{dest};
  
  free(dest);
  
  return v;
}

print :: (str: string) {
  printf("%s", str.data);
}
print :: (str: char *) {
  printf("%s", str);
}

println :: (str: string) {
  printf("%s\n", str.data);
}

println :: (str: char*) {
  printf("%s\n", str);
}

abs :: (v: s64) -> s64 {
  if v < 0 {
    return -v;
  }
  return v;
}

abs :: (v: float64) -> float64 {
  if v < 0.0 {
    return -v;
  }
  return v;
}

abs :: (v: float) -> float {
  if v < 0.0 {
    return -v;
  }
  return v;
}

abs :: (v: int) -> int {
  if v < 0 {
    return -v;
  }
  return v;
}

min :: (a: float, b: float) -> float {
  if a > b then return b;
  return a;
}

max :: (a: float, b: float) -> float {
  if a > b then return a;
  return b;
}

min :: (a: int, b: int) -> int {
  if a > b then return b;
  return a;
}

max :: (a: int, b: int) -> int {
  if a > b then return a;
  return b;
}

clamp :: (v: float64, min, max) -> float64 {
  if v < min then return min;
  if v > max then return max;
  return v;
}

clamped :: (v: float*, min: float, max) {
  if *v < min then *v = min;
  if *v > max then *v = max;
}

lerp :: (a: float, b, t) -> float {
  return (a * (1.0 - t)) + (b * t);
}

lerp :: (a: int, b, t: float) -> int {
  return (int)(a * (1.0 - t)) + (b * t) + 0.5;
}

Random :: enum {
  Max = 2147483647,
}

randf :: () -> float {
  return (float)rand() / (float)Random.Max;
}

timespec_t :: struct {
  tv_sec: s64;
  tv_nsec: s64;
}

#foreign clock_gettime :: (clock_id: int, tp: timespec_t*) -> int;

// returns the timespec_t 
get_high_precision_time :: () -> timespec_t {
  ts: timespec_t;
  clock_gettime(0, &ts);
  return ts;
}

// returns a seconds value from get_high_precision_time
timef :: () -> float64 {
  ts := get_high_precision_time();
  return (float64)ts.tv_sec + (float64)ts.tv_nsec / (float64)1_000_000_000.0;
}

to_string :: (num: s64) -> string {
  switch num {
    0: { return string{"0"}; }
    1: { return string{"1"}; }
    2: { return string{"2"}; }
    3: { return string{"3"}; }
    4: { return string{"4"}; }
    5: { return string{"5"}; }
    6: { return string{"6"}; }
    7: { return string{"7"}; }
    8: { return string{"8"}; }
    9: { return string{"9"}; }
  }
  
  negative := false;
  if num < 0 {
    negative = true;
    num = -num;
  }

  buffer: char[20];
  index: int = 0;

  while num > 0 {
    buffer[index] = #char "0" + (num % 10);
    num /= 10;
    index++;
  }

  if negative {
    buffer[index] = #char "-";
    index++;
  }

  // Reverse the buffer
  for i in 0..(index / 2) {
    temp := buffer[i];
    buffer[i] = buffer[index - i - 1];
    buffer[index - i - 1] = temp;
  }

  return string{(char*)buffer, ((char*) buffer) + index};
  
  
}

milliseconds :: (c: float64) -> int {
  return (int)(c * 100_000.0);
}
seconds :: (c: float64) -> int {
  return (int)(c * 1_000_000.0);
}



streq :: (left: char*, right) -> bool {
  return strcmp(left, right) == 0;
}