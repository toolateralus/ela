#foreign system :: fn(cmd: c_string) -> int;

#foreign free :: fn(ptr: void*) -> void;
#foreign malloc :: fn(nbytes: u64) -> void*;
#foreign calloc :: fn(num: u64, size: u64) -> void*;
#foreign realloc :: fn(ptr: void*, size: u64) -> void*;

#foreign memcpy :: fn(dest: void*, src: void*, n: u64) -> void*;
#foreign memset :: fn(dest: void*, c: int, n: u64) -> void*;
#foreign memmove :: fn(dest: void*, src: void*, nbytes: s64) -> int;

#foreign printf :: fn(format: c_string, ...) -> int;
#foreign exit :: fn(code: int);

#static print :: fn(str: string) {
  printf("%s", str.data);
}
#static print :: fn(str: char *) {
  printf("%s", str);
}
#static println :: fn(str: string) {
  printf("%s\n", str.data);
}
#static println :: fn(str: c_string) {
  printf("%s\n", str);
}
#static panic :: fn(msg: string) {
  println(msg);
  exit(1);
}

#foreign scanf :: fn(format: c_string, ...) -> int;
#foreign getchar :: fn() -> int;

#foreign sleep :: fn(seconds: int);
#foreign usleep :: fn(c: int);


#foreign strlen :: fn(str: c_string) -> int;
#foreign strcmp :: fn(str1: c_string, str2: c_string) -> int;
#foreign strcat :: fn(dest: c_string, src: c_string) -> c_string;
#foreign snprintf :: fn(buffer: u8*, buffer_size: u64, format: c_string, ...) -> int;
#foreign sprintf :: fn(buffer: u8*, format: c_string, ...) -> int;
#foreign strncmp :: fn(str: c_string, str2: c_string, len: int) -> int;

#foreign isalnum :: fn(c: int) -> int;
#foreign isalpha :: fn(c: int) -> int;
#foreign isspace :: fn(c: int) -> int;
#foreign isdigit :: fn(c: int) -> int;
#foreign islower :: fn(c: int) -> int;
#foreign isupper :: fn(c: int) -> int;
#foreign isprint :: fn(c: int) -> int;
#foreign ispunct :: fn(c: int) -> int;

#foreign atoi :: fn(v: c_string) -> int;
#foreign atof :: fn(v: c_string) -> float64;

#foreign rand :: fn() -> int;
#foreign srand :: fn(seed: u32);

Random :: struct {
  Max :: 2147483647;
  #static next :: fn(max: float32) -> float {
    return ((float)rand() / (float)Random::Max) * max;
  }
}

// api for string manipulation.
// when dot expressions are fixed we should be able to implement 'string' in language,
// and we won't need an extra struct to do this.
Strings :: struct {
  #static starts_with :: fn(str: c_string, substr: c_string) -> bool {
    if str == null || substr == null
      then return false;

    str_len: int = strlen(str);
    substr_len: int = strlen(substr);

    if str_len < substr_len
      then return false;

    if str_len == substr_len && strcmp(str, substr) == 0
      then return true;

    return strncmp(str, substr, substr_len) == 0;
  }
  #static ends_with :: fn(str: c_string, pattern: c_string) -> bool {
    if !str || !pattern
      then return false;

    len: int = strlen(str);
    patlen: int = strlen(pattern);

    if len < patlen
      then return false;

    return strncmp(str + (len - patlen), pattern, patlen) == 0;
  }
  #static starts_with :: fn(str: string, substr: string) -> bool {
    if str.data == null || substr.data == null
      then return false;

    str_len: int = str.length;
    substr_len: int = substr.length;

    if str_len < substr_len
      then return false;

    if str_len == substr_len && strcmp(str.data, substr.data) == 0
      then return true;

    return strncmp(str.data, substr.data, substr_len) == 0;
  }
  #static ends_with :: fn(str: string, pattern: string) -> bool {
    if !str.data || !pattern.data
      then return false;

    len: int = str.length;
    patlen: int = pattern.length;

    if len < patlen
      then return false;

    return strncmp(str.data + (len - patlen), pattern.data, patlen) == 0;
  }
  #static replace :: fn(str: string, pattern: string, replacement: string) -> string {
    if !str.data || !pattern.data || !replacement.data
      then return str;

    result: string;
    str_len := str.length;
    pattern_len := pattern.length;
    replacement_len := replacement.length;

    i: int;
    while i < str_len {
      if strncmp(str.data + i, pattern.data, pattern_len) == 0 {
        result.insert_substr_at(result.length, replacement);
        i += pattern_len;
      } else {
        result.insert_substr_at(result.length, string{str.data + i, str.data + i + 1});
        i += 1;
      }
    }

    return result;
  }
  #static substr :: fn(src: c_string, start: int, end: int) -> string {
    if !src
      then return {};

    len: int = strlen(src);
    if (start > end)
      then return {};
    if (len < end - start)
      then return {};

    dest: c_string = malloc(sizeof(char) * (end - start) + 1);
    memcpy(dest, src + start, end - start);
    dest[(end - start)] = 0;

    v: string = dest;
    free(dest);
    return v;
  }
  #static equals :: fn(a: c_string, b) -> bool {
    return strcmp(a, b) == 0;
  }
  #static split :: fn(str: c_string, delimiter: char) -> string[] {
    if !str then return {};
    result: string[];
    start: int = 0;
    str_len: int = strlen(str);
    for i in 0..str_len {
      if str[i] == delimiter {
        if i > start then result ~= string{str + start, str + i};
        start = i + 1;
      }
    }
    result ~= string{str + start, str + str_len};
    return result;
  }
  #static split :: fn(str: string, delimiter: char) -> string[] {
    if !str.data then return {};
    result: string[];
    start: int = 0;
    str_len: int = str.length;
    for i in 0..str_len {
      if str.data[i] == delimiter {
        if i > start then result ~= string{str.data + start, str.data + i};
        start = i + 1;
      }
    }
    result ~= string{str.data + start, str.data + str_len};
    return result;
  }
  #static contains :: fn(str: string, ch: char) -> bool {
    for _ch in str {
      if _ch == ch {
        return true;
      }
    }
    return false;
  }
  #static contains :: fn(str: c_string, ch: char) -> bool {
    for _ch in string{str} {
      if _ch == ch {
        return true;
      }
    }
    return false;
  }
  #static contains :: fn(str: string, pattern: string) -> bool {
    if str.data == null || pattern.data == null
      then return false;

    str_len: int = str.length;
    pattern_len: int = pattern.length;

    if str_len < pattern_len
      then return false;

    for i in 0..(str_len - pattern_len + 1) {
      if strncmp(str.data + i, pattern.data, pattern_len) == 0 {
        return true;
      }
    }
    return false;
  }
  #static contains :: fn(str: c_string, pattern: c_string) -> bool {
    if str == null || pattern == null
      then return false;

    str_len: int = strlen(str);
    pattern_len: int = strlen(pattern);

    if str_len < pattern_len
      then return false;

    for i in 0..(str_len - pattern_len + 1) {
      if strncmp(str + i, pattern, pattern_len) == 0 {
        return true;
      }
    }
    return false;
  }
}

to_string :: fn(num: s64) -> string {
  switch num {
    0: { return string{"0"}; }
    1: { return string{"1"}; }
    2: { return string{"2"}; }
    3: { return string{"3"}; }
    4: { return string{"4"}; }
    5: { return string{"5"}; }
    6: { return string{"6"}; }
    7: { return string{"7"}; }
    8: { return string{"8"}; }
    9: { return string{"9"}; }
  }

  negative := false;
  if num < 0 {
    negative = true;
    num = -num;
  }

  buffer: char[20];
  index: int = 0;

  while num > 0 {
    buffer[index] = '0' + (num % 10);
    num /= 10;
    index++;
  }

  if negative {
    buffer[index] = '-';
    index++;
  }

  // Reverse the buffer
  for i in 0..(index / 2) {
    temp := buffer[i];
    buffer[i] = buffer[index - i - 1];
    buffer[index - i - 1] = temp;
  }

  return string{(c_string)buffer, ((c_string) buffer) + index};


}

#foreign fmod :: fn(l: float, r: float) -> float;
#foreign fabs :: fn(f: float64) -> float64;
#foreign isinf :: fn(arg: float64) -> bool;
#foreign isnan :: fn(arg: float64) -> bool;

#foreign pow :: fn(base: float64, exponent: float64) -> float64;
#foreign sqrt :: fn(f: float64) -> float64;
#foreign cos :: fn(f: float64) -> float64;
#foreign sin :: fn(f: float64) -> float64;

abs :: fn(v: s64) -> s64 {
  if v < 0 {
    return -v;
  }
  return v;
}

abs :: fn(v: float64) -> float64 {
  if v < 0.0 {
    return -v;
  }
  return v;
}

abs :: fn(v: float) -> float {
  if v < 0.0 {
    return -v;
  }
  return v;
}

abs :: fn(v: int) -> int {
  if v < 0 {
    return -v;
  }
  return v;
}


min :: fn(a: int, b: int) -> int {
  if a > b then return b;
  return a;
}

max :: fn(a: int, b: int) -> int {
  if a > b then return a;
  return b;
}

min :: fn(a: float, b: float) -> float {
  if a > b then return b;
  return a;
}

max :: fn(a: float, b: float) -> float {
  if a > b then return a;
  return b;
}


clamp :: fn(v: float64, min, max) -> float64 {
  if v < min then return min;
  if v > max then return max;
  return v;
}

clamped :: fn(v: float*, min: float, max) {
  if *v < min then *v = min;
  if *v > max then *v = max;
}

lerp :: fn(a: float, b, t) -> float {
  return (a * (1.0 - t)) + (b * t);
}

lerp :: fn(a: int, b, t: float) -> int {
  return (int)(a * (1.0 - t)) + (b * t) + 0.5;
}

  #foreign time :: fn(value: void*) -> int;
timespec_t :: struct {
  tv_sec: s64;
  tv_nsec: s64;
}

#foreign clock_gettime :: fn(clock_id: int, tp: timespec_t*) -> int;

Timing :: struct {
  // returns the timespec_t for the current time since epoch.
  #static get_timespec_since_epoch :: fn() -> timespec_t {
    ts: timespec_t;
    clock_gettime(0, &ts);
    return ts;
  }
  
  // returns a seconds value representing time since epoch
  #static seconds :: fn() -> float64 {
    ts := get_timespec_since_epoch();
    return (float64)ts.tv_sec + (float64)ts.tv_nsec / (float64)1_000_000_000.0;
  }

  // returns a milliseconds value representing time since epoch
  #static milliseconds :: fn() -> float64 {
    ts := get_timespec_since_epoch();
    return (float64)ts.tv_sec * 1_000.0 + (float64)ts.tv_nsec / 1_000_000.0;
  }

  // returns a microseconds value representing time since epoch
  #static microseconds :: fn() -> float64 {
    ts := get_timespec_since_epoch();
    return (float64)ts.tv_sec * 1_000_000.0 + (float64)ts.tv_nsec / 1_000.0;
  }

  // returns a minutes value representing time since epoch
  #static minutes :: fn() -> float64 {
    ts := get_timespec_since_epoch();
    return (float64)ts.tv_sec / 60.0 + (float64)ts.tv_nsec / (60.0 * 1_000_000_000.0);
  }

  // returns an hours value representing time since epoch
  #static hours :: fn() -> float64 {
    ts := get_timespec_since_epoch();
    return (float64)ts.tv_sec / 3_600.0 + (float64)ts.tv_nsec / (3_600.0 * 1_000_000_000.0);
  }

  // returns a days value representing time since epoch
  #static days :: fn() -> float64 {
    ts := get_timespec_since_epoch();
    return (float64)ts.tv_sec / 86_400.0 + (float64)ts.tv_nsec / (86_400.0 * 1_000_000_000.0);
  }
}
