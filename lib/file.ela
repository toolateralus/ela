_IO_FILE :: struct;
#alias FILE :: _IO_FILE;

EOF :: -1;

SeekPosition :: enum {
  // Seek from beginning of file.
  Begin,
  // Seek from current position.
  Current,
  // Seek from end of file.
  End,
}

#foreign fread :: fn(ptr: void *, size: u64, count: u64, stream: FILE *) -> u64;
#foreign fwrite :: fn(ptr: void *, size: u64, count: u64, stream: FILE *) -> u64;
#foreign fseek :: fn(stream: FILE *, offset: s64, origin: s32) -> s32;
#foreign ftell :: fn(stream: FILE *) -> s64;
#foreign rewind :: fn(stream: FILE *) -> void;
#foreign fopen :: fn(fname: u8 *, flags: u8 *) -> FILE *;
#foreign fclose :: fn(file: FILE *) -> void;
#foreign fgetc :: fn(file: FILE *) -> u8;
#foreign putc :: fn(ch: u8, file: FILE *) -> void;
#foreign fprintf :: fn(stream: FILE *, format: u8 *, ...) -> s32;
#foreign fflush :: fn(f: FILE *);

#alias FileError :: str;

// TODO: add a way to do Binary stuff.
#flags FileOpenFlags :: enum {
  Read,
  Write,
}

File :: struct {
  fd: FILE*,
}

impl File {
  flush :: fn(self*) {
    fflush(self.fd);
  }

  close :: fn(self*) -> void {
    fflush(self.fd);
    fclose(self.fd);
    self.fd = null;
  }

  length :: fn(file: FILE*) -> u32 {
    original_pos := ftell(file);
    fseek(file, 0, SeekPosition::End);
    len := ftell(file);
    fseek(file, original_pos, SeekPosition::Current);
    return len as u32;
  }

  read_all :: fn(filename: str) -> (FileError, String) {
    file := fopen(filename.data, "r"c);
    if !file then return ("Couldn't open file", {});
    length := File::length(file);
    s: u8* = malloc(length + 1);
    memset(s, 0, length + 1);
    c: u8;
    for i in 0..length {
      s[i] = fgetc(file);
    }
    fclose(file);
    return ({}, String::from(s));
  }

  read_bytes :: fn(filename: str) -> List![u8] {
    file := fopen(filename.data, "r"c);
    if !file then return {};
    result: List![u8];
    length := File::length(file);
    result.resize(length);
    c: u8;
    for i in 0..length {
      result.push(c as u8);
    }
    fclose(file);
    return result;
  }

  write_all :: fn(filename: str, data: str) -> FileError {
    file := fopen(filename.data, "w"c);
    if !file {
      return "Unable to open file";
    }
    fwrite(data.data, sizeof(u8), data.length, file);
    fclose(file);
    return {};
  }

  // Used to convert our flag enum to a str for fopen/fclose etc.
  flags_to_string :: fn(flags: s32) -> str {
    if flags == FileOpenFlags::Read {
      return "r";
    } else if flags == FileOpenFlags::Write {
      return "w";
    } else if flags == FileOpenFlags::Read | FileOpenFlags::Write {
      return "rw";
    } else {
      panic("unexpected file flags passed to a file api function");
      return {};
    }
  }
}
