#import core;

_IO_FILE :: struct;

#alias FILE :: _IO_FILE;
EOF := -1;

SeekPosition :: enum {
  // Seek from beginning of file.
  Begin,
  // Seek from current position.
  Current,
  // Seek from end of file.
  End,
}

#foreign fread :: (ptr: void *, size: u64, count: u64, stream: FILE *) -> u64;
#foreign fwrite :: (ptr: void *, size: u64, count: u64, stream: FILE *) -> u64;
#foreign fseek :: (stream: FILE *, offset: s64, origin: s32) -> int;
#foreign ftell :: (stream: FILE *) -> s64;
#foreign rewind :: (stream: FILE *) -> void;
#foreign fopen :: (fname: char *, flags: char *) -> FILE *;
#foreign fclose :: (file: FILE *) -> void;
#foreign fgetc :: (file: FILE *) -> u8;
#foreign putc :: (ch: u8, file: FILE *) -> void;
#foreign fprintf :: (stream: FILE *, format: char *, ...) -> int;
#foreign fflush :: (f: FILE *);

file_get_length :: (file: FILE *) -> u32 {
  fseek(file, 0, SeekPosition.End);
  len := ftell(file);
  fseek(file, 0, SeekPosition.Begin);
  return #make(u32, len);
}

file_read_to_string :: (file: FILE*, len: u32*) -> char * {
  *len = file_get_length(file);
  str: char* = malloc(sizeof(char) * (*len + 1));
  index : int = 0;
  c: char ;
  while ((c = fgetc(file)) != EOF) {
    str[index] = c;
    ++index;
  }
  str[index] = #char "\0";
  return str;
}

file_read_to_string :: (filename: char *) -> char * {
  file := fopen(filename, "r");
  len := file_get_length(file);
  str: char* = malloc(sizeof(char) * (len + 1));
  index : int = 0;
  c: char;
  while ((c = fgetc(file)) != EOF) {
    str[index] = c;
    ++index;
  }
  str[index] = #char "\0";
  fclose(file);
  return str;
}
