#import core;

_IO_FILE :: struct;

#alias FILE :: _IO_FILE;
EOF := -1;

SeekPosition :: enum {
  // Seek from beginning of file.
  Begin,
  // Seek from current position.
  Current,
  // Seek from end of file.
  End,
}

#foreign fread :: (ptr: void *, size: u64, count: u64, stream: FILE *) -> u64;
#foreign fwrite :: (ptr: void *, size: u64, count: u64, stream: FILE *) -> u64;
#foreign fseek :: (stream: FILE *, offset: s64, origin: s32) -> int;
#foreign ftell :: (stream: FILE *) -> s64;
#foreign rewind :: (stream: FILE *) -> void;
#foreign fopen :: (fname: char *, flags: char *) -> FILE *;
#foreign fclose :: (file: FILE *) -> void;
#foreign fgetc :: (file: FILE *) -> u8;
#foreign putc :: (ch: u8, file: FILE *) -> void;
#foreign fprintf :: (stream: FILE *, format: char *, ...) -> int;
#foreign fflush :: (f: FILE *);

// TODO: add a way to do Binary stuff.
#flags FileOpenFlags :: enum {
  Read,
  Write,
}

File :: struct {
  #static length :: (file: FILE*) -> u32 {
    fseek(file, 0, SeekPosition.End);
    len := ftell(file);
    fseek(file, 0, SeekPosition.Begin);
    return #make(u32, len);
  }
  #static read_all :: (file: FILE*, len: u32*) -> string {
    *len = File::length(file);
    c: char;
    str: string;
    while ((c = fgetc(file)) != EOF) {
      str.push(c);
    }
    return str;
  }
  #static read_all :: (filename: char*) -> string {
    file := fopen(filename, "r");
    str: string;
    c: char;
    while ((c = fgetc(file)) != EOF) {
      str.push(c);
    }
    fclose(file);
    return str;
  }
  #static read_all :: (filename: string) -> string {
    file := fopen(filename.data, "r");
    str: string;
    c: char;
    while ((c = fgetc(file)) != EOF) {
      str.push(c);
    }
    fclose(file);
    return str;
  }
  #static write_all :: (filename: string, data: string) -> void {
    file := fopen(filename.data, "w");
    fwrite(data.data, sizeof(char), data.length, file);
    fclose(file);
  }
  #static write_all :: (filename: string, data: char*, nbytes: u64) -> void {
    file := fopen(filename.data, "w");
    fwrite(data, sizeof(char), nbytes, file);
    fclose(file);
  }
  #static write_all :: (filename: char*, data: char*, nbytes: u64) -> void {
    file := fopen(filename, "w");
    fwrite(data, sizeof(char), nbytes, file);
    fclose(file);
  }
  // Used to convert our flag enum to a string for fopen/fclose etc.
  #static flags_to_string :: (flags: int) -> string {
    s : string;
    if (flags & FileOpenFlags.Read != 0) 
      then s = "r";
    if (flags & FileOpenFlags.Write != 0)
      then s = $"{s}w";
    return s;
  }
  #static open :: (filename: string, flags: int = FileOpenFlags.Read | FileOpenFlags.Write) -> File {
    return {fopen(filename.data, flags_to_string(flags).data)};
  }

  /* INSTANCE DATA & METHODS */

  fd: FILE*;

  read :: (buffer: u8*, size: u64) -> u64 {
    return fread(buffer, 1, size, fd);
  }

  write :: (buffer: u8*, size: u64) -> u64 {
    return fwrite(buffer, 1, size, fd);
  }

  flush :: () {
    fflush(fd);
  }

  close :: () -> void {
    fclose(fd);
    fd = null;
  }
}
