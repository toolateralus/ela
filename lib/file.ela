#import core;

_IO_FILE :: struct;
#alias FILE :: _IO_FILE;

s32 EOF=-1;

SeekPosition :: enum {
  // Seek from beginning of file.
  Begin,
  // Seek from current position.
  Current,
  // Seek from end of file.
  End,
}

#foreign fread :: (void *ptr, u64 size, u64 count, _IO_FILE *stream) -> u64;
#foreign fwrite :: (void *ptr, u64 size, u64 count, _IO_FILE *stream) -> u64;
#foreign fseek :: (_IO_FILE *stream, s64 offset, s32 origin) -> int;
#foreign ftell :: (_IO_FILE *stream) -> s64;
#foreign rewind :: (_IO_FILE *stream) -> void;
#foreign fopen :: (char *fname, char *flags) -> _IO_FILE *;
#foreign fclose :: (_IO_FILE *file) -> void;
#foreign fgetc :: (_IO_FILE *file) -> u8;
#foreign putc :: (u8 ch, _IO_FILE *file) -> void;
#foreign fprintf :: (_IO_FILE *stream, char *format, ...) -> int;
#foreign fflush :: (FILE *f);

file_get_length :: (FILE *file) -> u32 {
  fseek(file, 0, SeekPosition.End);
  len := ftell(file);
  fseek(file, 0, SeekPosition.Begin);
  return #make(u32, len);
}

file_read_to_string :: (FILE *file, u32* len) -> char * {
  *len = file_get_length(file);
  char *str = malloc(sizeof(char) * (*len + 1));
  index := 0;
  char c;
  while ((c = fgetc(file)) != EOF) {
    str[index] = c;
    ++index;
  }
  str[index] = #char "\0";
  return str;
}

File :: struct {
  _IO_FILE* file;
  #ctor :: (char * name) {
    file = fopen(name, "rw");
  }
  #dtor :: () {
    fclose(file);
  }
  
  read :: () -> string {
    u32 len;
    return #make(string, file_read_to_string(file, &len));
  }
  
}
