#import core;

_IO_FILE :: struct;

#alias FILE :: _IO_FILE;
EOF := -1;

SeekPosition :: enum {
  // Seek from beginning of file.
  Begin,
  // Seek from current position.
  Current,
  // Seek from end of file.
  End,
}

#foreign fread :: fn(ptr: void *, size: u64, count: u64, stream: FILE *) -> u64;
#foreign fwrite :: fn(ptr: void *, size: u64, count: u64, stream: FILE *) -> u64;
#foreign fseek :: fn(stream: FILE *, offset: s64, origin: s32) -> int;
#foreign ftell :: fn(stream: FILE *) -> s64;
#foreign rewind :: fn(stream: FILE *) -> void;
#foreign fopen :: fn(fname: char *, flags: char *) -> FILE *;
#foreign fclose :: fn(file: FILE *) -> void;
#foreign fgetc :: fn(file: FILE *) -> u8;
#foreign putc :: fn(ch: u8, file: FILE *) -> void;
#foreign fprintf :: fn(stream: FILE *, format: char *, ...) -> int;
#foreign fflush :: fn(f: FILE *);

// TODO: add a way to do Binary stuff.
#flags FileOpenFlags :: enum {
  Read,
  Write,
}

File :: struct {
  fd: FILE*;
}

impl File {
  // TODO: fix me
  // #dtor :: fn(self*) {
  //   if fd then close();
  // }

  flush :: fn(self*) {
    fflush(self.fd);
  }
  close :: fn(self*) -> void {
    fflush(self.fd);
    fclose(self.fd);
    self.fd = null;
  }

  length :: fn(file: FILE*) -> u32 {
    fseek(file, 0, SeekPosition::End);
    len := ftell(file);
    fseek(file, 0, SeekPosition::Begin);
    return len as u32;
  }
  read_all :: fn(filename: string) -> string {
    file := fopen(filename.data, "r");
    str: string;
    c: char;
    while ((c = fgetc(file)) != EOF) {
      str = $"{str}{c}";
    }
    fclose(file);
    return str;
  }

  read_bytes :: fn(filename: string) -> u8[] {
    file := fopen(filename.data, "r");
    result: u8[];
    c: char;
    while ((c = fgetc(file)) != EOF) {
      result ~= c as u8;
    }
    fclose(file);
    return result;
  }

  write_all :: fn(filename: string, data: string) -> void {
    file := fopen(filename.data, "w");
    fwrite(data.data, sizeof(char), data.length, file);
    fclose(file);
  }

  // Used to convert our flag enum to a string for fopen/fclose etc.
  flags_to_string :: fn(flags: int) -> string {
    s : string;
    if (flags & FileOpenFlags::Read != 0) 
      then s = "r";
    if (flags & FileOpenFlags::Write != 0)
      then s = $"{s}w";
    return s;
  }
  open :: fn(filename: string, flags: int = FileOpenFlags::Read | FileOpenFlags::Write) -> File {
    return File{
      fd: fopen(filename.data, File::flags_to_string(flags).data)
    };
  }
  read :: fn(self*, buffer: u8*, size: u64) -> u64 {
    return fread(buffer, 1, size, self.fd);
  }
  write :: fn(self*, buffer: u8*, size: u64) -> u64 {
    return fwrite(buffer, 1, size, self.fd);
  }
}
