#export DIR :: struct;
#foreign getcwd :: fn(buf: c_string, size: u64) -> c_string;

dirent :: struct {
  d_ino: u64,
  d_off: u64,
  d_reclen: u16,
  d_type: u8,
  d_name: u8[256],
}

#foreign opendir :: fn(name: u8 *) -> DIR*;
#foreign readdir :: fn(dir: DIR*) -> dirent*;
#foreign closedir :: fn(dir: void*) -> s32;

Directory :: struct {
  path: string,
  files: List![string],
}

impl Directory {
  current :: fn() -> c_string {
    buffer: u8[256];
    getcwd(buffer, 256);
    return strdup(buffer) as c_string;
  }

  open :: fn(path: c_string) -> Directory {
    dir := opendir(path);

    if !dir then return { 
      path: string::from(path),
      files : {}
    };

    files: List![string];
    entry: void*;
    while entry = readdir(dir) {
      ent : dirent* = entry;
      files.push(string::from(ent.d_name as c_string));
    }

    closedir(dir);
    return {path: string::from(path), files: files};
  }

  deinit :: fn(self*) {
    self.path.deinit();
    for path in self.files {
      path.deinit();
    }
    self.files.deinit();
  }
}