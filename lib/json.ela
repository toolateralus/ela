#import core;
#import file;
#import reflection;

JsonTokenType :: enum {
  Invalid,
  True,
  False,
  Null,
  Eof,
  Colon,
  Number,
  String,
  LCurly,
  RCurly,
  LBracket,
  RBracket,
  Comma,
}

JsonToken :: struct {
  type : int = JsonTokenType::Invalid;
  value : string;
  line: int;
  column: int;
}

impl JsonToken {
  Invalid :: fn() -> #self {
    v: #self;
    return v;
  }
}

JsonLexer :: struct {
  tokenTypeNames : string[] = {
    "Invalid",
    "True",
    "False",
    "Null",
    "Eof",
    "Colon",
    "Number",
    "String",
    "LCurly",
    "RCurly",
    "LBracket",
    "RBracket",
    "Comma",
  };

  file: string;
  line_start: int;
  cur_line: int;
  position : int;
  length : int;
  input : string;
  lookahead_buffer : JsonToken[];
}
impl JsonLexer {
  err :: fn(self*, token: JsonToken, msg: string) {
    println($"[{self.file}:{token.line}:{token.column}] {msg}");
    exit(1);
  }

  create :: fn(_file: c_string, _input: string) -> #self {
    self: #self;
    self.file = _file;
    self.input = _input;
    self.length = self.input.length;
    return self;
  }

  get_token :: fn(self*) -> JsonToken {
    if self.lookahead_buffer.length != 0 {
      return ~self.lookahead_buffer;
    }
    token : JsonToken;
    token.column = self.position - self.line_start;
    token.line = self.cur_line + 1;
    if self.position >= self.length || self.input[self.position] == 0 {
      token.type = JsonTokenType::Eof;
      return token;
    }
    c : char = self.input[self.position];

    // whitespace
    while self.position < self.length {
      if c == '\n' || c == '\r' {
        self.line_start = self.position;
        self.cur_line++;
      } else if !isspace(c) {
        break;
      }
      self.position++;
      c = self.input[self.position];
    }
    token.column = self.position - self.line_start;
    token.line = self.cur_line + 1;

    if self.position >= self.length || self.input[self.position] == 0 {
      token.type = JsonTokenType::Eof;
      return token;
    }

    // comments
    if c == '/' {
      self.position++;
      if self.position >= self.length {
        self.err(token, "Unexpected character: {c}");
      }
      c = self.input[self.position];
      if c != '/' {
        self.err(token, "Unexpected character: {c}");
      }
      while c != '\n' && c != '\r' {
        self.position++;
        if self.position >= self.length || self.input[self.position] == 0 {
          token.type = JsonTokenType::Eof;
          return token;
        }
        c = self.input[self.position];
      }
      return self.get_token();
    }

    if isdigit(c) {
      // numbers
      len : int;
      start : int = self.position;
      while (isdigit(c) || c == '.') && self.position < self.length {
        len++;
        self.position++;
        c = self.input[self.position];
      }
      token.value = string::from_ptr(&self.input[start], &self.input[start] + len);
      token.type = JsonTokenType::Number;
      return token;
      // operators
    } else if c == ':' {
      token.value = ":";
      token.type = JsonTokenType::Colon;
      self.position++;
      return token;
    } else if c == '{' {
      token.value = "{";
      token.type = JsonTokenType::LCurly;
      self.position++;
      return token;
    } else if c == '}' {
      token.value = "}";
      token.type = JsonTokenType::RCurly;
      self.position++;
      return token;
    } else if c == '[' {
      token.value = "[";
      token.type = JsonTokenType::LBracket;
      self.position++;
      return token;
    } else if c == ']' {
      token.value = "]";
      token.type = JsonTokenType::RBracket;
      self.position++;
      return token;
    } else if c == ',' {
      token.value = ",";
      token.type = JsonTokenType::Comma;
      self.position++;
      return token;
    } else if c == '\"' {
      self.position++;
      c = self.input[self.position];
      len : int;
      start : int = self.position;
      while c != '\"' && self.position < self.length {
        if c == '\n' || c == '\r' {
          self.line_start = self.position;
          self.cur_line++;
        }
        len++;
        self.position++;
        c = self.input[self.position];
      }
      self.position++;
      token.value = string::from_ptr(&self.input[start], &self.input[start] + len);
      token.type = JsonTokenType::String;
      return token;
    } else if self.position + 4 <= self.length && strncmp(&self.input[self.position], "true", 4) == 0 {
      token.value = "true";
      token.type = JsonTokenType::True;
      self.position += 4;
      return token;
    } else if self.position + 5 <= self.length && strncmp(&self.input[self.position], "false", 5) == 0 {
      token.value = "false";
      token.type = JsonTokenType::False;
      self.position += 5;
      return token;
    } else if self.position + 4 <= self.length && strncmp(&self.input[self.position], "null", 4) == 0 {
      token.value = "null";
      token.type = JsonTokenType::Null;
      self.position += 4;
      return token;
    } else {
      return token;
    }
  }

  peek_token :: fn(self*) -> JsonToken {
    token : JsonToken = self.get_token();
    self.lookahead_buffer ~= token;
    return token;
  }

  expect_types :: fn(self*, types: s32[]) -> JsonToken {
    token := self.get_token();
    types_string: string;
    i : int;
    for type in types {
      if token.type == type then return token;
      if i == 0 {
        types_string = self.tokenTypeNames[type];
        i++;
      } else {
        types_string = $"{types_string} | {self.tokenTypeNames[type]}";
      }
    }
    self.err(token, $"Expected {types_string}, got {self.tokenTypeNames[token.type]} :: {token.value}");
    return JsonToken::Invalid();
  }

  expect_type :: fn(self*, type: s32) -> JsonToken {
    return self.expect_types(self, {type});
  }
}

JsonValueType :: enum {
  Invalid = -1,
  String,
  Number,
  Object,
  Array,
  Boolean,
  Null,
}

JsonKeyValuePair :: struct;
JsonValue :: struct;

// this causes a type error for some reason
// #alias JsonObject :: JsonKeyValuePair*[];
// #alias JsonArray :: JsonValue*[];

JsonKeyValuePair :: struct {
  key: string;
  value: JsonValue*;
}

JsonValueUnion :: union {
  number: float64;
  boolean: bool;
  _string: string;
  object: JsonKeyValuePair[];
  array: JsonValue*[];
}

JsonValue :: struct {
  data: JsonValueUnion;
  type : int = JsonValueType::Invalid;

}

impl JsonValue {
  #dtor :: fn() {
    if type == JsonValueType::Object {
      for kvp in data.object {
        delete(kvp.value);
      }
      destruct(data.object);
    } else if type == JsonValueType::Array {
      for val in data.array {
        delete(val);
      }
      destruct(data.array);
    } else if type == JsonValueType::String {
      destruct(data._string);
    }
  }
  to_string :: fn(self*) -> string {
    if self.type == JsonValueType::Object {
      obj := self.data.object;
      len := obj.length;
      rBrack := "}";
      str := "{";

      for i in 0..len {
        kvp := obj[i];
        if i == 0 {
          str = $"{str}{32 as char}{kvp.key}{32 as char}: {kvp.value}";
        } else {
          str = $"{str}, {32 as char}{kvp.key}{32 as char}: {kvp.value}";
        }
      }
      return $"{str}{rBrack}";
    } else if self.type == JsonValueType::Array {
      arr := self.data.array;
      len := arr.length;
      str := "[";

      for i in 0..len {
        val := arr[i];
        if i == 0 {
          str = $"[{val}";
        } else {
          str = $"{str}, {val}";
        }
      }
      return $"{str}]";
    } else if self.type == JsonValueType::Number {
      return $"{data.number}";
    } else if self.type == JsonValueType::String {
      return $"{32 as char}{data._string}{32 as char}";
    } else if self.type == JsonValueType::Boolean {
      if self.data.boolean == true {
        return string::from("true");
      } else {
        return string::from("false");
      }
    } else if self.type == JsonValueType::Null {
      return string::from("null");
    } else {
      return string::empty();
    }
  }
  get :: fn(self*, key: string) -> JsonValue* {
    if self.type != JsonValueType::Object {
      return null;
    }
    for kvp in self.data.object {
      if kvp.key == key {
        return kvp.value;
      }
    }
    return null;
  }
  get :: fn(self*, index: int) -> JsonValue* {
    if self.type != JsonValueType::Array {
      return null;
    }
    arr := self.data.array;
    if index < 0 || index >= arr.length {
      return null;
    }
    return arr[index];
  }
  is_number :: fn(self*) -> bool {
    return self.type == JsonValueType::Number;
  }
  is_string :: fn(self*) -> bool {
    return self.type == JsonValueType::String;
  }
  is_object :: fn(self*) -> bool {
    return self.type == JsonValueType::Object;
  }
  is_array :: fn(self*) -> bool {
    return self.type == JsonValueType::Array;
  }
  is_boolean :: fn(self*) -> bool {
    return self.type == JsonValueType::Boolean;
  }
  is_null :: fn(self*) -> bool {
    return self.type == JsonValueType::Null;
  }
  as_number :: fn(self*) -> float64 {
    if self.type == JsonValueType::Number {
      return self.data.number;
    }
    return 0.0; // or handle error
  }
  as_string :: fn(self*) -> string {
    if self.type == JsonValueType::String {
      return self.data._string;
    }
    return ""; // or handle error
  }
  as_object :: fn(self*) -> JsonKeyValuePair[] {
    if self.type == JsonValueType::Object {
      return self.data.object;
    }
    return {}; // or handle error
  }
  as_array :: fn(self*) -> JsonValue*[] {
    if self.type == JsonValueType::Array {
      return self.data.array;
    }
    return {}; // or handle error
  }
  as_boolean :: fn(self*) -> bool {
    if self.type == JsonValueType::Boolean {
      return self.data.boolean;
    }
    return false; // or handle error
  }
}

json_parse :: fn(lexer: JsonLexer*) -> JsonValue* {
  value := new JsonValue;
  token := lexer.expect_types(lexer, {
    JsonTokenType::LBracket,
    JsonTokenType::LCurly,
    JsonTokenType::Number,
    JsonTokenType::String,
    JsonTokenType::True,
    JsonTokenType::False,
    JsonTokenType::Null,
  });
  if token.type == JsonTokenType::LBracket {
    value.type = JsonValueType::Array;
    value.data.array = JsonValue*[]{};
    if lexer.peek_token().type == JsonTokenType::RBracket {
      lexer.get_token();
      return value;
    }
    while token.type != JsonTokenType::RBracket {
      value.data.array ~= json_parse(lexer);
      token = lexer.expect_types(lexer, {JsonTokenType::RBracket, JsonTokenType::Comma});
    }
  } else if token.type == JsonTokenType::LCurly {
    value.type = JsonValueType::Object;
    value.data.object = {};
    if lexer.peek_token().type == JsonTokenType::RCurly {
      lexer.get_token();
      return value;
    }
    while token.type != JsonTokenType::RCurly {
      key := lexer.expect_type(JsonTokenType::String);
      _ := lexer.expect_type(JsonTokenType::Colon);
      value.data.object ~= {key: key.value, value: json_parse(lexer)};
      token = lexer.expect_types(lexer, {JsonTokenType::RCurly, JsonTokenType::Comma});
    }
  } else if token.type == JsonTokenType::Number {
    value.type = JsonValueType::Number;
    value.data.number = atof(token.value.data);
  } else if token.type == JsonTokenType::String {
    value.type = JsonValueType::String;
    value.data._string = token.value;
  } else if token.type == JsonTokenType::True {
    value.type = JsonValueType::Boolean;
    value.data.boolean = true;
  } else if token.type == JsonTokenType::False {
    value.type = JsonValueType::Boolean;
    value.data.boolean = false;
  } else if token.type == JsonTokenType::Null {
    value.type = JsonValueType::Null;
  }
  return value;
}

json_parse_file :: fn(file: c_string) -> JsonValue* {
  lexer := #make(JsonLexer, file, File::read_all(file));
  return json_parse(&lexer);
}

json_parse_string :: fn(str: c_string) -> JsonValue* {
  lexer := #make(JsonLexer, "string", str);
  return json_parse(&lexer);
}

json_serialize_scalar :: fn(object: void*, type: Type*) -> JsonValue* {
  val := new JsonValue{};
  if type_is_float(type) {
    val.type = JsonValueType::Number;
    if type.id == #typeid(float) {
      val.data.number = *(object as float*);
      return val;
    } else if type.id == #typeid(float64) {
      val.data.number = *(object as float64*);
      return val;
    } else if type.id == #typeid(float32) {
      val.data.number = *(object as float32*);
      return val;
    }
  } else if type_is_integral(type) {
    val.type = JsonValueType::Number;
    if type_is_signed(type) {
      if type.id == #typeid(char) {
        val.data.number = *(object as c_string);
        return val;
      } else if type.id == #typeid(s8) {
        val.data.number = *(object as s8*);
        return val;
      } else if type.id == #typeid(s16) {
        val.data.number = *(object as s16*);
        return val;
      } else if type.id == #typeid(s32) {
        val.data.number = *(object as s32*);
        return val;
      } else if type.id == #typeid(s64) {
        val.data.number = *(object as s64*);
        return val;
      } else if type.id == #typeid(int) {
        val.data.number = *(object as int*);
        return val;
      }
    } else {
      if type.id == #typeid(u8) {
        val.data.number = *(object as u8*);
        return val;
      } else if type.id == #typeid(u16) {
        val.data.number = *(object as u16*);
        return val;
      } else if type.id == #typeid(u32) {
        val.data.number = *(object as u32*);
        return val;
      } else if type.id == #typeid(u64) {
        val.data.number = *(object as u64*);
        return val;
      }
    }
  } else if type_is_bool(type) {
    val.type = JsonValueType::Boolean;
    val.data.boolean = *(object as bool*);
  }
  return null;
}

json_serialize :: fn(object: void*, type: Type*) -> JsonValue*;

json_serialize_struct :: fn(object: void*, type: Type*) -> JsonValue* {
  val := new JsonValue{};
  val.type = JsonValueType::Object;
  val.data.object = JsonKeyValuePair[]{};
  for field in type.fields {
    field_kvp: JsonKeyValuePair;
    field_kvp.key = field.name;
    field_kvp.value = json_serialize(object as u8* + field.offset, field.type);
    val.data.object ~= field_kvp;
  }
  return val;
}

json_serialize_array :: fn(object: void*, type: Type*) -> JsonValue* {
  val := new JsonValue{};
  val.type = JsonValueType::Array;
  val.data.array = JsonValue*[]{};
  for elem in type.elements(object as c_string) {
    val.data.array ~= json_serialize(elem.data, elem.type);
  }
  return val;
}

json_serialize :: fn(object: void*, type: Type*) -> JsonValue* {
  if type_has_no_extension(type) {
    if type.id == #typeid(string) {
      val := new JsonValue{};
      val.type = JsonValueType::String;
      val.data._string = *(object as string*);
      return val;
    } else if type_is_scalar(type) {
      return json_serialize_scalar(object, type);
    } else if type_is_struct(type) {
      return json_serialize_struct(object, type);
    }
  } else if type_is_array(type) || type_is_fixed_array(type) {
    return json_serialize_array(object, type);
  }
  return null;
}

JsonError :: struct {
  message: string;
  has_value : bool = false;
}
impl JsonError {
  Error :: fn(msg: string) -> JsonError {
    return { has_value: true , message: msg };
  }
  Ok :: fn() -> JsonError {
    return { has_value: false, message: string::empty()};
  }
  to_string :: fn(self*) -> string {
    if self.has_value {
      return $"Json Error: {self.message}";
    } else {
      return "Ok";
    }
  }
}

json_deserialize :: fn(val: JsonValue*, object: void*, type: Type*) -> JsonError;

json_deserialize_struct :: fn(val: JsonValue*, object: void*, type: Type*) -> JsonError {
  for json_field in val.data.object {
    struct_field := type_get_field(type, json_field.key);
    if !struct_field {
      return JsonError::Error($"Could not find field {json_field.key} in type {type.name}");
    }
    err := json_deserialize(json_field.value, object as u8* + struct_field.offset, struct_field.type);
    if err.has_value {
      return err;
    }
  }
  return {};
}

json_deserialize_array :: fn(val: JsonValue*, object: void*, type: Type*) -> JsonError {
  i := 0;
  ptr: void* = malloc(type.element_type.size);
  
  for elem in val.as_array() {
    memset(ptr, 0, type.element_type.size);
    err := json_deserialize(elem, ptr, type.element_type);
    if err.has_value {
      return err;
    }
    memcpy(object as char* + (i * type.element_type.size), ptr, type.element_type.size);
    ++i;
  }
  free(ptr);
  return {};
}

json_deserialize_scalar :: fn(val: JsonValue*, object: void*, type: Type*) -> JsonError {
  if (!type_has_no_extension(type)) {
    return JsonError::Error("Unable to deserialize into pointer type with 'json_deserialize_scalar'");
  }
  if type_is_bool(type) {
    *(object as bool*) = val.as_boolean();
  } else if (type_is_float(type)) {
    if (type.size == 8) {
      *(object as float64*) = val.as_number();
    } else {
      *(object as float32*) = val.as_number() as float32;
    }
  } else if (type_is_integral(type)) {
    is_signed := type_is_signed(type);
    switch type.size {
        8: {
          if is_signed {
            *(object as s64*) = val.as_number();
          } else {
            *(object as u64*) = val.as_number() as u64;
          }
        }
        4: {
          if is_signed {
            *(object as s32*) = val.as_number() as s32;
          } else {
            *(object as u32*) = val.as_number() as u32;
          }
        }
        2: {
          if is_signed {
            *(object as s16*) = val.as_number() as s16;
          } else {
            *(object as u16*) = val.as_number() as u16;
          }
        }
        1: {
          if is_signed {
            *(object as s8*) = val.as_number() as s8;
          } else {
            *(object as u8*) = val.as_number() as u8;
          }
        }
    }
  } else if (type_is_string(type)) {
    *(object as string*) = val.as_string();
  } else {
    return JsonError::Error($"Unable to deserialize into type {type.name}");
  }
  return {};
}

json_deserialize :: fn(val: JsonValue*, object: void*, type: Type*) -> JsonError {
  if val.is_string() {
    if type.id == #typeid(string) {
      *(object as string*) = val.as_string();
      return {};
    } else {
      return JsonError::Error($"Type mismatch: string to {type.name}");
    }
  } else if val.is_object() {
    if type_is_struct(type) {
      return json_deserialize_struct(val, object, type);
    } else {
      return JsonError::Error($"Type mismatch: object to {type.name}");
    }
  } else if val.is_array() {
    return json_deserialize_array(val, object, type);
  }
  return json_deserialize_scalar(val, object, type);
}
