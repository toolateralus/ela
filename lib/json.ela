#import file;
#import format;
#import builder;

JsonValueType :: enum {
  Invalid = -1,
  String,
  Number,
  Object,
  Array,
  Boolean,
  Null,
}

JsonKeyValuePair :: struct;
JsonValue :: struct;

// this causes a type error for some reason

#alias JsonObject :: List![JsonKeyValuePair*];
#alias JsonArray  :: List![JsonValue*];

JsonKeyValuePair :: struct {
  key: u8*,
  value: JsonValue*,
}

JsonValueUnion :: union {
  number: f64,
  boolean: bool,
  _string: u8*,
  object: List![JsonKeyValuePair],
  array: JsonArray,
}

JsonValue :: struct {
  data: JsonValueUnion,
  type : s32,
}

impl JsonValue {
  to_string :: fn(self*) -> u8* {
    builder: String_Builder;
    defer builder.deinit();
  
    if self.type == JsonValueType::Object {
      obj := self.data.object;
      len := obj.length;
      builder.append_u8('{');
  
      for i in 0..len {
        kvp := obj[i];
        if i > 0 {
          builder.append(", ");
        }
        builder.append_u8('\"');
        builder.append(kvp.key);
        builder.append("\": ");
        builder.append_then_free(kvp.value.to_string());
      }
  
      builder.append_u8('}');
    } else if self.type == JsonValueType::Array {
      arr := self.data.array;
      len := arr.length;
      builder.append_u8('[');
  
      for i in 0..len {
        val := arr[i];
        if i > 0 {
          builder.append(", ");
        }
        builder.append_then_free(val.to_string());
      }
  
      builder.append_u8(']');
    } else if self.type == JsonValueType::Number {
      builder.append_then_free(to_string(self.data.number));
    } else if self.type == JsonValueType::String {
      builder.append_concat_then_free({"\"", self.data._string, "\""}, {false, true, false});
    } else if self.type == JsonValueType::Boolean {
      if self.data.boolean == true {
        builder.append("true");
      } else {
        builder.append("false");
      }
    } else if self.type == JsonValueType::Null {
      builder.append("null");
    } else {
      return "";
    }
  
    return builder.get_string();
  }
  destroy :: fn(self*) {
    if self.type == JsonValueType::Object {
      for kvp in self.data.object {
        free(kvp.value);
      }
      // destruct(self.data.object); // TODO: reimplement memory management
    } else if self.type == JsonValueType::Array {
      for val in self.data.array {
        free(val);
      }
      // destruct(self.data.array);   // TODO: reimplement memory management
    } else if self.type == JsonValueType::String {
      
    }
  }

  get :: fn(self*, key: u8*) -> JsonValue* {
    if self.type != JsonValueType::Object {
      return null;
    }
    for kvp in self.data.object {
      if kvp.key == key {
        return kvp.value;
      }
    }
    return null;
  }

  at :: fn(self*, index: s32) -> JsonValue* {
    if self.type != JsonValueType::Array {
      return null;
    }
    arr := self.data.array;
    if index < 0 || index >= arr.length {
      return null;
    }
    return arr[index];
  }

  is_number :: fn(self*) -> bool {
    return self.type == JsonValueType::Number;
  }
  is_string :: fn(self*) -> bool {
    return self.type == JsonValueType::String;
  }
  is_object :: fn(self*) -> bool {
    return self.type == JsonValueType::Object;
  }
  is_array :: fn(self*) -> bool {
    return self.type == JsonValueType::Array;
  }
  is_boolean :: fn(self*) -> bool {
    return self.type == JsonValueType::Boolean;
  }
  is_null :: fn(self*) -> bool {
    return self.type == JsonValueType::Null;
  }
  as_number :: fn(self*) -> f64 {
    if self.type == JsonValueType::Number {
      return self.data.number;
    }
    return 0.0; // or handle error
  }
  as_string :: fn(self*) -> u8* {
    if self.type == JsonValueType::String {
      return self.data._string;
    }
    return null; // or handle error
  }
  as_object :: fn(self*) -> List![JsonKeyValuePair] {
    if self.type == JsonValueType::Object {
      return self.data.object;
    }
    return {}; // or handle error
  }
  as_array :: fn(self*) -> JsonArray {
    if self.type == JsonValueType::Array {
      return self.data.array;
    }
    return {}; // or handle error
  }
  as_boolean :: fn(self*) -> bool {
    if self.type == JsonValueType::Boolean {
      return self.data.boolean;
    }
    return false; // or handle error
  }
}

json_parse :: fn(lexer: JsonLexer*) -> (s32, JsonValue*) {
  value : JsonValue* = malloc(sizeof(JsonValue));
  err, token := lexer.expect_types({
    JsonTokenType::LBracket,
    JsonTokenType::LCurly,
    JsonTokenType::Number,
    JsonTokenType::String,
    JsonTokenType::True,
    JsonTokenType::False,
    JsonTokenType::Null,
  });
  if err {
    return (err, null);
  }
  if token.type == JsonTokenType::LBracket {
    value.type = JsonValueType::Array;
    value.data.array = JsonArray{};
    peek_err, peek_token := lexer.peek_token();
    if peek_token.type == JsonTokenType::RBracket {
      lexer.get_token();
      return (JsonError::SUCCESS, value);
    }
    while token.type != JsonTokenType::RBracket {
      err, val := json_parse(lexer);
      if err {
        return (err, null);
      }
      value.data.array.push(val);
      err, token = lexer.expect_types({JsonTokenType::RBracket, JsonTokenType::Comma});
      if err {
        return (err, null);
      }
    }
  } else if token.type == JsonTokenType::LCurly {
    value.type = JsonValueType::Object;
    value.data.object = {};
    peek_err, peek_token := lexer.peek_token();
    if peek_token.type == JsonTokenType::RCurly {
      lexer.get_token();
      return (JsonError::SUCCESS, value);
    }
    while token.type != JsonTokenType::RCurly {
      key_err, key := lexer.expect_type(JsonTokenType::String);
      if key_err {
        return (key_err, null);
      }
      colon_err, _ := lexer.expect_type(JsonTokenType::Colon);
      if colon_err {
        return (colon_err, null);
      }
      parse_err, val := json_parse(lexer);
      if parse_err {
        return (parse_err, null);
      }
      value.data.object.push({key: key.value, value: val});
      err, token = lexer.expect_types({JsonTokenType::RCurly, JsonTokenType::Comma});
      if err {
        return (err, null);
      }
    }
  } else if token.type == JsonTokenType::Number {
    value.type = JsonValueType::Number;
    value.data.number = atof(token.value);
  } else if token.type == JsonTokenType::String {
    value.type = JsonValueType::String;
    value.data._string = token.value;
  } else if token.type == JsonTokenType::True {
    value.type = JsonValueType::Boolean;
    value.data.boolean = true;
  } else if token.type == JsonTokenType::False {
    value.type = JsonValueType::Boolean;
    value.data.boolean = false;
  } else if token.type == JsonTokenType::Null {
    value.type = JsonValueType::Null;
  }
  return (JsonError::SUCCESS, value);
}

json_parse_file :: fn(file: u8*) -> (s32, JsonValue*) {
  err, data := File::read_all(file);
  if err {
    // file API never allocates for errors, so we just strdup it here.
    set_json_error(strdup(err));
    return (JsonError::ERROR, null);
  }
  lexer := JsonLexer::create(file, data);
  return json_parse(&lexer);
}

json_parse_string :: fn(s: str) -> (s32, JsonValue*) {
  lexer := JsonLexer::create(":<loaded from string>:", s);
  return json_parse(&lexer);
}
json_serialize_scalar :: fn(object: void*, type: Type*) -> (s32, JsonValue*) {
  val : JsonValue* = malloc(sizeof(JsonValue));
  if Type::is_float(type) {
    val.type = JsonValueType::Number;
    if type.size == 8 {
      val.data.number = *(object as f64*);
    } else {
      val.data.number = *(object as f32*);
    }
    return (JsonError::SUCCESS, val);
  } else if Type::is_integral(type) {
    val.type = JsonValueType::Number;
    if Type::is_signed(type) {
      switch type.size {
        8: { val.data.number = *(object as s64*); }
        4: { val.data.number = *(object as s32*); }
        2: { val.data.number = *(object as s16*); }
        1: { val.data.number = *(object as s8*); }
      }
    } else {
      switch type.size {
        8: { val.data.number = *(object as u64*); }
        4: { val.data.number = *(object as u32*); }
        2: { val.data.number = *(object as u16*); }
        1: { val.data.number = *(object as u8*); }
      }
    }
    return (JsonError::SUCCESS, val);
  } else if Type::is_bool(type) {
    val.type = JsonValueType::Boolean;
    val.data.boolean = *(object as bool*);
    return (JsonError::SUCCESS, val);
  }
  set_json_error(format("Unsupported type :: %", {any::new(&type.name)}))
  return (JsonError::ERROR, null);
}

json_serialize :: fn(object: void*, type: Type*) -> (s32, JsonValue*);

json_serialize_struct :: fn(object: void*, type: Type*) -> (s32, JsonValue*) {
  val : JsonValue* = malloc(sizeof(JsonValue));
  val.type = JsonValueType::Object;
  val.data.object = List![JsonKeyValuePair]{};
  for field in type.fields {
    field_kvp: JsonKeyValuePair;
    field_kvp.key = strdup(field.name);
    err, value := json_serialize(object as u8* + field.offset, field.type);
    if err {
      return (err, null);
    }
    field_kvp.value = value;
    val.data.object.push(field_kvp);
  }
  return (JsonError::SUCCESS, val);
}

json_serialize_array :: fn(object: void*, type: Type*) -> (s32, JsonValue*) {
  val : JsonValue* = malloc(sizeof(JsonValue));
  val.type = JsonValueType::Array;
  val.data.array = JsonArray{};
  for elem in type.elements(object as u8*) {
    err, elem_val := json_serialize(elem.data, elem.type);
    if err {
      return (err, null);
    }
    val.data.array.push(elem_val);
  }
  return (JsonError::SUCCESS, val);
}

json_serialize :: fn(object: void*, type: Type*) -> (s32, JsonValue*) {
  if Type::has_no_extension(type) {
    if type.id == #typeid(u8*) {
      val : JsonValue* = malloc(sizeof(JsonValue));
      val.type = JsonValueType::String;
      val.data._string = *(object as u8**);
      return (JsonError::SUCCESS, val);
    } else if Type::is_scalar(type) {
      return json_serialize_scalar(object, type);
    } else if Type::is_struct(type) {
      return json_serialize_struct(object, type);
    }
  } else if Type::is_array(type) {
    return json_serialize_array(object, type);
  }
  set_json_error(format("Unsupported type :: '%'", {any::new(&type.name)}));
  return (JsonError::ERROR, null);
}

json_deserialize :: fn(val: JsonValue*, object: void*, type: Type*) -> JsonError;

json_deserialize_struct :: fn(val: JsonValue*, object: void*, type: Type*) -> JsonError {
  for json_field in val.data.object {
    struct_field := Type::get_field(type, json_field.key);
    if !struct_field {
      set_json_error(format("Could not find field % in type %", {any::new(&json_field.key), any::new(&type.name)}))
      return JsonError::ERROR;
    }
    err := json_deserialize(json_field.value, object as u8* + struct_field.offset, struct_field.type);
    if err {
      return err;
    }
  }
  return {};
}

json_deserialize_array :: fn(val: JsonValue*, object: void*, type: Type*) -> JsonError {
  i := 0;
  ptr: void* = malloc(type.element_type.size);
  for elem in val.as_array() {
    memset(ptr, 0, type.element_type.size);
    err := json_deserialize(elem, ptr, type.element_type);
    if err {
      return err;
    }
    memcpy(object as u8* + (i * type.element_type.size), ptr, type.element_type.size);
    ++i;
  }
  free(ptr);
  return {};
}

json_deserialize_scalar :: fn(val: JsonValue*, object: void*, type: Type*) -> JsonError {
  if (!Type::has_no_extension(type)) {
    // strdup this literal because the error handler will free on overwrite.
    set_json_error(strdup("Unable to deserialize into pointer type with 'json_deserialize_scalar'"));
    return JsonError::ERROR;
  }
  if Type::is_bool(type) {
    *(object as bool*) = val.as_boolean();
  } else if (Type::is_float(type)) {
    if (type.size == 8) {
      *(object as f64*) = val.as_number();
    } else {
      *(object as f32*) = val.as_number() as f32;
    }
  } else if (Type::is_integral(type)) {
    is_signed := Type::is_signed(type);
    switch type.size {
        8: {
          if is_signed {
            *(object as s64*) = val.as_number();
          } else {
            *(object as u64*) = val.as_number() as u64;
          }
        }
        4: {
          if is_signed {
            *(object as s32*) = val.as_number() as s32;
          } else {
            *(object as u32*) = val.as_number() as u32;
          }
        }
        2: {
          if is_signed {
            *(object as s16*) = val.as_number() as s16;
          } else {
            *(object as u16*) = val.as_number() as u16;
          }
        }
        1: {
          if is_signed {
            *(object as s8*) = val.as_number() as s8;
          } else {
            *(object as u8*) = val.as_number() as u8;
          }
        }
    }
  } else if (Type::is_string(type)) {
    *(object as u8**) = val.as_string();
  } else {
    set_json_error(format("Unable to deserialize into type %", {any::new(&type.name)}));
    return JsonError::ERROR;
  }
  return {};
}

json_deserialize :: fn(val: JsonValue*, object: void*, type: Type*) -> JsonError {
  if val.is_string() {
    if type.id == #typeid(u8*) {
      *(object as u8**) = val.as_string();
      return {};
    } else {
      set_json_error(format("Type mismatch: u8* to %", {any::new(&type.name)}));
      return JsonError::ERROR;
    }
  } else if val.is_object() {
    if Type::is_struct(type) {
      return json_deserialize_struct(val, object, type);
    } else {
      set_json_error(format("Type mismatch: object to %", {any::new(&type.name)}));
      return JsonError::ERROR;
    }
  } else if val.is_array() {
    return json_deserialize_array(val, object, type);
  }
  return json_deserialize_scalar(val, object, type);
}
