#import core;
#import file;
#import reflection;

JsonTokenType :: enum {
  Invalid,
  True,
  False,
  Null,
  Eof,
  Colon,
  Number,
  String,
  LCurly,
  RCurly,
  LBracket,
  RBracket,
  Comma,
}

JsonToken :: struct {
  value : string;
  type : int = JsonTokenType.Invalid;
  line: int;
  column: int;
}

JsonLexer :: struct {
  tokenTypeNames : string[JsonTokenType.Comma + 1] = {
    "Invalid",
    "True",
    "False",
    "Null",
    "Eof",
    "Colon",
    "Number",
    "String",
    "LCurly",
    "RCurly",
    "LBracket",
    "RBracket",
    "Comma",
  };

  file: string;
  line_start: int;
  cur_line: int;
  position : int;
  length : int;
  input : string;
  lookahead_buffer : JsonToken[];

  err :: (token: JsonToken ,msg: string) {
    println($"[{file}:{token.line}:{token.column}] {msg}");
    exit(1);
  }

  #ctor :: (_file: c_string, _input: string) {
    file = _file;
    input = _input;
    length = input.length;
  }

  get_token :: () -> JsonToken {
    if lookahead_buffer.length != 0 {
      return ~lookahead_buffer;
    }
    token : JsonToken;
    token.column = position - line_start;
    token.line = cur_line + 1;
    if position >= length || input[position] == 0 {
      token.type = JsonTokenType.Eof;
      return token;
    }
    c : char = input[position];

    // whitespace
    while position < length {
      if c == '\n' || c == '\r' {
        line_start = position;
        cur_line++;
      } else if !isspace(c) {
        break;
      }
      position++;
      c = input[position];
    }
    token.column = position - line_start;
    token.line = cur_line + 1;

    if position >= length || input[position] == 0 {
      token.type = JsonTokenType.Eof;
      return token;
    }

    // comments
    if c == '/' {
      position++;
      if position >= length {
        err(token, "Unexpected character: {c}");
      }
      c = input[position];
      if c != '/' {
        err(token, "Unexpected character: {c}");
      }
      while c != '\n' && c != '\r' {
        position++;
        if position >= length || input[position] == 0 {
          token.type = JsonTokenType.Eof;
          return token;
        }
        c = input[position];
      }
      return get_token();
    }

    if isdigit(c) {
      // numbers
      len : int;
      start : int = position;
      while (isdigit(c) || c == '.') && position < length {
        len++;
        position++;
        c = input[position];
      }
      token.value = #make(string, &input[start], &input[start] + len);
      token.type = JsonTokenType.Number;
      return token;
      // operators
    } else if c == ':' {
      token.value = #make(string, ":");
      token.type = JsonTokenType.Colon;
      position++;
      return token;
    } else if c == '{' {
      token.value = #make(string, "{");
      token.type = JsonTokenType.LCurly;
      position++;
      return token;
    } else if c == '}' {
      token.value = #make(string, "}");
      token.type = JsonTokenType.RCurly;
      position++;
      return token;
    } else if c == '[' {
      token.value = #make(string, "[");
      token.type = JsonTokenType.LBracket;
      position++;
      return token;
    } else if c == ']' {
      token.value = #make(string, "]");
      token.type = JsonTokenType.RBracket;
      position++;
      return token;
    } else if c == ',' {
      token.value = #make(string, ",");
      token.type = JsonTokenType.Comma;
      position++;
      return token;
    } else if c == '\"' {
      position++;
      c = input[position];
      len : int;
      start : int = position;
      while c != '\"' && position < length {
        if c == '\n' || c == '\r' {
          line_start = position;
          cur_line++;
        }
        len++;
        position++;
        c = input[position];
      }
      position++;
      token.value = #make(string, &input[start], &input[start] + len);
      token.type = JsonTokenType.String;
      return token;
    } else if position + 4 <= length && strncmp(&input[position], "true", 4) == 0 {
      token.value = #make(string, "true");
      token.type = JsonTokenType.True;
      position += 4;
      return token;
    } else if position + 5 <= length && strncmp(&input[position], "false", 5) == 0 {
      token.value = #make(string, "false");
      token.type = JsonTokenType.False;
      position += 5;
      return token;
    } else if position + 4 <= length && strncmp(&input[position], "null", 4) == 0 {
      token.value = #make(string, "null");
      token.type = JsonTokenType.Null;
      position += 4;
      return token;
    } else {
      return token;
    }
  }

  peek_token :: () -> JsonToken {
    token : JsonToken = get_token();
    lookahead_buffer ~= token;
    return token;
  }

  expect_types :: (types: s32[]) -> JsonToken {
    token := this.get_token();
    types_string: string;
    i : int;
    for type in types {
      if token.type == type then return token;
      if i == 0 {
        types_string = #make(string, tokenTypeNames[type]);
        i++;
      } else {
        types_string = $"{types_string} | {tokenTypeNames[type]}"
      }
    }
    err(token, $"Expected {types_string}, got {tokenTypeNames[token.type]} :: {token.value}");
    return {#make(string, ""), JsonTokenType.Invalid};
  }

  expect_type :: (type: s32) -> JsonToken {
    return this.expect_types({type});
  }
}

JsonValueType :: enum {
  Invalid = -1,
  String,
  Number,
  Object,
  Array,
  Boolean,
  Null,
}

JsonKeyValuePair :: struct;
JsonValue :: struct;

// this causes a type error for some reason
// #alias JsonObject :: JsonKeyValuePair*[];
// #alias JsonArray :: JsonValue*[];

JsonKeyValuePair :: struct {
  key: string;
  value: JsonValue*;
}

JsonValueUnion :: union {
  number: float64;
  boolean: bool;
  _string: string;
  object: JsonKeyValuePair[];
  array: JsonValue*[];
  #dtor :: () {}
}

JsonValue :: struct {
  data: JsonValueUnion;
  type : int = JsonValueType.Invalid;
  #dtor :: () {
    if type == JsonValueType.Object {
      for kvp in data.object {
        delete(kvp.value);
      }
      destruct(data.object);
    } else if type == JsonValueType.Array {
      for val in data.array {
        delete(val);
      }
      destruct(data.array);
    } else if type == JsonValueType.String {
      destruct(data._string);
    }
  }
  to_string :: () -> string {
    if type == JsonValueType.Object {
      obj := data.object;
      len := obj.length;
      rBrack := "}";
      str := #make(string, "{");

      for i in 0..len {
        kvp := obj[i];
        if i == 0 {
          str = $"{str}{(char)34}{kvp.key}{(char)34}: {kvp.value}";
        } else {
          str = $"{str}, {(char)34}{kvp.key}{(char)34}: {kvp.value}";
        }
      }
      return $"{str}{rBrack}";
    } else if type == JsonValueType.Array {
      arr := data.array;
      len := arr.length;
      str := #make(string, "[");

      for i in 0..len {
        val := arr[i];
        if i == 0 {
          str = $"[{val}";
        } else {
          str = $"{str}, {val}";
        }
      }
      return $"{str}]";
    } else if type == JsonValueType.Number {
      return $"{data.number}";
    } else if type == JsonValueType.String {
      return $"{(char)34}{data._string}{(char)34}";
    } else if type == JsonValueType.Boolean {
      if data.boolean == true {
        return #make(string, "true");
      } else {
        return #make(string, "false");
      }
    } else if type == JsonValueType.Null {
      return #make(string, "null");
    } else {
      return #make(string);
    }
  }
  get :: (key: string) -> JsonValue* {
    if type != JsonValueType.Object {
      return null;
    }
    for kvp in data.object {
      if kvp.key == key {
        return kvp.value;
      }
    }
    return null;
  }
  get :: (index: int) -> JsonValue* {
    if type != JsonValueType.Array {
      return null;
    }
    arr := data.array;
    if index < 0 || index >= arr.length {
      return null;
    }
    return arr[index];
  }
  is_number :: () -> bool {
    return type == JsonValueType.Number;
  }

  is_string :: () -> bool {
    return type == JsonValueType.String;
  }

  is_object :: () -> bool {
    return type == JsonValueType.Object;
  }

  is_array :: () -> bool {
    return type == JsonValueType.Array;
  }

  is_boolean :: () -> bool {
    return type == JsonValueType.Boolean;
  }

  is_null :: () -> bool {
    return type == JsonValueType.Null;
  }

  as_number :: () -> float64 {
    if type == JsonValueType.Number {
      return data.number;
    }
    return 0.0; // or handle error
  }

  as_string :: () -> string {
    if type == JsonValueType.String {
      return data._string;
    }
    return ""; // or handle error
  }

  as_object :: () -> JsonKeyValuePair[] {
    if type == JsonValueType.Object {
      return data.object;
    }
    return {}; // or handle error
  }

  as_array :: () -> JsonValue*[] {
    if type == JsonValueType.Array {
      return data.array;
    }
    return {}; // or handle error
  }

  as_boolean :: () -> bool {
    if type == JsonValueType.Boolean {
      return data.boolean;
    }
    return false; // or handle error
  }
}

json_parse :: (lexer: JsonLexer*) -> JsonValue* {
  value := new JsonValue;
  token := lexer.expect_types({
    JsonTokenType.LBracket,
    JsonTokenType.LCurly,
    JsonTokenType.Number,
    JsonTokenType.String,
    JsonTokenType.True,
    JsonTokenType.False,
    JsonTokenType.Null,
  });
  if token.type == JsonTokenType.LBracket {
    value.type = JsonValueType.Array;
    value.data.array = JsonValue*[]{};
    if lexer.peek_token().type == JsonTokenType.RBracket {
      lexer.get_token();
      return value;
    }
    while token.type != JsonTokenType.RBracket {
      value.data.array ~= json_parse(lexer);
      token = lexer.expect_types({JsonTokenType.RBracket, JsonTokenType.Comma});
    }
  } else if token.type == JsonTokenType.LCurly {
    value.type = JsonValueType.Object;
    value.data.object = JsonKeyValuePair[]{};
    if lexer.peek_token().type == JsonTokenType.RCurly {
      lexer.get_token();
      return value;
    }
    while token.type != JsonTokenType.RCurly {
      key := lexer.expect_type(JsonTokenType.String);
      _ := lexer.expect_type(JsonTokenType.Colon);
      value.data.object ~= JsonKeyValuePair{key.value, json_parse(lexer)};
      token = lexer.expect_types({JsonTokenType.RCurly, JsonTokenType.Comma});
    }
  } else if token.type == JsonTokenType.Number {
    value.type = JsonValueType.Number;
    value.data.number = atof(token.value.data);
  } else if token.type == JsonTokenType.String {
    value.type = JsonValueType.String;
    value.data._string = token.value;
  } else if token.type == JsonTokenType.True {
    value.type = JsonValueType.Boolean;
    value.data.boolean = true;
  } else if token.type == JsonTokenType.False {
    value.type = JsonValueType.Boolean;
    value.data.boolean = false;
  } else if token.type == JsonTokenType.Null {
    value.type = JsonValueType.Null;
  }
  return value;
}

json_parse_file :: (file: c_string) -> JsonValue* {
  lexer := #make(JsonLexer, file, File::read_all(file));
  return json_parse(&lexer);
}

json_parse_string :: (str: c_string) -> JsonValue* {
  lexer := #make(JsonLexer, "string", str);
  return json_parse(&lexer);
}

json_serialize_scalar :: (object: void*, type: Type*) -> JsonValue* {
  val := new JsonValue{};
  if type_is_float(type) {
    val.type = JsonValueType.Number;
    if type.id == #typeid(float) {
      val.data.number = *(float*)object;
      return val;
    } else if type.id == #typeid(float64) {
      val.data.number = *(float64*)object;
      return val;
    } else if type.id == #typeid(float32) {
      val.data.number = *(float32*)object;
      return val;
    }
  } else if type_is_integral(type) {
    val.type = JsonValueType.Number;
    if type_is_signed(type) {
      if type.id == #typeid(char) {
        val.data.number = *(c_string)object;
        return val;
      } else if type.id == #typeid(s8) {
        val.data.number = *(s8*)object;
        return val;
      } else if type.id == #typeid(s16) {
        val.data.number = *(s16*)object;
        return val;
      } else if type.id == #typeid(s32) {
        val.data.number = *(s32*)object;
        return val;
      } else if type.id == #typeid(s64) {
        val.data.number = *(s64*)object;
        return val;
      } else if type.id == #typeid(int) {
        val.data.number = *(int*)object;
        return val;
      }
    } else {
      if type.id == #typeid(u8) {
        val.data.number = *(u8*)object;
        return val;
      } else if type.id == #typeid(u16) {
        val.data.number = *(u16*)object;
        return val;
      } else if type.id == #typeid(u32) {
        val.data.number = *(u32*)object;
        return val;
      } else if type.id == #typeid(u64) {
        val.data.number = *(u64*)object;
        return val;
      }
    }
  } else if type_is_bool(type) {
    val.type = JsonValueType.Boolean;
    val.data.boolean = *(bool*)object;
  }
  return null;
}

json_serialize :: (object: void*, type: Type*) -> JsonValue*;

json_serialize_struct :: (object: void*, type: Type*) -> JsonValue* {
  val := new JsonValue{};
  val.type = JsonValueType.Object;
  val.data.object = JsonKeyValuePair[]{};
  for field in type.fields {
    field_kvp: JsonKeyValuePair;
    field_kvp.key = field.name;
    field_kvp.value = json_serialize((void*)field.get(object), field.type);
    val.data.object ~= field_kvp;
  }
  return val;
}

json_serialize_array :: (object: void*, type: Type*) -> JsonValue* {
  val := new JsonValue{};
  val.type = JsonValueType.Array;
  val.data.array = JsonValue*[]{};
  for elem in type.elements((c_string)object) {
    val.data.array ~= json_serialize(elem.data, elem.type);
  }
  return val;
}

json_serialize :: (object: void*, type: Type*) -> JsonValue* {
  if type_has_no_extension(type) {
    if type.id == #typeid(string) {
      val := new JsonValue{};
      val.type = JsonValueType.String;
      val.data._string = *(string*)object;
      return val;
    } else if type_is_scalar(type) {
      return json_serialize_scalar(object, type);
    } else if type_is_struct(type) {
      return json_serialize_struct(object, type);
    }
  } else if type_is_array(type) || type_is_fixed_array(type) {
    return json_serialize_array(object, type);
  }
  return null;
}

JsonError :: struct {
  has_value : bool = false;
  message: string;
}

// json_serialize_scalar :: (val: JsonValue*, object: void*, type: Type*) -> JsonError {
//   val := new JsonValue{};
//   if type_is_float(type) {
//     val.type = JsonValueType.Number;
//     if type.id == #typeid(float) {
//       val.data.number = *(float*)object;
//       return val;
//     } else if type.id == #typeid(float64) {
//       val.data.number = *(float64*)object;
//       return val;
//     } else if type.id == #typeid(float32) {
//       val.data.number = *(float32*)object;
//       return val;
//     }
//   } else if type_is_integral(type) {
//     val.type = JsonValueType.Number;
//     if type_is_signed(type) {
//       if type.id == #typeid(char) {
//         val.data.number = *(c_string)object;
//         return val;
//       } else if type.id == #typeid(s8) {
//         val.data.number = *(s8*)object;
//         return val;
//       } else if type.id == #typeid(s16) {
//         val.data.number = *(s16*)object;
//         return val;
//       } else if type.id == #typeid(s32) {
//         val.data.number = *(s32*)object;
//         return val;
//       } else if type.id == #typeid(s64) {
//         val.data.number = *(s64*)object;
//         return val;
//       } else if type.id == #typeid(int) {
//         val.data.number = *(int*)object;
//         return val;
//       }
//     } else {
//       if type.id == #typeid(u8) {
//         val.data.number = *(u8*)object;
//         return val;
//       } else if type.id == #typeid(u16) {
//         val.data.number = *(u16*)object;
//         return val;
//       } else if type.id == #typeid(u32) {
//         val.data.number = *(u32*)object;
//         return val;
//       } else if type.id == #typeid(u64) {
//         val.data.number = *(u64*)object;
//         return val;
//       }
//     }
//   } else if type_is_bool(type) {
//     val.type = JsonValueType.Boolean;
//     val.data.boolean = *(bool*)object;
//   }
//   return null;
// }

json_deserialize :: (val: JsonValue*, object: void*, type: Type*) -> JsonError;

// json_deserialize_struct :: (val: JsonValue*, object: void*, type: Type*) -> JsonError {
//   for json_field in val.data.object {
//     struct_field := type_get_field(type, json_field.key);
//     if !struct_field {
//       return {true, $"Could not find field {json_field.key} in type {type.name}"};
//     }
//     err := json_deserialize(json_field, (void*)struct_field.get(object), struct_field.type);
//     if err.has_value {
//       return err;
//     }
//   }
//   return {};
// }

// json_deserialize_array :: (val: JsonValue*, object: void*, type: Type*) -> JsonError {
//   for elem in val.as_array() {
//     err := json_deserialize(elem.data, type.);
//     if err.has_value {
//       return err;
//     }
//   }
//   return {};
// }

// json_deserialize :: (val: JsonValue*, object: void*, type: Type*) -> JsonError {
//   if val.is_string() {
//     if type.id == #typeid(string) {
//       *(string*)object = val.as_string();
//       return {};
//     } else {
//       return {true, $"Type mismatch: string to {type.name}"};
//     }
//   } else if val.is_object() {
//     if type_is_struct(type) {
//       return json_deserialize_struct(val, object, type);
//     } else {
//       return {true, $"Type mismatch: object to {type.name}"};
//     }
//   } else if val.is_array() {
//     return {true, $"Array deserialization not yet suported"};
//   }
//   return json_deserialize_scalar(val, object, type);
// }
