#include "typedef.ela"
#include "interfaces.ela";
#include "numeric.ela"; // impls for numeric types.
#include "range.ela";
#include "libc.ela";
#include "memory.ela";
#include "list.ela";
#include "slice.ela";
#include "str.ela";
#include "String.ela";
#include "reflection.ela";


assert :: fn(message: str, condition: bool) {
  if !condition {
    printf("assertion failed: %s\n"c, message.data);
    exit(1);
  }
}

assert_eq :: fn![T](message: str, a: T, b: T) where T is Is_Numeric | Eq {
  if a != b {
    printf("assertion failed: %s\n"c, message.data);
    exit(1);
  }
}

assert_neq :: fn![T](message: str, a: T, b: T) where T is Is_Numeric | Eq {
  if a == b {
    printf("assertion failed: %s\n"c, message.data);
    exit(1);
  }
}

#alias Panic_Handler :: fn *(str);

panic_handler: Panic_Handler;

set_panic_handler :: fn(handler: Panic_Handler) {
  panic_handler = handler;
}

panic :: fn(msg: str) {
  if !panic_handler {
    #ifndef FREESTANDING {
      panic_handler = fn(msg: str) {
        printf("panic(): %s\n"c, msg.data);
        exit(1);
      };
    } else {
      panic_handler = fn(msg: str) {
        // idk, segfault on panic?
        n : s32 * = null;
        *n = 10;
      }
    }
  }
  panic_handler(msg);
}

#ifdef FREESTANDING  {
  Env :: struct {
    m_args: str*,
    length: u64,
  };
  impl Env {
    current :: fn() -> #self* {
      #static self: #self;
      return &self;
    }
    args :: fn(self*) -> (str*, u64) {
      return (self.m_args, self.length);
    }
    initialize :: fn(argc: s32, argv: str*) {
      self := #self::current();
      self.m_args = argv;
      self.length = argc;
    }
  }
} else {
  Env :: struct {
    m_args: str[],
  };
  impl Env {
    current :: fn() -> #self* {
      #static self: #self;
      return &self;
    }
    args :: fn() -> str[] {
      return #self::current().m_args.clone();
    }
    initialize :: fn(argc: s32, argv: str*) {
      self := #self::current();
      for i in 0..argc {
        self.m_args.push(argv[i]);
      }
    }
  }
}

impl As_Char_Slice for u32 {
  as_char_slice :: fn(self) -> Slice![u32] {
    #static chars : char[2] = {
      '\0', '\0'
    };
    chars[0] = self;
    return {
      data: chars,
      length: 1,
    }
  }
}

impl As_Byte_Slice for u32 {
  as_byte_slice :: fn(self) -> Slice![u8] {
    #static chars : u8[2] = {
      '\0', '\0'
    };
    chars[0] = self;
    return {
      data: chars,
      length: 1,
    }
  }
}

impl![_Ok, _Err] Result![_Ok, _Err] {
  Ok :: fn(v: _Ok) -> #self {
    return {
      index: RESULT_IS_OK,
      ok: v,
    };
  }
  Err :: fn(v: _Err) -> #self {
    return {
      index: RESULT_IS_ERR,
      err: v
    }
  }
  unwrap :: fn(self) -> _Ok {
    if self.index == RESULT_IS_ERR {
      panic("called 'unwrap' on an Err result");
    }
    return self.ok;
  }
}

impl![_Some] Option![_Some] {
  unwrap :: fn(self) -> _Some {
    if self.is_some {
      return s;
    } else {
      panic("unwrapped a 'none' option");
    }
  }
  Some :: fn(v: _Some) -> #self {
    return {
      s: v,
      is_some: true
    };
  }
  None :: fn() -> #self {
    return {
      is_some: false
    }
  }
}
