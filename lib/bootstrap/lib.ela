#include "typedef.ela"
#include "interfaces.ela";
#include "libc.ela";
#include "range.ela";
#include "memory.ela";
#include "list.ela";
#include "string.ela";
#include "reflection.ela";
#include "slice.ela";

#include "numeric.ela"; // impls for numeric types.

assert :: fn(message: str, condition: bool) {
  if !condition {
    printf("assertion failed: %s\n"c, message.data);
    exit(1);
  }
}

assert_eq :: fn![T](message: str, a: T, b: T) where T is Is_Numeric | SelfEq {
  if a != b {
    printf("assertion failed: %s\n"c, message.data);
    exit(1);
  }
}

assert_neq :: fn![T](message: str, a: T, b: T) where T is Is_Numeric | SelfEq {
  if a == b {
    printf("assertion failed: %s\n"c, message.data);
    exit(1);
  }
}

#alias Panic_Handler :: fn *(str);

panic_handler: Panic_Handler;

set_panic_handler :: fn(handler: Panic_Handler) {
  panic_handler = handler;
}

panic :: fn(msg: str) {
  if !panic_handler {
    #ifndef FREESTANDING {
      panic_handler = fn(msg: str) {
        printf("panic(): %s\n"c, msg.data);
        exit(1);
      };
    } else {
      panic_handler = fn(msg: str) {
        // idk, segfault on panic?
        n : s32 * = null;
        *n = 10;
      }
    }
  }
  panic_handler(msg);
}

#ifdef FREESTANDING  {
  Env :: struct {
    m_args: str*,
    length: u64,
  };
  impl Env {
    current :: fn() -> #self* {
      #static self: #self;
      return &self;
    }
    args :: fn(self*) -> (str*, u64) {
      return (self.m_args, self.length);
    }
    initialize :: fn(argc: s32, argv: str*) {
      self := #self::current();
      self.m_args = argv;
      self.length = argc;
    }
  }
} else {
  Env :: struct {
    m_args: str[],
  };
  impl Env {
    current :: fn() -> #self* {
      #static self: #self;
      return &self;
    }
    args :: fn() -> str[] {
      return #self::current().m_args.clone();
    }
    initialize :: fn(argc: s32, argv: str*) {
      self := #self::current();
      for i in 0..argc {
        self.m_args.push(argv[i]);
      }
    }
  }
}

impl As_Char_Slice![u32] for u32 {
  as_char_slice :: fn(self) -> Slice![u32] {
    // Since we have to null terminate the slice, which we shouldn't,
    // we'd have to do this little static hack.

    // This blatantly has massive problems when you deal with more than one slice at a time
    // but this is just a hack.
    #static slice_data: u32[2] = {'\0', '\0'};
    slice_data[0] = self;

    // ! See repro 84.ela

    return {
      data: &self,
      length: 1,
    }
  }
}
