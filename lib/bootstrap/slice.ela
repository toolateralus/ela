
impl![T] Clone for Slice![T] {
  clone :: fn(self*) -> #self {
    data : T* = malloc(sizeof(T) * self.length);
    memcpy(data, self.data, self.length * sizeof(T));
    return {
      data: data,
      length: self.length,
    };
  }
}

impl![T] Slice![T] {
  subscript :: fn(self*, idx: u32) -> T {
    return self.data[idx];
  }
  slice :: fn(self, range: Range) -> Slice![T] {
    length := range.end - range.begin;
    
    if length < 0 || length > self.length then return {};
    
    return {
      data: self.data + range.begin,
      length: length,
    }
  }
}
