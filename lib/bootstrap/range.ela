
// TODO: add reverse ranges?

Range_Base :: struct![Value_Type] where Value_Type is Eq | Is_Numeric {
  begin: Value_Type,
  end:   Value_Type,
}

#alias Range_s8 :: Range_Base![s8];
#alias Range_s16 :: Range_Base![s16];
#alias Range_s32 :: Range_Base![s32];
#alias Range_s64 :: Range_Base![s64];

#alias Range_u8 :: Range_Base![u8];
#alias Range_u16 :: Range_Base![u16];
#alias Range_u32 :: Range_Base![u32];
#alias Range_u64 :: Range_Base![u64];

#alias Range :: Range_s32;

impl![T] Range_Base![T] {
  contains :: fn(self, value: T) -> bool {
    return self.begin <= value && self.end >= value;
  }
}

Range_Enumerator :: struct![Value_Type] where Value_Type is Eq | Is_Numeric {
  begin: Value_Type,
  end:   Value_Type,
  idx:   Value_Type,
}

impl![Value_Type] Enumerator![Value_Type] for Range_Enumerator![Value_Type]  {
  current   :: fn(self) -> Value_Type {
    return self.idx;
  }
  next      :: fn(self*) {
    self.idx++;
  };
  done      :: fn(self) -> bool {
    return self.idx >= self.end;
  }
}

impl![Value_Type] Enumerable![Range_Enumerator![Value_Type], Value_Type] for Range_Base![Value_Type]  {
  enumerator :: fn(self*) -> Range_Enumerator![Value_Type] {
    return {
      begin: self.begin,
      end:   self.end,
      idx:          0,
    };
  }
}
