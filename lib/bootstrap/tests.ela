// TODO:
// We need to have a way for #import'ed files to purge out their #test functions, and any code behind an #ifdef TESTING {...}
// Right now, if you include a library, you inherit all of it's testing, which is garbage. 
#test test_List_push_at :: fn() {
  array : List![s64];

  {
    defer array.deinit();
    for i in 0..100 {
      array.push(i);
    }
    assert("Array push failed to meet expected length", array.length == 100);
    for i in 0..100 {
      assert("array.at(i) != i", array.at(i) == i);
    }
  }

  assert("List failed to deinit", array.data == null && array.length == 0);  
}

#test test_List_pop :: fn() {
  array : List![s64];

  {
    defer array.deinit();
    for i in 0..100 {
      array.push(i);
    }
    for i in 0..100 {
      value := array.pop();
      assert("array.pop() != 99 - i", value == 99 - i);
    }
    assert("Array pop failed to meet expected length", array.length == 0);
  }

  assert("List failed to deinit", array.data == null && array.length == 0);
}

#test test_List_resize :: fn() {
  array : List![s64];

  {
    defer array.deinit();
    array.resize(2);
    assert("Array resize failed to set capacity", array.capacity == 2);
    for i in 0..2 {
      array.push(i);
    }
    assert("Array resize failed to meet expected length", array.length == 2);
  }

  assert("List failed to deinit", array.data == null && array.length == 0);
}

#test test_List_shrink :: fn() {
  array : List![s64];

  {
    defer array.deinit();
    for i in 0..100 {
      array.push(i);
    }
    assert("Array push failed to meet expected length", array.length == 100);

    array.resize(50);
    assert("Array shrink failed to meet expected length", array.length == 50);
    assert("Array shrink failed to set capacity", array.capacity == 50);

    for i in 0..50 {
      assert("array.at(i) != i", array.at(i) == i);
    }
  }

  assert("List failed to deinit", array.data == null && array.length == 0);
}

#test test_List_clone :: fn() {
  array : List![s64];
  clone : List![s64];
  {
    defer array.deinit();
    for i in 0..100 {
      array.push(i);
    }

    clone = array.clone();
    defer clone.deinit();


    assert("Array clone failed to meet expected length", clone.length == 100);
    for i in 0..100 {
      assert("lone.at(i) != i", clone.at(i) == i);
    }

    // Modify the original array and check if the clone does not reflect the changes
    array.push(100);
    assert("Clone should not reflect changes in the original array", clone.length == 100);
    assert("lone.at(100) should not exist", clone.length == 100);
  }

  assert("List failed to deinit", array.data == null && array.length == 0);
  assert("Clone List failed to deinit", clone.data == null && clone.length == 0);
}

#test test_List_view :: fn() {
  array : List![s64];
  view  : List![s64];
  {
    defer array.deinit();
    for i in 0..100 {
      array.push(i);
    }

    // Take a view of the array
    view = array;

    assert("Array view failed to meet expected length", view.length == 100);
    for i in 0..100 {
      assert("view.at(i) != i", view.at(i) == i);
    }

    array.push(100);
    assert("View should reflect changes in the original array", view.length == 100);
    assert("view.at(100) != 100", view.at(100) == 100);
  }

  assert("List failed to deinit", array.data == null && array.length == 0);
}

#test test_List_for_loop :: fn() {
  array : List![s64];

  // ! BUG: 
  // ! We have to call these explicitly before using a for loop, 
  // ! Because otherwise the generic impl never gets instantiated.
  iter := array.iter();
  iter.current();

  {
    defer array.deinit();
    for i in 0..100 {
      array.push(i);
    }

    // Test 'for v in array'
    idx := 0;
    for v in array {
      assert("for v in array failed", v == idx);
      idx++;
    }

    assert("for v in array failed to iterate correctly", idx == 100);

    // Test 'for *v in array'
    idx = 0;
    for *v in array {
      assert("for *v in array failed", *v == idx);
      idx++;
    }
    assert("for *v in array failed to iterate correctly", idx == 100);
  }

  assert("List failed to deinit", array.data == null && array.length == 0);
}
