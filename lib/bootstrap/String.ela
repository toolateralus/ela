
#ifndef FREESTANDING {
  
  impl String {
    replace :: fn(self*, old: u8*, replacement: u8*) -> str {
      old_len := strlen(old);
      new_len := strlen(replacement);
      result : str = {};
      for i in 0..self.length {
        if strncmp(self.data + i, old, old_len) == 0 {
          result.data = realloc(result.data, result.length + new_len + 1);
          memcpy(result.data + result.length, replacement, new_len);
          result.length += new_len;
          i += old_len - 1;
        } else {
          result.data = realloc(result.data, result.length + 1 + 1);
          result.data[result.length] = self.data[i];
          result.length++;
        }
      }
      result.data[result.length] = 0;
      return result;
    }
    
    from :: fn(data: u8*) -> #self{
      if !data then return {};
      len := strlen(data);
      return {
        data: strdup(data),
        capacity: len,
        length: len,
      };
    }
    
    from_ptr :: fn(begin: u8*, end: u8*) -> #self {
      self: #self;
      self.length = end - begin;
      self.capacity = self.length;
      self.data = malloc(sizeof(u8) * self.length + 1);
      memcpy(self.data, begin, self.length);
      self.data[self.length] = 0;
      return self;
    }
  }

  /* 
    These are the 'List' like functions for dynamic strings.
  */
  impl String {
    resize :: fn(self*, new_size: u64) {
      if new_size < self.length then self.length = new_size;
      self.capacity = new_size;
      self.data = realloc(self.data, new_size * sizeof(u8) + 1);
      self.data[self.length] = 0; // Maintain null terminator
    }
    
    push :: fn(self*, ch: u8) {
      if self.capacity == 0 then self.capacity = 256 / 3;
      if self.length + 1 >= self.capacity {
      self.resize(self.capacity * 3 + 1);
      }
      self.data[self.length] = ch;
      self.length++;
      self.data[self.length] = '\0';
    }

    pop :: fn(self*) -> u8 {
      if self.length == 0 then return '\0' as u8;
      ch := self.data[--self.length];
      self.data[self.length] = '\0';
      return ch;
    }

    pop_front :: fn(self*) -> u8 {
      if self.length == 0 then return '\0' as u8;
      ch := self.data[0];
      memmove(self.data, self.data + 1, self.length - 1);
      self.length--;
      self.data[self.length] = '\0';
      return ch;
    }

    push_front :: fn(self*, ch: u8) {
      if self.capacity == 0 then self.capacity = 256 / 3;
      if self.length + 1 >= self.capacity {
      self.resize(self.capacity * 3);
      }
      memmove(self.data + 1, self.data, self.length);
      self.data[0] = ch;
      self.length++;
      self.data[self.length] = '\0'; // Maintain null terminator
    }
  }

  impl Deinit for String {
    deinit :: fn(self*) {
      free(self.data);
      self.length = 0;
    }
  }
}

impl String {
  // THIS IS JUST A VIEW OF THE CURRENT STRING, PERFORM A CLONE ON THE STR TO GET AN OWNED COPY.
  as_str :: fn(self) -> str {
    return {
      data: self.data,
      length: self.length,
    }
  }

  empty :: fn() -> #self {
    return {};
  }
  
  subscript :: fn(self*, idx: s64) -> u8 {
    return self.data[idx];
  }
  
  eq :: fn(self*, other: #self) -> bool {
    if self.length != other.length then return false;
    for idx in 0..self.length {
      if (*self)[idx] != other[idx] then return false;
    }
    return true;
  }
  
  starts_with :: fn(self*, prefix: u8*) -> bool {
    prefix_len := strlen(prefix);
    if self.length < prefix_len then return false;
    for i in 0..prefix_len {
      if self.data[i] != prefix[i] then return false;
    }
    return true;
  }
  
  ends_with :: fn(self*, suffix: u8*) -> bool {
    suffix_len := strlen(suffix);
    if self.length < suffix_len then return false;
    for i in 0..suffix_len {
      if self.data[self.length - suffix_len + i] != suffix[i] then return false;
    }
    return true;
  }

  front :: fn(self*) -> u8 {
    if self.length == 0 then return '\0' as u8;
    return self.data[0];
  }

  back :: fn(self*) -> u8 {
    if self.length == 0 then return '\0' as u8;
    return self.data[self.length - 1];
  }
}

impl Iterable![u8] for String { 
  iter :: fn(self*) -> Iter![u8] {
    return {
      ptr: self.data,
      end: self.data + self.length,
    }
  }
}

impl As_Char_Slice for String {
  as_char_slice :: fn(self) -> Slice![u32] {
    return {
      data: self.data,
      length: self.length / 4, // we do this because we're reinterpreting a u8* as a u32* which effectively packs it and quarters the "length"
    }
  }
}

impl As_Byte_Slice for String {
  as_byte_slice :: fn(self) -> Slice![u8] {
    return {
      data: self.data,
      length: self.length
    }
  }
}
