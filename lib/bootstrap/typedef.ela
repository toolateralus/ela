
#alias char :: u32; // this represents a single UTF-8 scalar.

// This is a string literal type. "..." will return this type. 
// It's meant to be an immutable constant string.

// to get a 'u8*' literal, use `"..."c` the little `c` postfix.                              ^
str :: struct {
  data:    u8*,
  length:  u64,
}

// This is basically just a u8[]
// but it has some particularly special methods for dealing with strings,
// so it gets it's own distinct type.
String :: struct {
  data: u8*,
  length: u64,
  capacity: u64,
}

// This is what is produced when you do 
// .[0, 1, 2, 3] (or {0, 1, 2, 3})
// it is stack allocated and does not need to be freed, nor
// should it ever be held on to.
Init_List :: struct![Value_Type] {
  data:   Value_Type*,
  length: u64,
}

// A collection of items.
List :: struct![Value_Type] {
  data:     Value_Type*,
  length:   u64,
  capacity: u64,
}

Type :: struct;

// A semi-type-erased pointer that carries the RTTI (Runtime type information)
// with it for a way to do "duck typing" in a way.
any :: struct {
  ptr: void*,
  type: Type*
};

// A non-owning fat pointer. This should just be a view into a pointer, that tracks length.
// very useful for efficiently passing arrays of data to functions for quick usage with a known lifetime,
// iterating over subarrays, etc.
Slice :: struct![Value_Type] {
  data: Value_Type*,
  length: u64,
}


RESULT_IS_ERR : u8 =  0;
RESULT_IS_OK  : u8 =  1;

Result :: struct![_Ok, _Err] {
  index: u8,
  #anon :: union {
    err:  _Err,
    ok:   _Ok,
  },
}

Option :: struct![_Some] {
  #anon :: union {
    s: _Some
  },
  is_some: bool,
}
