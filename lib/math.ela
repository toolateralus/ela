#foreign rand :: fn() -> s32;
#foreign srand :: fn(seed: u32);
#foreign fmod :: fn(l: f32, r: f32) -> f32;
#foreign fabs :: fn(f: f64) -> f64;
#foreign isinf :: fn(arg: f64) -> bool;
#foreign isnan :: fn(arg: f64) -> bool;
#foreign pow :: fn(base: f64, exponent: f64) -> f64;
#foreign sqrt :: fn(f: f64) -> f64;
#foreign cos :: fn(f: f64) -> f64;
#foreign sin :: fn(f: f64) -> f64;


// We use this struct for namespacing.
Random :: struct;

impl Random {
  next :: fn(max: f32) -> f32 {
    return (rand() as f32) / (2147483647 as f32) * max; // ! HACK:: replace this magic number with Random::Max when we fix that problen.
  }
}

abs :: fn![T](v: T) -> T {
  if v < 0 {
    return -v;
  }
  return v;
}

min :: fn![T](a: T, b: T) -> T {
  if a > b then return b;
  return a;
}

max :: fn![T](a: T, b: T) -> T {
  if a > b then return a;
  return b;
}

clamp :: fn(v: f64, min, max) -> f64 {
  if v < min then return min;
  if v > max then return max;
  return v;
}

lerp :: fn(a: f32, b, t) -> f32 {
  return (a * (1.0 - t)) + (b * t);
}
