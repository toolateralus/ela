
UTF8_ERROR : u32 = 0xFFFD;

/*
  Copyright 2024 Kang-Che Sung

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
/* SPDX-License-Identifier: MIT */

// returns a tuple representing:
// .0: a u32 code point,
// .1: the 'advance' which is the number of bytes this codepoint consumed.
utf8_to_code_point :: fn(sequence: Slice![u8]) -> (u32, s8) {
  if sequence.length == 0
    then return (UTF8_ERROR, 1);

  if sequence[0] <= 0x7F
    then return (sequence[0] as u32, 1);

  /* Multibyte sequence. We assume valid sequences appear more
      frequently than invalid ones. */
  max_length : u32;
  min_code_point: u32;
  code_point: u32;

  byte_0 := sequence[0];

  if (byte_0 & 0xF0) < 0xE0 {
    /* First byte in the range [0x80, 0xBF] is covered here.
        It wraps around to an invalid code point. */
    max_length = 2;
    min_code_point = 0x80;
    code_point = (byte_0 - 0xC0) as u32;
  } else if ((byte_0 & 0xF0) == 0xE0) {
    max_length = 3;
    min_code_point = 0x0800;
    code_point = (byte_0 - 0xE0) as u32;
  } else {
    max_length = 4;
    min_code_point = 0x10000;
    code_point = (byte_0 - 0xF0) as u32;
  }

  index := 1; // we start 1 byte in front of the byte we already decoded above.
  while index < sequence.length {
    index++;
    byte := sequence[index];

    max_length -= 1;

    if max_length == 0
      then break;

    offset : u32 = byte - 0x80;

    /*
      (*sequence) points to the byte where the next sequence may begin.
      The next sequence may be valid or invalid.
    */
    if offset > 0x3F {
      return (UTF8_ERROR, 1);
    }
    code_point = (code_point << 6) + offset;
  }

  /* Overlong sequence */
  if code_point < min_code_point {
    return (UTF8_ERROR, 1);
  }

  /*
    UTF-16 surrogates are invalid in UTF-8.
    They are used in CESU-8, which is a different encoding.
  */
  if code_point >= 0xD800 && code_point <= 0xDFFF {
    return (UTF8_ERROR, 1);
  }

  /*
    Any value outside the [0x00, 0x10FFFF] range indicates an invalid sequence.
  */
  if code_point > 0x10FFFF {
    return (UTF8_ERROR, 1);
  }

  return (code_point, index as s8);
}

utf8_decode :: fn![T](data: T) -> u32[] where T is As_Char_Slice {
  slice := data.as_byte_slice();
  output: u32[];
  index := 0;
  while index < slice.length {
    subslice := slice.slice(index..index+4);
    ch, advance := utf8_to_code_point(subslice);
    index += advance;
    output.push(ch);
  }
  return output;
}

utf8_encode :: fn(code_point: u32) -> u8[] {
  output: u8[];
  if code_point <= 0x7F {
    output.push(code_point as u8);
    return output;
  } else if code_point <= 0x7FF {
    output.push((0xC0 | (code_point >> 6)) as u8);
    output.push((0x80 | (code_point & 0x3F)) as u8);
    return output;
  } else if code_point <= 0xFFFF {
    output.push((0xE0 | (code_point >> 12)) as u8);
    output.push((0x80 | ((code_point >> 6) & 0x3F)) as u8);
    output.push((0x80 | (code_point & 0x3F)) as u8);
    return output;
  } else if code_point <= 0x10FFFF {
    output.push((0xF0 | (code_point >> 18)) as u8);
    output.push((0x80 | ((code_point >> 12) & 0x3F)) as u8);
    output.push((0x80 | ((code_point >> 6) & 0x3F)) as u8);
    output.push((0x80 | (code_point & 0x3F)) as u8);
    return output;
  } else {
    output.push(UTF8_ERROR as u8); // UTF8_ERROR
    return output;
  }
}

#region UTILITIES {
  utf8_is_cyrillic_alpha :: fn(ch: char) -> bool {
    return (0x0400 <= ch && ch <= 0x04FF) || (0x0500 <= ch && ch <= 0x052F);
  }

  utf8_is_chinese_alpha :: fn(ch: char) -> bool {
    return (0x4E00 <= ch && ch <= 0x9FFF) || (0x3400 <= ch && ch <= 0x4DBF);
  }

  utf8_is_korean_alpha :: fn(ch: char) -> bool {
    return (0xAC00 <= ch && ch <= 0xD7AF) || (0x1100 <= ch && ch <= 0x11FF);
  }

  utf8_is_japanese_alpha :: fn(ch: char) -> bool {
    return (0x3040 <= ch && ch <= 0x309F) || (0x30A0 <= ch && ch <= 0x30FF) || (0x4E00 <= ch && ch <= 0x9FFF);
  }

  utf8_is_latin_alpha :: fn(ch: char) -> bool {
    return (0x0041 <= ch && ch <= 0x005A) || (0x0061 <= ch && ch <= 0x007A);
  }

  utf8_is_alpha :: fn(ch: char) -> bool {
    return utf8_is_cyrillic_alpha(ch) ||
          utf8_is_chinese_alpha(ch)  ||
          utf8_is_korean_alpha(ch)   ||
          utf8_is_japanese_alpha(ch) ||
          utf8_is_latin_alpha(ch);
  }
}

#import builder;

// TODO: expand this, add support for other stuff.
// This is only for numerical types, bools, and strings / any pointer.
// We kinda need generic specialization to do more with this.
to_string :: fn![T](value: T) -> String {
  buffer: u8[64];
  type := #type(T);
  format : str;

  if type.is_bool() {
    if value {
      return "true".as_string();
    } else {
      return "false".as_string();
    }
  }

  if type.is_enum() {
    for field in type.fields {
      if value == field.enum_value {
        return String::from(field.name);
      }
    }
  }


  if type == #type(u8) {
    format = "%c";
  } else if type.is_integral() {
    format = "%lld";
  } else if type.is_float() {
    format = "%.2lf";               //  * using to_string has a trade off of less control for slight convenience. Oh well! use snprintf instead.
  } else if type.is_string() {
    format = "%s";
  } else if type.is_pointer() {
    format = "%p";
  } else {
    format = "(unsupported type)";  // * do we throw an error here? format = null?
  }

  snprintf(buffer, 64 * sizeof(u8), format.data, value);
  return String::from(strdup(buffer));
}

format :: fn(fmt : str, list: Init_List![any]) -> String {
  if fmt.length == 0 {
    return {};
  }

  builder: String_Builder;
  value_index := 0;

  while *fmt.data {
    if (*fmt.data) == '\\' && *(fmt.data + 1) == '%' {
      builder.append![u32]('%');
      fmt.data += 2;
      continue;
    }

    if (*fmt.data) == '%' {
      value := list.data[value_index];
      if value.ptr == null {
        builder.append("null");
      } else if value.type == #type(u8*) {
        builder.append(String::from(value.unwrap![u8*]()));
      } else if value.type.is_pointer() {
        builder.append_then_free(to_string(value.ptr));
      } else if value.type.is_enum() {
        builder.append_then_free(to_string(value.unwrap![s32]()));
      } else {
        switch value.type {
          #type(u8):      { builder.append_then_free(to_string(value.unwrap![u8]()));  }
          #type(u16):     { builder.append_then_free(to_string(value.unwrap![u16]())); }
          #type(u32):     { builder.append_then_free(to_string(value.unwrap![u32]())); }
          #type(u64):     { builder.append_then_free(to_string(value.unwrap![u64]())); }

          #type(s8):      { builder.append_then_free(to_string(value.unwrap![s8]()));  }
          #type(s16):     { builder.append_then_free(to_string(value.unwrap![s16]())); }
          #type(s32):     { builder.append_then_free(to_string(value.unwrap![s32]())); }
          #type(s64):     { builder.append_then_free(to_string(value.unwrap![s64]())); }

          #type(s32):     { builder.append_then_free(to_string(value.unwrap![s32]())); }

          #type(f32):     { builder.append_then_free(to_string(value.unwrap![f32]()));    }
          #type(f32):     { builder.append_then_free(to_string(value.unwrap![f32]()));  }
          #type(f64):     { builder.append_then_free(to_string(value.unwrap![f64]()));  }

          #type(bool):    { builder.append_then_free(to_string(value.unwrap![bool]())); }

          #type(String):  {
            string := *(value.ptr as String*);
            // printf("%s\n"c, string.data);
            builder.append(string);
          }
          #type(str):     { builder.append_then_free((*(value.ptr as str*)).as_string());   }
        }
      }
      value_index++;
    } else {
      builder.append((*fmt.data) as u32);
    }
    fmt.data++;
  }

  return builder.get_string();
}

#static print :: fn![T](message: T) {
  formatted := format("%", {any::new(&message)});
  printf("%s"c, formatted.data);
  formatted.deinit();
}

#static println :: fn![T](message: T) {
  formatted := format("%", {any::new(&message)});
  printf("%s\n"c, formatted.data);
  formatted.deinit();
}

// format, print, and deinit a String via `format` function.
#static printlnf :: fn(fmt: str, list: Init_List![any]) {
  formatted := format(fmt, list);
  printf("%s\n"c, formatted.data);
  formatted.deinit();
}



UTF8_Enumerator :: struct {
  slice: Slice![u8],
  position: u32,
  current_char: u32,
}

impl Enumerator![u32] for UTF8_Enumerator {
  current   :: fn(self) -> u32 {
    return self.current_char;
  }
  next      :: fn(self*) -> void {
    subslice := self.slice.slice(self.position as s32 .. (self.position+4) as s32);
    ch, advance := utf8_to_code_point(subslice);
    self.position += advance;
    self.current_char = ch;
  }
  done      :: fn(self) -> bool {
    return self.position >= self.slice.length;
  }
}

impl String {
  chars :: fn(self) -> UTF8_Enumerator {
    return {
      slice: self.as_byte_slice(),
      position: 0,
      current_char: '\0',
    }
  }
}

impl String_Builder {
  append_utf8 :: fn(self*, ch: u32) {
    bytes := utf8_encode(ch);
    for byte in bytes {
      self.append_byte(byte);
    }
  }
}
