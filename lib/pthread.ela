#alias pthread_t :: u64;

pthread_attr_t :: union;

#alias ThreadFunction :: fn* ();
#alias ThreadStartRoutine :: fn* (void*)-> void*;

#foreign pthread_create :: fn(thread: pthread_t*, attr: pthread_attr_t*, start_routine: ThreadStartRoutine, arg: void*) -> int;
#foreign pthread_join :: fn(thread: pthread_t*, retval: void**) -> int;

/* forward */ 
start_thread :: fn(arg: void*) -> void*;

/* Simple thread struct */
Thread :: struct {
  handle: pthread_t;
  start_function: ThreadFunction;
  
  start :: fn(function: ThreadFunction, arg: void*) {
    this.start_function = function;
    pthread_create(&this.handle, null, &start_thread, arg);  
  }
  
  #ctor :: fn() {}
  #ctor :: fn(function: ThreadFunction) {
    start(function, this);
  }
  
  join :: fn() -> void* {
    n : void* = null;
    pthread_join(&this.handle, &n);
    return n;
  }
  #dtor :: fn() {
    join();
  }
}

/* wrapper calback to init Thread struct. */ 
start_thread :: fn(arg: void*) -> void* {
  thread : Thread* = arg;
  if (thread.start_function != null) {
    thread.start_function();
  }
  return null;
}

#alias pthread_mutex_t :: u64;
#foreign pthread_mutex_init :: fn(mutex: pthread_mutex_t*, attr: void*) -> int;
#foreign pthread_mutex_lock :: fn(mutex: pthread_mutex_t*) -> int;
#foreign pthread_mutex_unlock :: fn(mutex: pthread_mutex_t*) -> int;
#foreign pthread_mutex_destroy :: fn(mutex: pthread_mutex_t*) -> int;

/* Simple mutex */
Mutex :: struct {
  handle: pthread_mutex_t;
  #ctor :: fn() {
    pthread_mutex_init(&this.handle, null);
  }
  lock :: fn() {
    pthread_mutex_lock(&this.handle);
  }
  unlock :: fn() {
    pthread_mutex_unlock(&this.handle);
  }
  #dtor :: fn() {
    pthread_mutex_destroy(&this.handle);
  }
}

