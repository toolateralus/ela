#import core;

// For now, we'll just use a simple null terminated MyString.

MyString :: struct {
  data: char *;
  length: s32;
  is_view: bool;
  #ctor :: fn() {}

  #ctor :: fn(str: char*) {
    if str == null then return;
    length = 0;
    while (str[length] != '\0') {
      length++;
    }
    data = malloc(sizeof(char) * length + 1);
    data[length] = '\0';
    memcpy(data, str, length);
  }

  #ctor :: fn(begin: char*, end: char*, is_view: bool = false) {
    this.is_view = is_view;
    length = end - begin;
    if (is_view) {
      data = begin;
    } else {
      data = malloc(sizeof(char) * length + 1);
      memcpy(data, begin, length);
      data[length] = '\0';
    }
  }

  #dtor :: fn() {
    if (data && !is_view) then free(data);
  }

  #operator([]) :: fn(n: int) -> char {
    return data[n];
  }

  // Slicing a view.
  #operator([]) :: fn(range: Range) -> MyString {
    return {data + range.first, data + range.last, true};
  }

  substr :: fn(start: int , end: int) -> MyString {
    // TODO: clamp here? instead of returning empty?.
    if start < 0 || end > length || start > end then return {};
    return {data + start, data + end, false};
  }

  substr :: fn(r: Range) -> MyString { return substr((int)r.first, (int)r.last); }

  push :: fn(value : char) {
    new_data: char* = malloc(sizeof(char) * length + 2);
    memcpy(new_data, data, length);
    new_data[length] = value;
    new_data[length + 1] = '\0';
    free(data);
    data = new_data;
    length++;
  }

  erase_at :: fn(index: int) {
    if (index < 0 || index >= length || length <= 0) then return;
    new_data: char* = malloc(sizeof(char) * length);
    memcpy(new_data, data, index * sizeof(char));
    memcpy(new_data + index, data + index + 1, (length - index - 1) * sizeof(char));
    free(data);
    data = new_data;
    length++;
    data[length] = '\0';
  }

  insert_at :: fn(index: int, value: char) {
    if (data == null) {
      data = malloc(2);
      data[0] = value;
      data[1] = '\0';
      length = 1;
      return;
    }
    new_data: char* = malloc(sizeof(char) * length + 2);
    memcpy(new_data, data, index * sizeof(char));
    new_data[index] = value;
    memcpy(new_data + index + 1, data + index, (length - index) * sizeof(char));
    free(data);
    data = new_data;
    length++;
    data[length] = '\0';
  }
  insert_substr_at :: fn(index: int, substr: MyString) {
    if (data == null) {
      data = malloc(substr.length + 1);
      memcpy(data, substr.data, substr.length);
      data[substr.length] = '\0';
      length = substr.length;
      return;
    }
    substr_length: int = substr.length;
    new_data: char* = malloc(length + substr_length + 1);
    memcpy(new_data, data, index * sizeof(char));
    memcpy(new_data + index, substr.data, substr_length * sizeof(char));
    memcpy(new_data + index + substr_length, data + index, (length - index) * sizeof(char));
    free(data);
    data = new_data;
    length += substr_length;
    data[length] = '\0';
  }

  pop :: fn() -> char {
    if (length <= 0) {
      return 0;
    }
    value: char = data[length - 1];
    new_data: char* = malloc(length);
    memcpy(new_data, data, (length - 1) * sizeof(char));
    new_data[length - 1] = '\0';
    free(data);
    data = new_data;
    length--;
    return value;
  }

  #ctor :: fn(other: MyString) {
    if (other.data) {
      length = other.length;
      data = malloc(length + 1);
      memcpy(data, other.data, length);
      data[length] = '\0';
    }
  }

  #operator(=) :: fn(other: MyString) -> MyString {
    if (this != &other) {
      if data then free(data);
      if (other.data) {
        length = other.length;
        data = malloc(length + 1);
        memcpy(data, other.data, length);
        data[length] = '\0';
      } else {
        data = null;
        length = 0;
      }
    }
    return *this;
  }

  begin :: fn() -> char* { return data; }
  end :: fn() -> char* { return data + length; }

  #operator(==) :: fn(other: MyString) -> bool {
    if length != other.length then return false;
    for i in 0..length {
      if data[i] != other.data[i] then return false;
    }
    return true;
  }

  #operator(!=) :: fn(other: MyString) -> bool { return !(*this == other); }
};