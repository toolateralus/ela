// string :: struct;

// TODO: we need to have a more complex inference algoritm for 
// custom iterators on structs. What we need to do is look at the dereference operator on the
// iterator struct, not just the return type of begin()/end();

_MRange_Iterator :: struct {
  current:   u64;
  end_value: u64;
  increment: u64;
  is_reverse: bool;

  #ctor :: fn(start: u64, end_value: u64, is_reverse: bool, increment: u64) {
    current = start;
    this.end_value = end_value;
    this.is_reverse = is_reverse;
    this.increment = increment;
  }

  #operator(*) :: fn() -> u64 { return current; }

  #operator(++) :: fn() -> _MRange_Iterator  {
    if (is_reverse) {
      current -= increment;
    } else {
      current += increment;
    }
    return *this;
  }

  #operator(!=) :: fn(other: _MRange_Iterator) -> bool  {
    if (is_reverse) {
      return current > other.end_value;
    } else {
      return current < other.end_value;
    }
  }
}

// * We need to be able to take some form of initializer list.
MRange :: struct {
  #ctor :: fn() {}
  #ctor :: fn(first: u64, last: u64, increment: u64 = 1) {
    this.is_reverse = first > last;
    this.first = first;
    this.last = last;
    this.increment = increment;
    if (is_reverse) {
      // TODO: decrement first by 1?
      span = first - last;
    }
  }

  #ctor :: fn(other: MRange) {
    first = other.first;
    last = other.last;
    span = other.span;
    is_reverse = other.is_reverse;
    increment = other.increment;
  }

  first:      u64;
  last:       u64;
  span:       u64;
  increment:  u64 = 1;
  is_reverse: bool;

  begin :: fn() -> _MRange_Iterator {
    return _MRange_Iterator{first, last, is_reverse, increment};
  }

  end :: fn() -> _MRange_Iterator {
    return _MRange_Iterator{first, last, is_reverse, increment};
  }

  #operator(==) :: fn(number: u64) -> bool {
    return number >= first && number <= last;
  }

  contains :: fn(number: u64) -> bool {
    return number >= first && number <= last;
  }

  // TODO: implement me. it depends on string which wouldn't have been defined yet.
  // string to_string() { return $"{first}..{last}"; }
};