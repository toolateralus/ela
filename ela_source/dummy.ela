#import core; 
// ! THESE TWO FUNCTIONS HAVE NOT BEEN ABLE TO PASS SINCE THE TYPE SYSTEM REFACTOR
// ! @Cooper-Pilot
// * FUNCTION TYPES CANT CONVERT TO POINTERS?


function_pointer_helper :: fn(a: int, b) -> int {
  return a * b;
}

#test test_function_pointer_alias :: fn() {
  #alias FunctionPointer :: fn* (int, int) -> int;

  ptr := &function_pointer_helper;
  assert("Function pointer call", ptr(2, 3) == 6);

  array: FunctionPointer[] = {
    &function_pointer_helper
  };

  // * If we explicitly type this as FunctionPointer, 
  // it says cannot convert fn() to fn*().
  from_arr := array[0];

  if from_arr != null {
    from_arr(2, 3)
  } else {
    assert("", false);
  }

  // fixed: FunctionPointer[12];
  // fixed[0] = &function_pointer_helper;
  // from_fixed : FunctionPointer = &fixed[0];

  // assert("Fixed array of function pointers", from_fixed(2, 3) == 6);

  // function :: fn() -> FunctionPointer {
  //   return &function_pointer_helper;
  // }

  // returned_ptr : FunctionPointer = function();
  // assert("Function returning function pointer", returned_ptr(2, 3) == 6);
}