/*
 * TSM - Main Header
 *
 * Copyright (c) 2011-2013 David Herrmann <dh.herrmann@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * @mainpage
 *
 * TSM is a Terminal-emulator State Machine. It implements all common DEC-VT100
 * to DEC-VT520 control codes and features. A state-machine is used to parse TTY
 * input and saved in a virtual screen. TSM does not provide any rendering,
 * glyph/font handling or anything more advanced. TSM is just a simple
 * state-machine for control-codes handling.
 * The main use-case for TSM are terminal-emulators. TSM has no dependencies
 * other than an ISO-C99 compiler and C-library. Any terminal emulator for any
 * window-environment or rendering-pipline can make use of TSM. However, TSM can
 * also be used for control-code validation, TTY-screen-capturing or other
 * advanced users of terminal escape-sequences.
 */

/**
 * @defgroup misc Miscellaneous Definitions
 * Miscellaneous definitions
 *
 * This section contains several miscellaneous definitions of small helpers and
 * constants. These are shared between other parts of the API and have common
 * semantics/syntax.
 *
 * @{
 */

/**
 * Logging Callback
 *
 * @data: user-provided data
 * @file: Source code file where the log message originated or NULL
 * @line: Line number in source code or 0
 * @func: C function name or NULL
 * @subs: Subsystem where the message came from or NULL
 * @sev: Kernel-style severity between 0=FATAL and 7=DEBUG
 * @format: printf-formatted message
 * @args: arguments for printf-style @format
 *
 * This is the type of a logging callback function. You can always pass NULL
 * instead of such a function to disable logging.
 */

#alias tsm_log_t :: void(void*, char*, int, char*, char*, u32, char*, ...)*;

/**
 * @defgroup symbols Unicode Helpers
 * Unicode helpers
 *
 * Unicode uses 32bit types to uniquely represent symbols. However, combining
 * characters allow modifications of such symbols but require additional space.
 * To avoid passing around allocated strings, TSM provides a symbol-table which
 * can store combining-characters with their base-symbol to create a new symbol.
 * This way, only the symbol-identifiers have to be passed around (which are
 * simple integers). No string allocation is needed by the API user.
 *
 * The symbol table is currently not exported. Once the API is fixed, we will
 * provide it to outside users.
 *
 * Additionally, this contains some general UTF8/UCS4 helpers.
 *
 * @{
*/

/* UCS4 helpers */
TSM_UCS4_MAX : u64 = 0x7fffffff
TSM_UCS4_INVALID : u64 = TSM_UCS4_MAX + 1
TSM_UCS4_REPLACEMENT : u64 = 0xfffd

/* ucs4 to utf8 converter */

tsm_ucs4_get_width :: (ucs4: u32) -> u32;
tsm_ucs4_to_utf8 :: (ucs4: u32, out: char*) -> u64;
tsm_ucs4_to_utf8_alloc :: (ucs4: u32*, len: u64, len_out: u64*) -> char*;

/* symbols */
#alias tsm_symbol_t :: u32;


/**
 * @defgroup screen Terminal Screens
 * Virtual terminal-screen implementation
 *
 * A TSM screen respresents the real screen of a terminal/application. It does
 * not render anything, but only provides a table of cells. Each cell contains
 * the stored symbol, attributes and more. Applications iterate a screen to
 * render each cell on their framebuffer.
 *
 * Screens provide all features that are expected from terminals. They include
 * scroll-back buffers, alternate screens, cursor positions and selection
 * support. Thus, it needs event-input from applications to drive these
 * features. Most of them are optional, though.
 *
 * @{
*/

tsm_screen :: struct;

#alias tsm_age_t :: u32;

TSM_SCREEN_INSERT_MODE  :=	0x01;
TSM_SCREEN_AUTO_WRAP    :=	0x02;
TSM_SCREEN_REL_ORIGIN   :=	0x04;
TSM_SCREEN_INVERSE      :=	0x08;
TSM_SCREEN_HIDE_CURSOR  :=	0x10;
TSM_SCREEN_FIXED_POS    :=	0x20;
TSM_SCREEN_ALTERNATE    :=	0x40;

#export struct tsm_screen_attr {
  fccode:                   s8;			/* foreground color code or <0 for rgb */
  bccode:                   s8;			/* background color code or <0 for rgb */
	fr:                       u8;			/* foreground red */
	fg:                       u8;			/* foreground green */
	fb:                       u8;			/* foreground blue */
	br:                       u8;			/* background red */
	bg:                       u8;			/* background green */
	bb:                       u8;			/* background blue */
  
	#bitfield(1) bold:        u32;		/* bold character */
	#bitfield(1) underline:   u32;	  /* underlined character */
	#bitfield(1) inverse:     u32;	  /* inverse colors */
	#bitfield(1) protect:     u32;	  /* cannot be erased */
	#bitfield(1) blink:       u32:		/* blinking character */
};

#alias tsm_screen_draw_cb :: int(tsm_screen*, u32, u32*, u64, u32, u32, u32, tsm_screen_attr*, tsm_age_t*, void*);

#foreign tsm_screen_new :: (out: tsm_screen*, log: tsm_log_t, log_data: void*) -> int;
#foreign tsm_screen_ref :: (con: tsm_screen*) -> void;
#foreign tsm_screen_unref :: (con: tsm_screen*) -> void;

#foreign tsm_screen_get_width :: (con: tsm_screen*) -> u32;
#foreign tsm_screen_get_height :: (con: tsm_screen*) -> u32;
#foreign tsm_screen_resize :: (con: tsm_screen*, x: u32, y: u32) -> int;
#foreign tsm_screen_set_margins :: (con: tsm_screen*, top: u32, bottom: u32) -> int;
#foreign tsm_screen_set_max_sb :: (con: tsm_screen*, max: u32) -> void;
#foreign tsm_screen_clear_sb :: (con: tsm_screen*) -> void;

#foreign tsm_screen_sb_up :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_sb_down :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_sb_page_up :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_sb_page_down :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_sb_reset :: (con: tsm_screen*) -> void;

#foreign tsm_screen_set_def_attr :: (con: tsm_screen*, attr: tsm_screen_attr*) -> void;
#foreign tsm_screen_reset :: (con: tsm_screen*) -> void;
#foreign tsm_screen_set_flags :: (con: tsm_screen*, flags: u32) -> void;
#foreign tsm_screen_reset_flags :: (con: tsm_screen*, flags: u32) -> void;
#foreign tsm_screen_get_flags :: (con: tsm_screen*) -> u32;

#foreign tsm_screen_get_cursor_x :: (con: tsm_screen*) -> u32;
#foreign tsm_screen_get_cursor_y :: (con: tsm_screen*) -> u32;

#foreign tsm_screen_set_tabstop :: (con: tsm_screen*) -> void;
#foreign tsm_screen_reset_tabstop :: (con: tsm_screen*) -> void;
#foreign tsm_screen_reset_all_tabstops :: (con: tsm_screen*) -> void;

#foreign tsm_screen_write :: (con: tsm_screen*, ch: tsm_symbol_t, attr: tsm_screen_attr*) -> void;
#foreign tsm_screen_newline :: (con: tsm_screen*) -> void;
#foreign tsm_screen_scroll_up :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_scroll_down :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_move_to :: (con: tsm_screen*, x: u32, y: u32) -> void;
#foreign tsm_screen_move_up :: (con: tsm_screen*, num: u32, scroll: bool) -> void;
#foreign tsm_screen_move_down :: (con: tsm_screen*, num: u32, scroll: bool) -> void;
#foreign tsm_screen_move_left :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_move_right :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_move_line_end :: (con: tsm_screen*) -> void;
#foreign tsm_screen_move_line_home :: (con: tsm_screen*) -> void;
#foreign tsm_screen_tab_right :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_tab_left :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_insert_lines :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_delete_lines :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_insert_chars :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_delete_chars :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_erase_cursor :: (con: tsm_screen*) -> void;
#foreign tsm_screen_erase_chars :: (con: tsm_screen*, num: u32) -> void;
#foreign tsm_screen_erase_cursor_to_end :: (con: tsm_screen*, protect: bool) -> void;
#foreign tsm_screen_erase_home_to_cursor :: (con: tsm_screen*, protect: bool) -> void;
#foreign tsm_screen_erase_current_line :: (con: tsm_screen*, protect: bool) -> void;
#foreign tsm_screen_erase_screen_to_cursor :: (con: tsm_screen*, protect: bool) -> void;
#foreign tsm_screen_erase_cursor_to_screen :: (con: tsm_screen*, protect: bool) -> void;
#foreign tsm_screen_erase_screen :: (con: tsm_screen*, protect: bool) -> void;

#foreign tsm_screen_selection_reset :: (con: tsm_screen*) -> void;
#foreign tsm_screen_selection_start :: (con: tsm_screen*, posx: u32, posy: u32) -> void;
#foreign tsm_screen_selection_target :: (con: tsm_screen*, posx: u32, posy: u32) -> void;
#foreign tsm_screen_selection_copy :: (con: tsm_screen*, out: char**) -> int;

#foreign tsm_screen_draw :: (con: tsm_screen*, draw_cb: tsm_screen_draw_cb, data: void*) -> tsm_age_t;

/** @} */

/**
 * @defgroup vte State Machine
 * Virtual terminal emulation with state machine
 *
 * A TSM VTE object provides the terminal state machine. It takes input from the
 * application (which usually comes from a TTY/PTY from a client), parses it,
 * modifies the attach screen or returns data which has to be written back to
 * the client.
 *
 * Furthermore, VTE objects accept keyboard or mouse input from the application
 * which is interpreted compliant to DEV-VTs.
 *
 * @{
 */

/* virtual terminal emulator */

tsm_vte :: struct;

/* keep in sync with shl_xkb_mods */
tsm_vte_modifier :: enum {
	TSM_SHIFT_MASK		= (1 << 0),
	TSM_LOCK_MASK		= (1 << 1),
	TSM_CONTROL_MASK	= (1 << 2),
	TSM_ALT_MASK		= (1 << 3),
	TSM_LOGO_MASK		= (1 << 4),
};

/* keep in sync with TSM_INPUT_INVALID */
TSM_VTE_INVALID : s64 = 0xffffffff

#alias tsm_vte_write_cb :: void(tsm_vte*, char*, u64, void*)*;

tsm_vte_new :: (out: tsm_vte**, con: tsm_screen*, write_cb: tsm_vte_write_cb, data: void*, log: tsm_log_t, log_data: void*) -> int ;
tsm_vte_ref :: (vte: tsm_vte*);
tsm_vte_unref :: (vte: tsm_vte*);

tsm_vte_set_palette :: (vte: tsm_vte*, palette: char*) -> int ;

tsm_vte_reset :: (vte: tsm_vte*);
tsm_vte_hard_reset :: (vte: tsm_vte*);
tsm_vte_input :: (vte: tsm_vte*, byte : char *, len: u64);
tsm_vte_handle_keyboard :: (vte: tsm_vte*, keysym: u32, ascii: u32, mods: u32, unicode: u32) -> bool;