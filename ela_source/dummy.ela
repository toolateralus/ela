#alias pthread_t :: int;

pthread_attr_t :: union;

#foreign pthread_create :: fn(thread: pthread_t*, attr: pthread_attr_t*, start_routine: fn*(void*)->void*, arg: void*) -> int;
#foreign pthread_join :: fn(thread: pthread_t*, retval: void**) -> int;

/* forward */ 
start_thread :: fn(arg: void*) -> void*;

/* Simple thread struct */
Thread :: struct {
  handle: pthread_t;
  start_function: fn* ();
  
  start :: fn(function: fn* (), arg: void*) {
    this.start_function = function;
    pthread_create(&this.handle, null, &start_thread, arg);  
  }
  
  #ctor :: fn() {}
  #ctor :: fn(function: fn* ()) {
    start(function, (void*)this);
  }
  
  join :: fn() -> void* {
    n : void* = null;
    pthread_join(&this.handle, &n);
    return n;
  }
  #dtor :: fn() {
    join();
  }
}

main :: fn() {}