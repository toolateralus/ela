#import core;

/* Problem: find the 100th digit from 1 to 100, where 10 is comprised of 2 digits, 1 and 0. */

naive_solution :: () -> char {
  str : string;
  for i in 1..100 {
    str = $"{str}{i}";
  }
  c : char = str[100];
  return c;
}

faster_solution :: () -> char {
  ctr : int = 0;
  c: char;
  for i: s32; i < 100; ++i {
    if i >= 10 {
      ctr += 2;
    } else {
      ctr++;
    }
    if ctr == 100 {
      v := to_string(i);
      c = v[0];
      break;
    }
  }
  return c;
}

coopers_solution :: (start: s32, pos: s32) -> char {
  pos -= 1; // convert one index to zero index
  if start < 10 {
    if pos < 10 - start {
      num := start + pos;
      str := to_string(num);
      return str[0];
    } else {
      pos -= 10 - start;
      start = 10;
    }
  } else if start >= 10 && start < 100 {
    if pos < 90 * 2 - (start - 10) * 2 {
      
    }
  }
}

cheating_solution :: () -> char {
  answer := 90 / 2 + 9;
  v := to_string(answer);
  c : char = v[0];
  return c;
}

main :: () {
  str: string;
  str = 
  println($"{naive_solution()}");
  start: float64;
  end: float64;
  naive_time: float64;
  faster_time: float64;
  cheating_time: float64;

  start = timef();
  for i in 0..1000 {
    naive_solution();
  }
  end = timef();
  naive_time = end - start;

  start = timef();
  for i in 0..1000 {
    faster_solution();
  }
  end = timef();
  faster_time = end - start;

  start = timef();
  for i in 0..1000 {
    cheating_solution();
  }
  end = timef();
  cheating_time = end - start;

  println($"Naive solution time: {naive_time}s");
  println($"Faster solution time: {faster_time}s");
  println($"Cheating solution time: {cheating_time}s");
}