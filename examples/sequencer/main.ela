import rayui::*;
import rayui::{Slider, Timer, Check_Button};
import fs::*;

mut playing := false;
mut timer: Timer;
mut bpm : f32 = 120;
mut subdivisions: s32 = 1;
mut beats: s32 = 4;
mut total_notes: s32 = 4;

mut bg_color := LIGHTCYAN;

mut play_button_style := Style.{
  foreground: WHITE,
  background: CLEAR,
  highlighted: GREEN,
  font_size: 16,
  use_jiggly_text: true,
  jiggle_intensity: 5.0,
  jiggle_rate: 2.0,
};

file_dropdown_style :: Style.{
  foreground: WHITE,
  background: GRAY,
  highlighted: GREEN,
  font_size: 16,
  use_jiggly_text: true,
  jiggle_intensity: 5.0,
  jiggle_rate: 2.0,
}

SequenceChannel_style :: Style.{
  foreground: WHITE,
  background: GRAY,
  highlighted: GREEN,
  font_size: 16,
  use_jiggly_text: true,
  jiggle_intensity: 5.0,
  jiggle_rate: 2.0,
}

check_buttons: Check_Button[];

check_button_style :: Style.{
  foreground: WHITE,
  background: RED,
  highlighted: GREEN,
  font_size: 16,
  use_jiggly_text: false,
  jiggle_intensity: 5.0,
  jiggle_rate: 2.0,
}

reset_button_style :: Style .{
  foreground: WHITE,
  background: RED,
  highlighted: GREEN,
  font_size: 16,
  use_jiggly_text: false,
  jiggle_intensity: 5.0,
  jiggle_rate: 2.0,
};

mut index := 0;
mut color_index := 0;

get_sequencer_style :: fn(style: Style) -> Style {
  mut copy := style;
  color_index++;
  index := color_index % All_Colors.length;
  index_1 := index + 4 % All_Colors.length;
  copy.foreground = All_Colors.data[index];
  copy.background = All_Colors.data[index_1].with_alpha(75).scaled_rgb(0.5);
  copy.highlighted = copy.background.with_alpha(255);
  return copy;
}

SequenceChannel :: struct {
  check_buttons: Check_Button[],
  sound: Sound,
  active: bool,
  style: Style,
  volume : s32,
  old_volume : s32,
  volume_slider: Slider!<s32>,
}

impl SequenceChannel {
  create :: fn(_sound: Sound, _style: Style, name: str) -> #self {
    mut self: #self;
    self.sound = _sound;
    self.style = _style;
    self.volume_slider = .{
      text: String::from(name),                     // text
      rect: .{x: 0, y: 0, width: 146, height: 36}, // rectangle
      style: _style,                   // style
      min_value: 0,                        // min
      max_value: 100,                      // max
    };
    return self;
  }
  draw :: fn(*mut self, x: f32, y: f32) {
    if total_notes != self.check_buttons.length {
      while total_notes > self.check_buttons.length {
        _x : f32 = x + 150 + ((self.check_buttons.length as f32 * 40.0) as f32) + 2;
        self.check_buttons.push(.{
          value:      false,
          rect:       .{x: _x, y: y, width: 36, height: 36},
          style:      self.style,
          text:       null,
          allow_hold: true,
        });
      }
      while self.check_buttons.length > total_notes {
        button := self.check_buttons.pop();
      }
    }
    self.volume_slider.value = &mut self.volume;
    self.volume_slider.rect.x = x + 2;
    self.volume_slider.rect.y = y + 2;
    self.volume_slider.draw();
    index := 0;
    for button in self.check_buttons.iter_mut() {
      button.rect.x = x + 150 + index * 40 + 2;
      button.rect.y = y + 2;
      index++;
      button.draw();
    }
  }
  update :: fn(*mut self, index: s32) {
    if self.volume != self.old_volume {
      self.old_volume = self.volume;
      SetSoundVolume(self.sound, (self.volume as f32) / 100.0);
    }
    if self.check_buttons[index].value {
      PlaySound(self.sound);
    }
  }
}

mut channels: SequenceChannel[];

on_file_selected :: fn(index: s32);

mut file_dropdown: DropDown = .{
  rect: .{x: 0, y: 250, width: 125, height: 30},
  style: file_dropdown_style,
  on_selected: &mut on_file_selected,
  label: "New Channel"
};

on_file_selected :: fn(index: s32) {
  fileName := str.{ 
    data: file_dropdown.options[index],
    length: strlen(file_dropdown.options[index])
  };
  channels.push(SequenceChannel::create(
    LoadSound(fileName.data),
    get_sequencer_style(check_button_style),
    fileName
  ));
}

sequencer :: fn() {
  if playing && timer.tick() {
    for channel in channels.iter_mut() {
      channel.update(index);
    }
    index = (index + 1 % total_notes) % total_notes;
  }
}

main :: fn() {
  mut bpm_slider : Slider!<f32> = .{
    text: String::from("bpm"), 
    rect: .{x: 0, y: 0, width: 150, height: 40}, 
    style: .{ 
      foreground: WHITE.with_alpha(75), 
      background: BLACK,
      highlighted: GREEN,
      font_size: 16,
      use_jiggly_text: false,
      jiggle_intensity: 0.0,
      jiggle_rate: 0.0 
    },
    min_value: 30, 
    max_value: 240,
    value: &mut bpm, 
    held: false, 
  };

  mut subdivision_slider : Slider!<s32> = .{
    text: String::from("subdivisions"), 
    rect: .{x: 0, y: 110, width: 150, height: 40}, 
    style: .{ 
      foreground: WHITE.with_alpha(75),
      background: BLACK,
      highlighted: GREEN,
      font_size: 16,
      use_jiggly_text: false,
      jiggle_intensity: 0.0,
      jiggle_rate: 0.0
    }, 
    min_value: 1,  
    max_value: 20,   
    value: &mut subdivisions,  
    held: false 
  };

  mut beats_slider : Slider!<s32> = .{
    text: String::from("beats"), 
    rect: .{x: 150, y: 110, width: 150, height: 40}, 
    style: .{ 
      foreground: WHITE.with_alpha(75),
      background: BLACK,
      highlighted: GREEN,
      font_size: 16,
      use_jiggly_text: false,
      jiggle_intensity: 0.0,
      jiggle_rate: 0.0
    },
    min_value: 1,  
    max_value: 20,   
    value: &mut beats,  
    held: false 
  };

  bg_color.r -= 175;
  bg_color.g -= 175;
  bg_color.b -= 175;

  mut dir := Directory::open(".").unwrap();
  defer dir.deinit();

  InitAudioDevice();
  InitWindow(800, 600, "Sequencer"c);

  SetWindowState(ConfigFlags::FLAG_WINDOW_RESIZABLE);
  SetTargetFPS(1000);

  extensions: String[3] = .[
    String::from(".wav"),
    String::from(".mp3"),
    String::from(".ogg"),
  ];

  for file in dir.entries { 
    if file.length <= 4 then continue;
    
    
    for idx in 0..3 {
      if extensions[idx] == file {
        file_dropdown.options.push(file.data);
        break;
      }
    }
  }
  reset_label := String::from("reset (no undo)");
  remove_label := String::from("remove channel");
  play_label := String::from("play");
  while !WindowShouldClose() {
    ClearBackground(GRAY);
    BeginDrawing();
      if IsKeyPressed(KeyboardKey::KEY_SPACE) {
        playing = !playing;
        timer.last_tick_time = 0;
        index = 0;
      };

      mut seq_y := GetScreenHeight() / 2.0;
      mut seq_x := 0.0;

      for note in 0..total_notes {
        label_x := seq_x + 150.0 + (note as f32) * 40.0;
        beat := (note * beats) / total_notes + 1;
        subdiv := note % subdivisions + 1;
        mut text := format("%.%", (beat, subdiv), FormatOptions::default());
        DrawText(text.data, label_x as s32, (seq_y - 40.0) as s32, 12, WHITE);
        text.deinit();
      }

      if playing {
        cursor_x := seq_x + 150.0 + (index - 1 + total_notes) % total_notes * 40.0
        DrawRectangleLines(cursor_x as s32, seq_y, 40, (channels.length as s32) * 40, ORANGE);
      }

      sequencer();
      bpm_slider.draw();
      bpm = (bpm as s32) as f32;

      timer.interval = (1 / (bpm / 60)) / subdivisions;

      total_notes = beats * subdivisions;

      subdivision_slider.draw();
      beats_slider.draw();

      if button(reset_label, Rectangle.{x: (GetScreenWidth() as f32) - 210.0, y: 10, width: 200, height: 40}, reset_button_style) {
        while channels.length > 0 {
          channels.pop();
        }
      }
      if button(remove_label, Rectangle.{x: 0, y: 215, width: 125, height: 30}, reset_button_style) {
        if channels.length > 0 then channels.pop();
      }

      for channel in channels.iter_mut() {
        channel.draw(seq_x, seq_y);
        seq_y += 40;
      }

      file_dropdown.draw();

      {
        if playing {
          play_button_style.highlighted = RED;
        } else {
          play_button_style.highlighted = GREEN;
        }

        
        if button(play_label, Rectangle.{x: 0, y: 50, width: 100, height: 40}, play_button_style) {
          playing = !playing;
          timer.last_tick_time = 0;
          index = 0;
        }
      }
    EndDrawing();
  }
}
