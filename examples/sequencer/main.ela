#import rayui;

#import directory;
#import file;

playing := false;
timer: Timer;
bpm : float = 120;
subdivisions: int = 1;
beats: int = 4;
total_notes: int = 4;

bpm_slider : Slider![float] = {
  text: "bpm", 
  rect: {x: 0, y: 0, width: 150, height: 40}, 
  style: Style { 
    foreground: WHITE.with_alpha(75), 
    background: BLACK,
    highlighted: GREEN,
    font_size: 16,
    use_jiggly_text: false,
    jiggle_intensity: 0.0,
    jiggle_rate: 0.0 
  },
  min_value: 30, 
  max_value: 240,
  value: &bpm, 
  held: false, 
};

subdivision_slider : Slider![int] = {
  text: "subdivisions", 
  rect: Rectangle{x: 0, y: 110, width: 150, height: 40}, 
  style: Style { 
    foreground: WHITE.with_alpha(75),
    background: BLACK,
    highlighted: GREEN,
    font_size: 16,
    use_jiggly_text: false,
    jiggle_intensity: 0.0,
    jiggle_rate: 0.0
  }, 
  min_value: 1,  
  max_value: 20,   
  value: &subdivisions,  
  held: false 
};

bg_color := LIGHTCYAN;

beats_slider : Slider![int] = {
  text: "beats", 
  rect: {x: 150, y: 110, width: 150, height: 40}, 
  style: Style { 
    foreground: WHITE.with_alpha(75),
    background: BLACK,
    highlighted: GREEN,
    font_size: 16,
    use_jiggly_text: false,
    jiggle_intensity: 0.0,
    jiggle_rate: 0.0
  },
  min_value: 1,  
  max_value: 20,   
  value: &beats,  
  held: false 
};

play_button_style : Style = {
  foreground: WHITE,
  background: CLEAR,
  highlighted: GREEN,
  font_size: 16,
  use_jiggly_text: true,
  jiggle_intensity: 5.0,
  jiggle_rate: 2.0,
};

file_dropdown_style : Style = {
  foreground: WHITE,
  background: GRAY,
  highlighted: GREEN,
  font_size: 16,
  use_jiggly_text: true,
  jiggle_intensity: 5.0,
  jiggle_rate: 2.0,
}

sequence_channel_style : Style = {
  foreground: WHITE,
  background: GRAY,
  highlighted: GREEN,
  font_size: 16,
  use_jiggly_text: true,
  jiggle_intensity: 5.0,
  jiggle_rate: 2.0,
}

check_buttons: List![CheckButton];

check_button_style: Style = {
  foreground: WHITE,
  background: RED,
  highlighted: GREEN,
  font_size: 16,
  use_jiggly_text: false,
  jiggle_intensity: 5.0,
  jiggle_rate: 2.0,
}

reset_button_style : Style = {
  foreground: WHITE,
  background: RED,
  highlighted: GREEN,
  font_size: 16,
  use_jiggly_text: false,
  jiggle_intensity: 5.0,
  jiggle_rate: 2.0,
};

index : s32 = 0;


color_index: s32;

get_sequencer_style :: fn(style: Style) -> Style {
  copy := style;
  color_index++;
  index := color_index % All_Colors.length;
  index_1 := index + 4 % All_Colors.length;
  copy.foreground = All_Colors[index];
  copy.background = All_Colors[index_1].with_alpha(75).scaled_rgb(0.5);
  copy.highlighted = copy.background.with_alpha(255);
  return copy;
}

SequenceChannel :: struct {
  check_buttons: List![CheckButton];
  sound: Sound;
  active: bool;
  style: Style;
  volume : int = 50;
  old_volume : int = 50;
  volume_slider: Slider![int];
}

impl SequenceChannel {
  create :: fn(_sound: Sound, _style: Style, name: c_string) -> #self {
    self: #self;
    self.sound = _sound;
    self.style = _style;
    self.volume_slider = {
      text: name,                     // text
      rect: {x: 0, y: 0, width: 146, height: 36}, // rectangle
      style: _style,                   // style
      min_value: 0,                        // min
      max_value: 100,                      // max
    };
    return self;
  }
  draw :: fn(self*, x: float, y: float) {
    if total_notes != self.check_buttons.length {
      while total_notes > self.check_buttons.length {
        _x : float = x + 150 + ((self.check_buttons.length * 40) as float) + 2;
        self.check_buttons.push({
          value:      false,
          rect:       Rectangle{x: _x, y: y, width: 36, height: 36},
          style:      self.style,
          text:       null,
          allow_hold: true,
        });
      }
      while self.check_buttons.length > total_notes {
        button := self.check_buttons.pop();
      }
    }
    self.volume_slider.value = &self.volume;
    self.volume_slider.rect.x = x + 2;
    self.volume_slider.rect.y = y + 2;
    self.volume_slider.draw();
    index := 0;
    for *button in self.check_buttons {
      button.rect.x = x + 150 + index * 40 + 2;
      button.rect.y = y + 2;
      index++;
      button.draw();
    }
  }
  update :: fn(self*, index: int) {
    if self.volume != self.old_volume {
      self.old_volume = self.volume;
      SetSoundVolume(self.sound, (self.volume as float) / 100.0);
    }
    if self.check_buttons[index].value {
      PlaySound(self.sound);
    }
  }
}

channels: List![SequenceChannel];

on_file_selected :: fn(index: int);

file_dropdown : DropDown = {
  options: {},
  rect: {x: 0, y: 250, width: 125, height: 30},
  style: file_dropdown_style,
  on_selected: &on_file_selected,
  label: "New Channel"
};

on_file_selected :: fn(index: int) {
  fileName := file_dropdown.options[index];
  channels.push(SequenceChannel::create(
    LoadSound(fileName),
    get_sequencer_style(check_button_style),
    fileName
  ));
}

sequencer :: fn() {
  if playing && timer.tick() {
    for *channel in channels {
      channel.update(index);
    }
    index = (index + 1 % total_notes) % total_notes;
  }
}

main :: fn() {
  bg_color.r -= 175;
  bg_color.g -= 175;
  bg_color.b -= 175;

  dir := Directory::open(string::from("."));

  InitAudioDevice();
  InitWindow(800, 600, "Sequencer");

  SetWindowState(ConfigFlags::FLAG_WINDOW_RESIZABLE);
  SetTargetFPS(1000);

  for file in dir.files {
    if strncmp(file.data + file.length - 4, ".wav", 4) == 0 || 
       strncmp(file.data + file.length - 4, ".mp3", 4) == 0 || 
       strncmp(file.data + file.length - 4, ".ogg", 4) == 0 {
      file_dropdown.options.push(file.data);
    }
  }

  while !WindowShouldClose() {
    ClearBackground(GRAY);
    BeginDrawing();
      if IsKeyPressed(KeyboardKey::KEY_SPACE) {
        playing = !playing;
        timer.last_tick_time = 0;
        index = 0;
      };

      seq_y := GetScreenHeight() / 2.0;
      seq_x := 0.0;

      for note in 0..total_notes {
        label_x := seq_x + 150.0 + (note as float) * 40.0;
        beat := (note * beats) / total_notes + 1;
        subdiv := note % subdivisions + 1;
        str := $"{beat}.{subdiv}";
        DrawText(str, label_x as int, (seq_y - 40.0) as int, 12, WHITE);
        free(str);
      }

      if playing {
        cursor_x := seq_x + 150.0 + (index - 1 + total_notes) % total_notes * 40.0
        DrawRectangleLines(cursor_x as int, seq_y, 40, (channels.length as int) * 40, ORANGE);
      }

      sequencer();
      bpm_slider.draw();
      bpm = (bpm as int) as float;

      timer.interval = (1 / (bpm / 60)) / subdivisions;

      total_notes = beats * subdivisions;

      subdivision_slider.draw();
      beats_slider.draw();

      if button("reset (no undo)", {x: (GetScreenWidth() as float) - 210.0, y: 10, width: 200, height: 40}, reset_button_style) {
        while channels.length > 0 {
          channels.pop();
        }
      }
      if button("remove channel", {x: 0, y: 215, width: 125, height: 30}, reset_button_style) {
        if channels.length > 0 then channels.pop();
      }

      for *channel in channels {
        channel.draw(seq_x, seq_y);
        seq_y += 40
      }

      file_dropdown.draw();

      {
        if playing {
          play_button_style.highlighted = RED;
        } else {
          play_button_style.highlighted = GREEN;
        }
        if button("play", {x: 0, y: 50, width: 100, height: 40}, play_button_style) {
          playing = !playing;
          timer.last_tick_time = 0;
          index = 0;
        }
      }
    EndDrawing();
  }
}
