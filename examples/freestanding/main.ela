// assert that --freestanding was used in compiler invocation.
#ifndef FREESTANDING { #error "This is only supposed to be used freestanding. don't use `ela r`, use `run.sh`!" }

// specify flags for C backent
// -fPIC                :: position independent code,
// -c for               :: compiling to object files.
// -m64                 :: 64 bit architecture
// -fno-stack-protector :: no stack protection mechanism -- 
//                         we don't wanna link against any C stuff. by default our compiler will output
//                         an executable with these default protections.
#c_flags " -fPIC -c -m64 -o main.o -fno-stack-protector "

// our function declared in print.s
extern fn print(f: *const u8);
extern fn exit(code: s32);

fn memset (p: *mut u8, value: u64, len: u64) {
  for i in 0..len {
    p[i] = value;
  }
}

fn memcpy (dest: *mut *mut u8, src: *mut u8, len: u64) {
  for i in 0..len {
    (*dest)[i] = src[i];
  }
}

// used from 'print' in print.s
// just easier to write in ela.
fn strlen(s: *mut u8) -> s32 {
  i: s32;
  while s[i] != '\0' {
    ++i;
  }
  return i;
}

// A simple linear allocator (aka arena) 
// for a freestanding environment without os level allocators.
const LINEAR_ALLOCATOR_SIZE := 1024 * 24;

struct LinearAlloc {
  mem: u8[LINEAR_ALLOCATOR_SIZE],
  ptr: u64,
}

impl LinearAlloc {
  fn new() -> #self {
    self: #self;
    memset(self.mem as *mut u8, 0, LINEAR_ALLOCATOR_SIZE);
    return self;
  }
  fn alloc(*mut self, size: u64) -> *mut void {
    data := &mut self.mem[self.ptr];
    self.ptr += size;
    if (self.ptr > LINEAR_ALLOCATOR_SIZE) {
      print("\e[031mLinear allocator ran out of memory \e[033m(expected for demo)\n"c);
      exit(1);
    }
    return data;
  }
}

struct Vector2 {
  x: f32,
  y: f32
}

// unlike a normal Ela program, or C for that matter,
// you have to define your own _start() and (optionally) main()
// main can have whatever signature you want, but according to x86, and most platforms, you *need* _start
// We make main here just for an example, but all of this could be put into a _start function/ assembly routine.
fn main() {
  // create our 'linear allocator' which is just a piece of memory sitting on the stack.
  mut allocator := LinearAlloc::new();

  // say hello!
  print("\e[1;4;32mHello (free-standing) World!\e[0m\n"c);
  
  // example of getting a 'dynamically allocated' struct.
  // intentionally run the allocator out of memory, so we can 'panic' with exit(1);
  while {
    v: *mut Vector2 = allocator.alloc(sizeof(Vector2));
    v1: *mut Vector2 = allocator.alloc(sizeof(Vector2));
    memcpy((&mut v1) as *const *mut u8, v as *mut u8, sizeof(Vector2));
  }
}
