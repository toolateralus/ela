// compile in a freestanding environment and compile to an object file.
#c_flags "-fPIC -c -m64 -ffreestanding -fno-stack-protector -nostdlib -o main.o"

// our function declared in print.s
#foreign print :: fn(f: char *);
#foreign exit :: fn(code: int);

memset :: fn(p: char *, value: u32, len: u32) {
  for i in 0..len {
    p[i] = value;
  }
}

memcpy :: fn(dest: char**, src: char*, len: u32) {
  for i in 0..len {
    (*dest)[i] = src[i];
  }
}

#export strlen :: fn(s: char*) -> int {
  i: int;
  while s[i] != '\0' {
    ++i;
  }
  return i;
}

// A simple linear allocator (aka arena) 
// for a freestanding environment without allocations.
Allocator :: struct {
  mem : char[1024 * 24];
  ptr : u32;
  size: u32;
}

impl Allocator {
  create :: fn() -> #self {
    self: #self;
    self.size = 1024 * 24;
    memset(self.mem as char*, 0, self.size);
    return self;
  }

  alloc :: fn(self*, size: u32) -> char* {
    data := &self.mem[self.ptr];
    self.ptr += size;
    
    if (self.ptr > self.size) {
      print("\e[031mLinear allocator ran out of memory \e[033m(expected for demo)\n"c);
      exit(1);
    }

    return data;
  }
}

allocator := Allocator::create();

Vector2 :: struct {
  x: float;
  y: float;
}

// declare main as 'export' (much like 'extern "C"' in cpp) so our assembly program can find it.
// 'export' differs from foreign, because foreign is an external dependency we're importing,
// and 'export' is declaring an externally visible symbol.
#export main :: fn() -> int {
  print("\e[1;4;32mHello Free(standing) World!\e[0m\n"c);
  
  while {

    // example of getting a 'dynamically allocated' struct.
    v: Vector2* = allocator.alloc(sizeof(Vector2));
    v1: Vector2* = allocator.alloc(sizeof(Vector2));
    memcpy((&v1) as char**, v as char*, sizeof(Vector2));
    // we do this in a loop to show that our exit(1) call works to 
    // 'panic' on an error.
  }
  
  return 0;
}
