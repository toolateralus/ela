
import dlfcn::{dlopen, dlsym, dlclose, Rtld};
import fmt::*;
// import raylib::{InitWindow, SetTargetFPS, WindowShouldClose, IsKeyDown, BeginDrawing, ClearBackground, EndDrawing};
import raylib::*;


#include "shared.ela";

// Use this flag for machines that don't have '.' or '$(pwd)' in 
// their "LD_LIBRARY_PATH" env-var
#c_flags "-Wl,-rpath,.";

fn load_library() -> (*mut void, UpdateFunction) {
  handle := dlopen("./test.so"c, Rtld::Lazy);
  if !handle {
    panic("unable to open library");
  }
  hook: UpdateFunction = dlsym(handle, "test_call"c);
  if !hook {
    panic("Failed to get function from shared lib");
  }
  return (handle, hook);
}

fn main () -> s32 {
  mut handle, mut hook := load_library();
  mut ctx: DrawContext;
  
  SetTargetFPS(240);
  InitWindow(800, 600, "Testing DLL"c);
  mut hot_reload := false;
  mut show_error := false;


  fn draw_text_center_screen(message: c_str, y_offset: s32 = 0, color: Color) {
    const font_size := 24;
    text_width := MeasureText(message, font_size);
    DrawText(message, (800 - text_width) / 2, ((600 - font_size) / 2) + y_offset, font_size, color);
  }

  while !WindowShouldClose() {
    for key in 0..256 {
      ctx.inputState[key] = IsKeyDown(key as s32);
    }
    BeginDrawing();
      ClearBackground(BLACK);

      if show_error {
        draw_text_center_screen("Failed to compile! check stdout."c, -20, RED);
        show_error=false;
        continue;
      }    

      const font_size := 24;
      msg := "Press 'R' to hot reload\nEdit 'test.ela' and reload to try!"c;
      text_width := MeasureText(msg, font_size);
      DrawText(msg, 800 - (text_width + (text_width / 8)), font_size / 4, font_size, WHITE);

      // Hot reloading logic.
      if IsKeyDown(KeyboardKey::KEY_R) {
        draw_text_center_screen("Reloading..."c, 0, WHITE);
        hot_reload = true;
      }

      hook(&mut ctx);
      ctx.draw();
    EndDrawing();

    if (hot_reload) {
      hot_reload = false;
      dlclose(handle);
      if system("./compile-so.sh"c) != 0 {
        show_error = true;
      }
      tuple := load_library();
      handle = tuple.0;
      hook = tuple.1;
    }
  }
  return 0;
}