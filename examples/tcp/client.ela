import fmt::*;
import net::*;
import util::*;

fn main() {
  port: u16 = 8080;
  sockfd: s32 = socket(AF_INET, __socket_type::SOCK_STREAM, 0);

  if sockfd == -1 {
    panic("failed to create socket");
  } else {
    println("client socket created");
  }

  mut ip_string: u8[128];
  println("Enter an IP to connect to.");
  len := read_string(ip_string, 128);

  printlnf("connecting to: %", (str.{data: ip_string, length: len},));
  servaddr: sockaddr_in = .{
    sin_family: AF_INET as u16,
    sin_addr: .{
      s_addr: inet_addr(ip_string),
    },
    sin_port: htons(port),
  };

  if connect(sockfd, (&const servaddr) as *const void, sizeof(sockaddr_in) as u32) != 0 {
    panic("unable to connect to the server");
  } else {
    println("connected.");
  }

  mut buff: u8[80];
  while {
    std::c::memset(buff, 0, 80);

    mut n: s32;
    while n < 80 && (buff[n++]= std::c::getchar()) != '\n' {}

    write(sockfd, buff, 80);
    std::c::memset(buff, 0, 80);
    read(sockfd, buff, 80);
    println(str.{
      data: buff,
      length: 80
    });
  }

  close(sockfd);
}
