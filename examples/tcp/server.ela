import fmt::*;
import net::*;
import util::*;

fn main() {
  port: u16 = 8080;
  sockfd := socket(AF_INET, __socket_type::SOCK_STREAM, 0);

  optval: s32 = 1;
  setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (&const optval) as *const void, sizeof(s32) as u32);

  if sockfd == -1 {
    panic("socket failed to open");
  } else {
    println("socket opened");
  }

  servaddr: sockaddr_in = .{
    sin_family: AF_INET as u16,
    sin_addr: .{
      s_addr: htonl(INADDR_ANY),
    },
    sin_port: htons(port),
  };

  result := bind(sockfd, (&const servaddr) as *const void, sizeof(sockaddr_in) as u32);

  if result != 0 {
    panic("failed to bind socket to server address");
  } else {
    println("socket bound");
  }

  if listen(sockfd, 5) {
    panic("failed to listen");
  } else {
    println("server listening");
  }

  mut len: u32;
  mut client: sockaddr_in;
  clientfd := accept(sockfd, (&mut client) as *mut void, &mut len);

  mut buff: u8[80];

  while {
    std::c::memset(buff, 0, 80);
    length := read(clientfd, buff, 80);

    if length == 0 {
      panic("failed to read from client");
    }

    printlnf("From client: %, Type a message to client:", (str.{data: buff, length: length},));

    std::c::memset(buff, 0, 80);
    read_string(buff, 80);
    write(clientfd, buff, 80);

    if std::c::strncmp(buff, "exit"c, 4) == 0 {
      println("Exiting...");
      break;
    }
  }

  close(sockfd);
  close(clientfd);
}
