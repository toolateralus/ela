#import rayui;
#import raylib;
#import file;

list_erase :: fn![T](list: List![T], value: T) -> bool {
  if list.length == 0 {
    return false;
  }
  for i in 0..list.length {
    if list.data[i] == value {
      for j in i..list.length - 1 {
        list.data[j] = list.data[j + 1];
      }
      list.length--;
      return true;
    }
  }
  return false;
}

Scene :: enum {
  MainMenu,
  Game,
}

#region Global Variables {
  button_style : Style = {
    foreground: WHITE,
    background: CLEAR,
    font_size: 20
  };

  jiggly_text_style : Style = {
    foreground: WHITE,
    background: CLEAR,
    font_size: 40
  };

  round_base_num_enemies_to_advance: s32 = 6;
  round_index : s32 = 1;
  round_failed := false;
  camera: Camera2D;
  scene: s32 = Scene::MainMenu;

  max_tilt : f32 = 16;
  screen_width : f32;
  screen_height : f32;
  zero : Vector2 = {x: 0, y: 0};

  player_drag := 0.87;

  bullet_start_velocity := -15.0;
  bullet_min_velocity := 0.3;
  bullet_scale := 32.0;
  bullet_drag := 0.99;

  enemy_scale := 48.0;
  enemy_rotation_speed := 13.0;
  enemy_max_speed := 1.0;

  score : s32  = 0;
  targets_destroyed : s32 = 0;
  num_enemies_spawned : s32 = 0;
  can_burst := true;

  bullet_max_burst: s32 = 3;

  smoke_particle_init_scale : Vector2 = {x: 15, y: 15};
  smoke_particle_max_burst := 6;
  smoke_particle_density := 1.5;

  player_smoke_color : Color;

  fire_particle_density := 3.0;
  fire_particle_max_burst := 6;

  game_start_time : f32;
  fade_in_length : f32 = 3.0;
  misses_this_round : s8 = 0;
  round_finish_start_time : f32 = -1;

  background_rect : Rectangle;

  format_buffer: u8*;

  game_music: Music;
  menu_music: Music;
  current_music: Music*;

  spark_color : Color = {
    r: YELLOW.r,
    g: YELLOW.g,
    b: YELLOW.b,
    a: 25 as u8
  };

  bg_color : Color = BLACK;

  target_bg_color : Color = {
    r: 75 as u8, g: 75 as u8, b: 75 as u8, a: 255 as u8,
  }
}

ParticleKind :: enum {
  Smoke,
  Fire,
}

RenderInfo :: struct {
  texture: Texture2D,
  tex_rect : Rectangle,
}

impl RenderInfo {
  create :: fn(tex: Texture2D) -> #self {
    self: #self;
    w := tex.width as f32;
    h := tex.height as f32;
    self.tex_rect = {
      x: 0, 
      y: 0,
      width: w,
      height: h
    };
    self.texture = tex;
    return self;
  }
}

Particle :: struct {
  render_info: RenderInfo*,
  velocity: Vector2,
  spawn_time: f32,
  lifetime: f32,
  kind: s32,
  position: Vector2,
  scale: Vector2,
  color: Color,
}

Character :: struct {
  texture: Texture2D,
  rect: Rectangle,
  tex_rect : Rectangle,
  horizontal_velocity: f32,
  speed: f32,
  origin: Vector2,
  cannon_idx: s32,
  rotation: f32,
}

Bullet :: struct {
  velocity: Vector2,
  speed: f32,
  rotation: f32,
  dead : bool,
  render_info: RenderInfo*,
  origin: Vector2,
  rect: Rectangle,
}

impl Bullet {
  create :: fn(_rect: Rectangle, info: RenderInfo*, vel : Vector2, rot: f32) -> #self{
    self: #self;
    self.rotation = rot;
    self.render_info = info;
    self.rect = _rect;
    self.origin = { x:  _rect.width / 2, y: _rect.height / 2 };
    self.velocity = vel;
    return self;
  }
}

Enemy :: struct {
  id: s32,
  dead: bool,
  rect: Rectangle,
  origin: Vector2,
  render_info : RenderInfo*,
  target: Vector2,
  rotation: f32,
  speed: f32,
};

impl Enemy {
  create :: fn(_rect: Rectangle, info: RenderInfo*) -> #self{
    self: #self;
    self.render_info = info;
    self.rect = _rect;
    self.origin = { x: _rect.width / 2, y: _rect.height / 2 };
    return self;
  }
}

TextParticle :: struct {
  position: Vector2,
  font_size : s32,
  text: str,
  spawn_time: f32,
  lifetime: f32,
  color: Color,
}

#region Global Variables {
  timer : Timer;

  bullet_render_info: RenderInfo;
  enemy_render_info: RenderInfo;
  smoke_particle_render_info: RenderInfo;
  fire_particle_render_info: RenderInfo;
  background_texture : Texture2D;

  u8acter : Character;
  bullets: List![Bullet*];
  enemies: List![Enemy*];
  particles: List![Particle*];
  text_particles: List![TextParticle*];

  shot_sound: Sound;
  explosion_sound: Sound;
  thud_sound: Sound;
  fail_sound: Sound;

  ui_text_color : Color = WHITE;
}

get_center_screen_rect:: fn(width: f32, height, offset: Vector2) -> Rectangle {
  return {
    x: screen_width / 2 + offset.x,
    y: screen_width / 2 + offset.y,
    width: width,
    height: height
  };
}

make_text_particle :: fn(text: str, font_size: s32, position: Vector2, lifetime: f32) {
  particle : TextParticle* = malloc(sizeof(TextParticle));
  particle.position = position;
  particle.font_size = font_size;
  particle.text = text;
  particle.spawn_time = GetTime();
  particle.lifetime = lifetime;
  text_particles.push(particle);
}

// great function name
get_random_grayscale_color_with_per_channel_variance :: fn(_variance: f32) -> Color {
  gray_value : u8 = clamp(GetRandomValue(0, 1) * 255.0, 0, 255) as u8;
  r : u8 = clamp(gray_value + (GetRandomValue(0, 1) * _variance) as u8, 0, 255) as u8;
  g : u8 = clamp(gray_value + (GetRandomValue(0, 1) * _variance) as u8, 0, 255) as u8;
  b : u8 = clamp(gray_value + (GetRandomValue(0, 1) * _variance) as u8, 0, 255) as u8;
  return {r: r, g: g, b: b, a: 255 as u8};
}

random_vector2 :: fn(origin: Vector2, min, max) -> Vector2 {
  result: Vector2;
  result.x = origin.x + min.x + GetRandomValue(0, 1) * (max.x - min.x);
  result.y = origin.y + min.y + GetRandomValue(0, 1) * (max.y - min.y);
  return result;
}

random_vector2_scalar :: fn(max: f32) -> Vector2 {
  result: Vector2;
  value := GetRandomValue(0, max as s32);
  result.x = value
  result.y = value;
  return result;
}

make_particle :: fn(kind: s32, position: Vector2, tint: Color) {
  particle : Particle* = malloc(sizeof(Particle));
  if kind == ParticleKind::Smoke {
    max_vel := 3.0;
    particle.position = random_vector2(position, {x: 0, y: 0}, {x: max_vel, y: max_vel});
    particle.velocity = random_vector2({x: 0.0, y: 0.0}, {x: -max_vel, y: -1.0}, {x: max_vel, y: max_vel});
    burst : s32 = (GetRandomValue(0, 1) * smoke_particle_max_burst) as s32;
    if can_burst && burst > 1 {
      can_burst = false;
      for _ in 0..burst { make_particle(kind, position, tint); }
      can_burst = true;
    }

    particle.color = ColorAlphaBlend(get_random_grayscale_color_with_per_channel_variance(50.0), tint, WHITE);
    particle.render_info = &smoke_particle_render_info;
    particle.lifetime = 1.0;
    particle.scale = smoke_particle_init_scale.scale(GetRandomValue(0, 6400));
    particle.spawn_time = GetTime();
  } else if kind == ParticleKind::Fire {
    max_spread := 24.0;
    particle.position = random_vector2(position, Vector2::zero(), Vector2::scalar(max_spread));

    burst : s32 = 24;

    if can_burst && burst > 1 {
      can_burst = false;
      for _ in 0..burst { make_particle(kind, position, tint); }
      can_burst = true;
    }

    particle.render_info = &fire_particle_render_info;
    particle.lifetime = 4.0 / 60;
    particle.scale = {x: 16.0, y: 16.0};
    particle.spawn_time = GetTime();
    particle.color = tint;
  }

  particles.push(particle);
}

update_particle :: fn(particle: Particle*) -> bool {
  time := GetTime();
  if particle.kind == ParticleKind::Smoke {
    particle.position = particle.position.add(particle.velocity);
    particle.velocity = particle.velocity.scale(0.98);

    t := particle.spawn_time / time;
    scale := lerp(smoke_particle_init_scale.x * 0.15, smoke_particle_init_scale.x, t);
    delta := time - particle.spawn_time;
    particle.color.a = clamp(particle.color.a - 12, 0, 255);
    if delta > particle.lifetime {
      return t < 0.1 && particle.color.a == 0;
    }
    particle.scale = {x: scale, y: scale};
  } else if  particle.kind == ParticleKind::Fire {
    particle.scale.x *= 0.95;
    particle.scale.y *= 0.95;
    if particle.color.a > 0 {
      particle.color.a /= 2;
    }
  }
  return true;
}

enemy_move_towards_or_get_new_target :: fn(enemy: Enemy*) {
  position : Vector2 = {x: enemy.rect.x, y: enemy.rect.y};
  if position.distance(enemy.target) < 5 || zero.equals(enemy.target) {
    enemy.target = { 
      x: GetRandomValue(0, 1) * screen_width, 
      y: GetRandomValue(0, 1) * screen_height 
    };
    enemy.target.y = clamp(enemy.target.y, 0, screen_height / 1.5);
    enemy.speed = GetRandomValue(0, 1) * enemy_max_speed * round_index;
  } else {
    direction := enemy.target.sub(position).normalize();
    position = direction.scale(enemy.speed).add(position);
    position.y = clamp(position.y, 0, screen_height / 1.5);
    enemy.rect.x = position.x;
    enemy.rect.y = position.y;
  }
}

make_enemy :: fn() {
  x : f32 = GetRandomValue(0, 1) * screen_width;
  y : f32 = GetRandomValue(0, 1) * screen_height;
  rect : Rectangle = {x: x, y: y, width: enemy_scale, height: enemy_scale};

  rect.x = clamp(rect.x, 0, screen_width);
  rect.y = clamp(rect.y, 0, screen_height / 1.5);

  enemy : Enemy* = malloc(sizeof(Enemy));
  *enemy = Enemy::create(rect, &enemy_render_info);

  enemy_move_towards_or_get_new_target(enemy);

  for _ in 0..10 {
    make_particle(ParticleKind::Smoke, {x: rect.x, y: rect.y}, BLUE);
  }

  enemy.id = enemies.length;
  enemies.push(enemy);
}

make_bullet :: fn(x: f32, y, rotation) {
  offset: f32;
  if u8acter.cannon_idx == 0 {
    offset = -(bullet_scale / 2.0)
  } else {
    offset = (bullet_scale / 2.0);
  }
  rect : Rectangle = {x: x + offset, y: y - bullet_scale, width: bullet_scale, height: bullet_scale};
  radians := (rotation / 360) * 3.14159265 * 2;
  direction : Vector2 = {x: -(sin(radians) as f32), y: cos(radians) as f32};
  start_velocity := direction.scale(bullet_start_velocity);
  
  { 
    bullet: Bullet* = malloc(sizeof(Bullet));
    *bullet = Bullet::create(rect, &bullet_render_info, start_velocity, rotation);
    bullets.push(bullet);
  }

  make_particle(ParticleKind::Smoke, {x: rect.x, y: rect.y}, PINK);
  fire_pos : Vector2 = {x: rect.x - (bullet_scale * 0.5) + u8acter.horizontal_velocity, y: rect.y - bullet_scale};
  make_particle(ParticleKind::Fire, fire_pos, WHITE);
}

draw_background :: fn() {
  bg_color = Color::lerp(bg_color, target_bg_color, 0.25);
  
  DrawTexturePro(background_texture, background_rect, {
    x: 0.0,
    y: 0.0,
    width: screen_width, 
    height: screen_height
  }, {x: 0.0, y: 0.0}, 0.0, bg_color);

  now : f32 = GetTime() as f32; 
  t := (now - game_start_time) / fade_in_length;
  if scene == Scene::Game && t < fade_in_length {
    DrawRectangle(0, 0, screen_width as s32, screen_height as s32, Color::lerp(BLACK, CLEAR, t));
  }
}

draw_game :: fn() {

  if IsWindowResized() {
    u8acter.rect.y = screen_height / 1.2;
  }

  for bullet in bullets {
    DrawTexturePro(bullet.render_info.texture, bullet.render_info.tex_rect, bullet.rect, bullet.origin, bullet.rotation, WHITE);
  }

  for enemy in enemies {
    DrawTexturePro(enemy.render_info.texture, enemy.render_info.tex_rect, enemy.rect, enemy.origin, enemy.rotation, WHITE);
  }

  for particle in particles {
    rect : Rectangle = {
      x: particle.position.x,
      y: particle.position.y,
      width: particle.scale.x,
      height: particle.scale.y,
    };
    DrawTexturePro(particle.render_info.texture, particle.render_info.tex_rect, rect, zero, 0.0, particle.color);
  }
  for particle in text_particles {
    DrawText(particle.text.data, particle.position.x as s32, particle.position.y as s32, particle.font_size, particle.color);
  }

  DrawTexturePro(u8acter.texture, u8acter.tex_rect, u8acter.rect, u8acter.origin, u8acter.rotation, WHITE);

  sprintf(format_buffer,  "Score:            %d", score);
  DrawText(format_buffer, 0, 0, 24, ui_text_color);

  sprintf(format_buffer,  "Count:            %d", targets_destroyed);
  DrawText(format_buffer, 0, 30, 24, ui_text_color);

  if ui_text_color.a > 0 then
    ui_text_color = ui_text_color.with_alpha(ui_text_color.a - 5);
}

BulletRoutine :: struct {
  count : s32,
  timer: Timer,
  interval: f32,
}

impl BulletRoutine {
  spawn :: fn(self*) -> bool {
    self.timer.interval = self.interval;
    if self.timer.tick() {
      self.count -= 1;
      PlaySound(shot_sound);
      make_bullet(u8acter.rect.x, u8acter.rect.y, u8acter.rotation); 
      if self.count == 0 {
        u8acter.cannon_idx = !u8acter.cannon_idx;
        return true;
      }
      return false;
    } else {
      return false;
    }
  }
}

bullet_routine : BulletRoutine;


on_bullet_fizzle :: fn() {
  score *= 0.85;
  ui_text_color.a = 255;
  PlaySound(thud_sound);
  PlaySound(fail_sound);
  bg_color.r += 55;

  // :GameFailure
  // TODO: do we want this?
  // misses_this_round++;
  // if misses_this_round >= 3 {
  //   round_failed = true;
  //   scene = Scene::MainMenu;
  // }
}

on_enemy_killed :: fn(enemy: Enemy*, n_enemies_killed_this_frame: s32) {
  PlaySound(explosion_sound);
  make_particle(ParticleKind::Fire, {x: enemy.rect.x, y: enemy.rect.y}, WHITE);
  for _ in 0..4 {
    make_particle(ParticleKind::Smoke, {x: enemy.rect.x, y: enemy.rect.y}, spark_color);
  }
  // bonus score.
  if n_enemies_killed_this_frame >= enemies.length {
    bg_color.g += 55;
    score *= 1.2;
  }
}

space_down := false;

update_game :: fn() {

  // advance level.
  if targets_destroyed >= round_base_num_enemies_to_advance * round_index {
    if round_finish_start_time == -1.0 { round_finish_start_time = GetTime(); }
    now : f32 = GetTime() as f32;
    if now - round_finish_start_time < 2.0 {
      v := round_index + 1;
      text := format("Round: %...", {any::new(&v)});
      defer free(text);

      style := jiggly_text_style;
      style.foreground = Color::lerp(GREEN, CYAN, 0.5);
      style.font_size = 18;
      style.jiggle_intensity = 2;
      style.jiggle_rate = 10;

      text_w := measure_jiggly_text(text, style) / 4.0;
      jiggly_text(text, get_center_screen_rect(24, 12, {x: -(text_w * 3), y: 0.0}), style);

      v = round_base_num_enemies_to_advance * round_index;
      text = format("Requires % enemies to pass.", {any::new(&v)});
      jiggly_text(text, get_center_screen_rect(24, 12, {x: -(text_w * 3), y: 24}), style);

    } else {
      misses_this_round = 0;
      round_index++;
      targets_destroyed = 0;
      round_finish_start_time = -1.0;
    }
  }

  if IsKeyReleased(KeyboardKey::KEY_SPACE) && space_down {
    space_down = false;
    u8acter.cannon_idx = !u8acter.cannon_idx;
  }

  if bullet_routine.count > 0 && IsKeyDown(KeyboardKey::KEY_SPACE) {
    space_down = true;
    bullet_routine.spawn();
  } else {
    space_down = false;
    bullet_routine.count = 0;
  }

  if timer.tick() {
    expected_length := 3 * round_index;
    if enemies.length < expected_length  {
      for i in 0..expected_length/2 {
        make_enemy();
      }
    }
    // :GameFailure
    // TODO: do we want this failure case? it felt really bad when we added these.
    // } else {
    //   round_failed = true;
    //   scene = Scene::MainMenu;
    // }
  }
  moved := false;
  if IsKeyDown(KeyboardKey::KEY_A) {
    u8acter.horizontal_velocity -= u8acter.speed;
    moved = true;
  }
  if IsKeyDown(KeyboardKey::KEY_D) {
    u8acter.horizontal_velocity += u8acter.speed;
    moved = true;
  }

  if moved || u8acter.horizontal_velocity > 0 || u8acter.horizontal_velocity < 0 {
    for i in 0..fabs(u8acter.horizontal_velocity * smoke_particle_density) as s64 {
      make_particle(ParticleKind::Smoke, {
        x: u8acter.rect.x - 10,
        y: u8acter.rect.y + (u8acter.rect.height / 3),
      }, player_smoke_color);
    }
  }

  u8acter.rect.x += u8acter.horizontal_velocity;
  u8acter.horizontal_velocity *= player_drag;
  tilt := (u8acter.horizontal_velocity / u8acter.speed) * max_tilt / 4;
  u8acter.rotation = clamp(tilt, -max_tilt, max_tilt);

  if IsKeyPressed(KeyboardKey::KEY_SPACE) && bullet_routine.count == 0 {
    bullet_routine.count = bullet_max_burst;
  }

  dead_bullets: Bullet*[];
  dead_enemies: Enemy*[];

  // update enemy transforms.
  for enemy in enemies {
    enemy_move_towards_or_get_new_target(enemy);
    enemy.rotation += enemy_rotation_speed;
    if enemy.rotation >= 360.0 {
      enemy.rotation = 0.0;
    }
  }

  screen_rect : Rectangle = {
    x: 0.0, y: 0.0,
    width: GetScreenWidth() as f32,
    height: GetScreenHeight() as f32,
  };

  // update bullets and perform collision against enemies.
  for bullet in bullets {
    bullet.rect.y += bullet.velocity.y;
    bullet.rect.x += bullet.velocity.x;
    bullet.velocity.x *= bullet_drag;
    bullet.velocity.y *= bullet_drag;

    // mark stopped bullets or bullets off-screen as dead.
    if !CheckCollisionRecs(screen_rect, bullet.rect) || bullet.velocity.length_sqr() <= bullet_min_velocity {
      dead_bullets.push(bullet)
      bullet.dead = true;
      on_bullet_fizzle();
      continue;
    }

    bullet_rect := bullet.rect;
    bullet_rect.width *= 0.5;
    bullet_rect.x += bullet_rect.width;

    n_enemies_killed_this_frame : s32 = 0;
    for enemy in enemies {
      x_diff := enemy.rect.x + enemy.rect.width / 2 - bullet_rect.x;
      y_diff := enemy.rect.y - enemy.rect.height / 2 - bullet_rect.y;
      sqr_dist := x_diff * x_diff + y_diff * y_diff;
      radius := (enemy.rect.width + bullet_rect.height) / 2;
      if sqr_dist < radius * radius {
        if !enemy.dead {
          enemy.dead = true;
          dead_enemies.push(enemy);
          n_enemies_killed_this_frame++;
          on_enemy_killed(enemy, n_enemies_killed_this_frame);
        }
        if !bullet.dead {
          dead_bullets.push(bullet);
          bullet.dead = true;
        }
        targets_destroyed++;

        enemy_pos : Vector2 = {x: enemy.rect.x, y: enemy.rect.y};
        u8acter_pos : Vector2 = {x: u8acter.rect.x, y: u8acter.rect.y};
        distance := enemy_pos.distance(u8acter_pos);
        amount : s32 = (distance * round_index) as s32;
        score += amount
        ui_text_color.a = 255 as u8;
        
        make_text_particle(String::from(format("+%", {any::new(&amount)})), 12 + clamp(0, 8, distance), enemy_pos, clamp(0.5, 3.5, distance as f32) as f32);
        break;
      }
    }
  }

  for bullet in dead_bullets {
    list_erase![Bullet*](bullets, bullet);
    free(bullet);
  }

  for enemy in dead_enemies {
    list_erase![Enemy*](enemies, enemy);
    free(enemy);
  }

  dead_particles: Particle*[];
  for particle in particles {
    if !update_particle(particle)
      then dead_particles.push(particle);
  }

  for particle in dead_particles {
    list_erase![Particle*](particles, particle);
    free(particle);
  }

  dead_text_particles : TextParticle*[];
  for particle in text_particles {
    particle.position = particle.position.add(Vector2::scalar(0.1));
    now := GetTime() as f32;
    particle.color.a = lerp(particle.color.a, 0, (now - particle.spawn_time) / particle.lifetime);
    if now - particle.spawn_time >= particle.lifetime {
      dead_text_particles.push(particle);
    }
  }

  for particle in dead_text_particles {
    //list_erase![TextParticle*](text_particles, particle);
    free(particle);
  }

}

init :: fn() {
  background_texture = LoadTexture("res/background.png");

  screen_width =  GetScreenWidth() as f32;
  screen_height = GetScreenHeight() as f32;

  background_rect = {
    x: 0.0,
    y: 0.0,
    width: background_texture.width as f32,
    height: background_texture.height as f32
  };

  u8acter.texture = LoadTexture("res/u8acter.png");

  player_smoke_color = CYAN;
  player_smoke_color.r /= 2;
  player_smoke_color.g /= 2;
  player_smoke_color.b /= 2;

  w := u8acter.texture.width  as f32;
  h := u8acter.texture.height as f32;
  u8acter.tex_rect = {
    x: 0, y: 0,
    width: w, height: h
  };

  u8acter.rect = {
    x: screen_width / 2,
    y: screen_height / 1.25,
    width: 64, height: 64
  };

  u8acter.origin = { x: u8acter.rect.width / 2, y: u8acter.rect.height / 2 };

  bullet_render_info = RenderInfo::create(LoadTexture("res/bullet.png"));
  enemy_render_info = RenderInfo::create(LoadTexture("res/enemy.png"));
  smoke_particle_render_info = RenderInfo::create(LoadTexture("res/smoke.png"));
  fire_particle_render_info = RenderInfo::create(LoadTexture("res/fire.png"));
  timer.interval = 3;

}

init_audio :: fn() {
  InitAudioDevice();
  if !IsAudioDeviceReady() {
    printf("Failed to initialize audio device.\n");
    exit(1);
  }
  // init audio
  menu_music = LoadMusicStream("res/music1.wav")
  game_music = LoadMusicStream("res/music.wav");
  menu_music.looping = true;
  game_music.looping = true;

  SetMusicVolume(menu_music, 1.0);
  SetMusicVolume(game_music, 1.5);

  PlayMusicStream(menu_music);
  current_music = &menu_music;

  shot_sound = LoadSound("res/shot.wav");
  SetSoundVolume(shot_sound, 5.0);

  explosion_sound = LoadSound("res/explosion_low.wav");
  SetSoundVolume(explosion_sound, 1);

  thud_sound = LoadSound("res/thud.wav");
  SetSoundVolume(thud_sound, 0.4);

  fail_sound = LoadSound("res/fail.wav");
  SetSoundVolume(fail_sound, 0.05);
  SetMasterVolume(0.75);
}

reset_game_state :: fn() {
  misses_this_round = 0;
  score = 0;
  targets_destroyed = 0;
  num_enemies_spawned = 0;
  can_burst = true;
  timer.last_tick_time = GetTime();


  while bullets.length > 0 {
    n := bullets.pop();
  }
  while particles.length > 0 {
    n := particles.pop();
  }
  while enemies.length > 0 {
    n := enemies.pop();
  }
  while text_particles.length > 0 {
    n := text_particles.pop();
    n.text.deinit();
  }
}

swap_music :: fn() {
  StopMusicStream(*current_music);
  if scene == Scene::MainMenu {
    current_music = &menu_music;
  } else {
    current_music = &game_music;
  }
  PlayMusicStream(*current_music);
}

draw_main_menu :: fn() {
  width : f32 = 72;
  height : f32 = 48;

  start_button_rect := Rectangle {
    x: screen_width / 2 - (width / 2), 
    y: screen_height / 1.2 - (height / 2), 
    width: width,
    height: height
  }
  
  if button("Start game", start_button_rect, button_style) {
    scene = !scene;
    game_start_time = GetTime();
    reset_game_state();
    bg_color = BLACK;
    round_index = 0;
    round_failed = false;
  }

  rect : Rectangle = {
    x: screen_width / 7,
    y: screen_height / 10,
    width: screen_width / 2,
    height: screen_height / 10
  };

  jiggly_text("target practice", rect, jiggly_text_style);

  if round_failed {
    style := jiggly_text_style;
    rect : Rectangle = {
      x: screen_width / 7,
      y: screen_height / 3,
      width: screen_width / 2,
      height: screen_height / 10
    };
    style.foreground = RED;
    jiggly_text("You Lost!", rect, style);
    rect.y += 128;
    style.font_size = 12;

    style.foreground = CYAN;
    style.jiggle_intensity = 3.0;
    style.jiggle_rate = 1.0;
    text := format("reached round %,", {any::new(&round_index)});
    jiggly_text(text, rect, style);
    free(text);
    rect.y += 64;
    text = format("% targets taken down", {any::new(&targets_destroyed)});
    jiggly_text(text, rect, style);
    free(text);
    rect.y += 64;
    text = format("scored % points", {any::new(&score)});
    jiggly_text(text, rect, style);
    free(text);
  }
}

music_muted := false;

draw_game_menu :: fn() {
  width : f32 = 72 / 3;
  height : f32 = 48 / 3;

  style := button_style;
  style.use_jiggly_text = false;
  swap_rect := Rectangle {x: screen_width - width * 8, y: screen_height - height * 1.2, width: width, height: height};

  if button("swap music", swap_rect, style) {
    StopMusicStream(*current_music);
    if current_music == &game_music {
      current_music = &menu_music;
    } else {
      current_music = &game_music;
    }
    PlayMusicStream(*current_music);
  }

  style = button_style;
  style.use_jiggly_text = false;
  mute_rect := Rectangle {x: screen_width - width * 3, y: screen_height - height * 1.2, width: width, height: height};

  if button("mute music", mute_rect, style) {
    if music_muted {
      PlayMusicStream(*current_music);
      music_muted = false;
    } else {
      music_muted = true;
      StopMusicStream(*current_music);
    }
  }
}

main :: fn() {
  jiggly_text_style.highlighted = CYAN.with_alpha(24);
  button_style.highlighted = CYAN.with_alpha(24);
  format_buffer = malloc(sizeof(u8) * 1024);

  InitWindow(800, 600, "target practice");
  SetTargetFPS(60);

  init();
  init_audio();

  while !WindowShouldClose() {
    screen_width = GetScreenWidth();
    screen_height = GetScreenHeight();

    UpdateMusicStream(*current_music);
    BeginDrawing();
    // BeginMode2D(camera);
      ClearBackground(bg_color);
      draw_background();
      DrawFPS(0, 72);
      if scene == Scene::MainMenu {
        draw_main_menu();
      } else {
        if IsKeyPressed(KeyboardKey::KEY_BACKSPACE) {
          scene = Scene::MainMenu;
          swap_music();
        }
        update_game();
        draw_game();
        draw_game_menu();
      }
      // DrawText("This game is totally broken right now!!\n fix me please\n Raylib bindings are the source of\n the problem, they changed\n And the previous bindings,\n were totally wrong\n\n It's mostly the Timer object I think\n and the Camera.", 0, 120, 32, RED);
    // EndMode2D();
    EndDrawing();
  }

  CloseAudioDevice();
  free(format_buffer);
  return;
}