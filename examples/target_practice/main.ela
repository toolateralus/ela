import rayui::*;
import fs::*;

list_erase :: fn!<T>(list: List!<T>, value: T) -> bool {
  if list.length == 0 {
    return false;
  }
  for i in 0..list.length {
    if list.data[i] == value {
      for j in i..list.length - 1 {
        list.data[j] = list.data[j + 1];
      }
      list.length--;
      return true;
    }
  }
  return false;
}

Scene :: enum {
  MainMenu,
  Game,
}

#region Global Variables {
  mut button_style : Style = .{
    foreground: WHITE,
    background: CLEAR,
    font_size: 20
  };

  mut jiggly_text_style : Style = .{
    foreground: WHITE,
    background: CLEAR,
    font_size: 40
  };

  mut round_base_num_enemies_to_advance: s32 = 6;
  mut round_index : s32 = 1;
  mut round_failed := false;
  mut camera: Camera2D;
  mut scene: s32 = Scene::MainMenu;

  mut max_tilt : f32 = 16;
  mut screen_width : f32;
  mut screen_height : f32;
  mut zero : Vector2 = .{x: 0, y: 0};

  mut player_drag := 0.87;

  mut bullet_start_velocity := -15.0;
  mut bullet_min_velocity := 0.3;
  mut bullet_scale := 32.0;
  mut bullet_drag := 0.99;

  mut enemy_scale := 48.0;
  mut enemy_rotation_speed := 13.0;
  mut enemy_max_speed := 1.0;

  mut score : s32  = 0;
  mut targets_destroyed : s32 = 0;
  mut num_enemies_spawned : s32 = 0;
  mut can_burst := true;

  mut bullet_max_burst: s32 = 3;

  mut smoke_particle_init_scale : Vector2 = .{x: 15, y: 15};
  mut smoke_particle_max_burst := 6;
  mut smoke_particle_density := 1.5;

  mut player_smoke_color : Color;

  mut fire_particle_density := 3.0;
  mut fire_particle_max_burst := 6;

  mut game_start_time : f32;
  mut fade_in_length : f32 = 3.0;
  mut misses_this_round : s8 = 0;
  mut round_finish_start_time : f32 = -1;

  mut background_rect : Rectangle;

  mut format_buffer: *const u8;

  mut game_music: Music;
  mut menu_music: Music;
  mut current_music: *mut Music;

  mut spark_color : Color = .{
    r: YELLOW.r,
    g: YELLOW.g,
    b: YELLOW.b,
    a: 25 as u8
  };

  mut bg_color : Color = BLACK;

  mut target_bg_color : Color = .{
    r: 75 as u8, g: 75 as u8, b: 75 as u8, a: 255 as u8,
  }
}

ParticleKind :: enum {
  Smoke,
  Fire,
}

RenderInfo :: struct {
  texture: Texture2D,
  tex_rect : Rectangle,
}

impl RenderInfo {
  create :: fn(tex: Texture2D) -> #self {
    mut self: #self;
    w := tex.width as f32;
    h := tex.height as f32;
    self.tex_rect = .{
      x: 0, 
      y: 0,
      width: w,
      height: h
    };
    self.texture = tex;
    return self;
  }
}

Particle :: struct {
  render_info: *mut RenderInfo,
  velocity: Vector2,
  spawn_time: f32,
  lifetime: f32,
  kind: s32,
  position: Vector2,
  scale: Vector2,
  color: Color,
}

Character :: struct {
  texture: Texture2D,
  rect: Rectangle,
  tex_rect : Rectangle,
  horizontal_velocity: f32,
  speed: f32,
  origin: Vector2,
  cannon_idx: s32,
  rotation: f32,
}

Bullet :: struct {
  velocity: Vector2,
  speed: f32,
  rotation: f32,
  dead : bool,
  render_info: *mut RenderInfo,
  origin: Vector2,
  rect: Rectangle,
}

impl Bullet {
  create :: fn(_rect: Rectangle, info: *mut RenderInfo, vel : Vector2, rot: f32) -> #self{
    mut self: #self;
    self.rotation = rot;
    self.render_info = info;
    self.rect = _rect;
    self.origin = .{ x:  _rect.width / 2, y: _rect.height / 2 };
    self.velocity = vel;
    return self;
  }
}

Enemy :: struct {
  id: s32,
  dead: bool,
  rect: Rectangle,
  origin: Vector2,
  render_info : *mut RenderInfo,
  target: Vector2,
  rotation: f32,
  speed: f32,
};

impl Enemy {
  create :: fn(_rect: Rectangle, info: *mut RenderInfo) -> #self{
    mut self: #self;
    self.render_info = info;
    self.rect = _rect;
    self.origin = .{ x: _rect.width / 2, y: _rect.height / 2 };
    return self;
  }
}

TextParticle :: struct {
  position: Vector2,
  font_size : s32,
  text: String,
  spawn_time: f32,
  lifetime: f32,
  color: Color,
}

#region Global Variables {
  mut timer : Timer;

  mut bullet_render_info: RenderInfo;
  mut enemy_render_info: RenderInfo;
  mut smoke_particle_render_info: RenderInfo;
  mut fire_particle_render_info: RenderInfo;
  mut background_texture : Texture2D;
  mut character : Character;
  mut bullets: List!<*mut Bullet>;
  mut enemies: List!<*mut Enemy>;
  mut particles: List!<*mut Particle>;
  mut text_particles: List!<*mut TextParticle>;
  mut shot_sound: Sound;
  mut explosion_sound: Sound;
  mut thud_sound: Sound;
  mut fail_sound: Sound;
  mut ui_text_color : Color = WHITE;
}

get_center_screen_rect:: fn(width: f32, height: f32, offset: Vector2) -> Rectangle {
  return .{
    x: screen_width / 2 + offset.x,
    y: screen_width / 2 + offset.y,
    width: width,
    height: height
  };
}

make_text_particle :: fn(text: String, font_size: s32, position: Vector2, lifetime: f32) {
  text_particles.push(new(TextParticle.{
    position: position,
    font_size: font_size,
    text: text,
    spawn_time: GetTime() as f32,
    lifetime: lifetime,
  }));
}

// great function name
get_random_grayscale_color_with_per_channel_variance :: fn(_variance: f32) -> Color {
  gray_value : u8 = clamp(GetRandomValue(0, 1) * 255.0, 0, 255) as u8;
  r : u8 = clamp(gray_value + (GetRandomValue(0, 1) * _variance) as u8, 0, 255) as u8;
  g : u8 = clamp(gray_value + (GetRandomValue(0, 1) * _variance) as u8, 0, 255) as u8;
  b : u8 = clamp(gray_value + (GetRandomValue(0, 1) * _variance) as u8, 0, 255) as u8;
  return .{r: r, g: g, b: b, a: 255 as u8};
}

random_vector2 :: fn(origin: Vector2, min: Vector2, max: Vector2) -> Vector2 {
  mut result: Vector2;
  result.x = origin.x + min.x + GetRandomValue(0, 1) * (max.x - min.x);
  result.y = origin.y + min.y + GetRandomValue(0, 1) * (max.y - min.y);
  return result;
}

random_vector2_scalar :: fn(max: f32) -> Vector2 {
  mut result: Vector2;
  value := GetRandomValue(0, max as s32);
  result.x = value;
  result.y = value;
  return result;
}

make_particle :: fn(kind: s32, position: Vector2, tint: Color) {
  particle : *mut Particle = malloc(sizeof(Particle));
  if kind == ParticleKind::Smoke {
    max_vel := 3.0;
    particle.position = random_vector2(position, .{x: 0, y: 0}, .{x: max_vel, y: max_vel});
    particle.velocity = random_vector2(.{x: 0.0, y: 0.0}, .{x: -max_vel, y: -1.0}, .{x: max_vel, y: max_vel});
    burst : s32 = (GetRandomValue(0, 1) * smoke_particle_max_burst) as s32;
    if can_burst && burst > 1 {
      can_burst = false;
      for _ in 0..burst { make_particle(kind, position, tint); }
      can_burst = true;
    }

    particle.color = ColorAlphaBlend(get_random_grayscale_color_with_per_channel_variance(50.0), tint, WHITE);
    particle.render_info = &mut smoke_particle_render_info;
    particle.lifetime = 1.0;
    particle.scale = smoke_particle_init_scale.scale(GetRandomValue(0, 6400));
    particle.spawn_time = GetTime();
  } else if kind == ParticleKind::Fire {
    max_spread := 24.0;
    particle.position = random_vector2(position, Vector2::zero(), Vector2::scalar(max_spread));

    burst : s32 = 24;

    if can_burst && burst > 1 {
      can_burst = false;
      for _ in 0..burst { make_particle(kind, position, tint); }
      can_burst = true;
    }

    particle.render_info = &mut fire_particle_render_info;
    particle.lifetime = 4.0 / 60;
    particle.scale = .{x: 16.0, y: 16.0};
    particle.spawn_time = GetTime();
    particle.color = tint;
  }

  particles.push(particle);
}

update_particle :: fn(particle: *mut Particle) -> bool {
  time := GetTime();
  if particle.kind == ParticleKind::Smoke {
    particle.position = particle.position.add(particle.velocity);
    particle.velocity = particle.velocity.scale(0.98);

    t := particle.spawn_time / time;
    scale := lerp(smoke_particle_init_scale.x * 0.15, smoke_particle_init_scale.x, t);
    delta := time - particle.spawn_time;
    particle.color.a = clamp(particle.color.a - 12, 0, 255);
    if delta > particle.lifetime {
      return t < 0.1 && particle.color.a == 0;
    }
    particle.scale = .{x: scale, y: scale};
  } else if  particle.kind == ParticleKind::Fire {
    particle.scale.x *= 0.95;
    particle.scale.y *= 0.95;
    if particle.color.a > 0 {
      particle.color.a /= 2;
    }
  }
  return true;
}

enemy_move_towards_or_get_new_target :: fn(enemy: *mut Enemy) {
  mut position: Vector2 = .{x: enemy.rect.x, y: enemy.rect.y};
  if position.distance(enemy.target) < 5 || zero.equals(enemy.target) {
    enemy.target = .{ 
      x: GetRandomValue(0, 1) * screen_width, 
      y: GetRandomValue(0, 1) * screen_height 
    };
    enemy.target.y = clamp(enemy.target.y, 0, screen_height / 1.5);
    enemy.speed = GetRandomValue(0, 1) * enemy_max_speed * round_index;
  } else {
    direction := enemy.target.sub(position).normalize();
    position = direction.scale(enemy.speed).add(position);
    position.y = clamp(position.y, 0, screen_height / 1.5);
    enemy.rect.x = position.x;
    enemy.rect.y = position.y;
  }
}

make_enemy :: fn() {
  x: f32 = GetRandomValue(0, 1) * screen_width;
  y: f32 = GetRandomValue(0, 1) * screen_height;
  mut rect: Rectangle = .{x: x, y: y, width: enemy_scale, height: enemy_scale};

  rect.x = clamp(rect.x, 0, screen_width);
  rect.y = clamp(rect.y, 0, screen_height / 1.5);

  enemy := new(Enemy::create(rect, &mut enemy_render_info));

  enemy_move_towards_or_get_new_target(enemy);

  for _ in 0..10 {
    make_particle(ParticleKind::Smoke, .{x: rect.x, y: rect.y}, BLUE);
  }

  enemy.id = enemies.length;
  enemies.push(enemy);
}

make_bullet :: fn(x: f32, y: f32, rotation: f32) {
  mut offset: f32;
  if character.cannon_idx == 0 {
    offset = -(bullet_scale / 2.0);
  } else {
    offset = (bullet_scale / 2.0);
  }
  rect: Rectangle = .{x: x + offset, y: y - bullet_scale, width: bullet_scale, height: bullet_scale};
  radians := (rotation / 360) * 3.14159265 * 2;
  direction: Vector2 = .{x: -(sin(radians) as f32), y: cos(radians) as f32};
  start_velocity := direction.scale(bullet_start_velocity);
  
  { 
    bullets.push(new(Bullet::create(rect, &mut bullet_render_info, start_velocity, rotation)));
  }

  make_particle(ParticleKind::Smoke, .{x: rect.x, y: rect.y}, PINK);
  fire_pos: Vector2 = .{x: rect.x - (bullet_scale * 0.5) + character.horizontal_velocity, y: rect.y - bullet_scale};
  make_particle(ParticleKind::Fire, fire_pos, WHITE);
}

draw_background :: fn() {
  bg_color = Color::lerp(bg_color, target_bg_color, 0.25);
  
  DrawTexturePro(background_texture, background_rect, .{
    x: 0.0,
    y: 0.0,
    width: screen_width, 
    height: screen_height
  }, .{x: 0.0, y: 0.0}, 0.0, bg_color);

  now : f32 = GetTime() as f32; 
  t := (now - game_start_time) / fade_in_length;
  if scene == Scene::Game && t < fade_in_length {
    DrawRectangle(0, 0, screen_width as s32, screen_height as s32, Color::lerp(BLACK, CLEAR, t));
  }
}

draw_game :: fn() {

  if IsWindowResized() {
    character.rect.y = screen_height / 1.2;
  }

  for bullet in bullets {
    DrawTexturePro(bullet.render_info.texture, bullet.render_info.tex_rect, bullet.rect, bullet.origin, bullet.rotation, WHITE);
  }

  for enemy in enemies {
    DrawTexturePro(enemy.render_info.texture, enemy.render_info.tex_rect, enemy.rect, enemy.origin, enemy.rotation, WHITE);
  }

  for particle in particles {
    rect : Rectangle = .{
      x: particle.position.x,
      y: particle.position.y,
      width: particle.scale.x,
      height: particle.scale.y,
    };
    DrawTexturePro(particle.render_info.texture, particle.render_info.tex_rect, rect, zero, 0.0, particle.color);
  }
  for particle in text_particles {
    DrawText(particle.text.data, particle.position.x as s32, particle.position.y as s32, particle.font_size, particle.color);
  }

  DrawTexturePro(character.texture, character.tex_rect, character.rect, character.origin, character.rotation, WHITE);

  sprintf(format_buffer,  "Score:            %d"c, score);
  DrawText(format_buffer, 0, 0, 24, ui_text_color);

  sprintf(format_buffer,  "Count:            %d"c, targets_destroyed);
  DrawText(format_buffer, 0, 30, 24, ui_text_color);

  if ui_text_color.a > 0 then
    ui_text_color = ui_text_color.with_alpha(ui_text_color.a - 5);
}

BulletRoutine :: struct {
  count : s32,
  timer: Timer,
  interval: f32,
}

impl BulletRoutine {
  spawn :: fn(*mut self) -> bool {
    self.timer.interval = self.interval;
    if self.timer.tick() {
      self.count -= 1;
      PlaySound(shot_sound);
      make_bullet(character.rect.x, character.rect.y, character.rotation); 
      if self.count == 0 {
        character.cannon_idx = !character.cannon_idx;
        return true;
      }
      return false;
    } else {
      return false;
    }
  }
}

mut bullet_routine : BulletRoutine;


on_bullet_fizzle :: fn() {
  score *= 0.85;
  ui_text_color.a = 255;
  PlaySound(thud_sound);
  PlaySound(fail_sound);
  bg_color.r += 55;

  // :GameFailure
  // TODO: do we want this?
  // misses_this_round++;
  // if misses_this_round >= 3 {
  //   round_failed = true;
  //   scene = Scene::MainMenu;
  // }
}

on_enemy_killed :: fn(enemy: *mut Enemy, n_enemies_killed_this_frame: s32) {
  PlaySound(explosion_sound);
  make_particle(ParticleKind::Fire, .{x: enemy.rect.x, y: enemy.rect.y}, WHITE);
  for _ in 0..4 {
    make_particle(ParticleKind::Smoke, .{x: enemy.rect.x, y: enemy.rect.y}, spark_color);
  }
  // bonus score.
  if n_enemies_killed_this_frame >= enemies.length {
    bg_color.g += 55;
    score *= 1.2;
  }
}

mut space_down := false;

update_game :: fn() {

  // advance level.
  if targets_destroyed >= round_base_num_enemies_to_advance * round_index {
    if round_finish_start_time == -1.0 { round_finish_start_time = GetTime(); }
    now : f32 = GetTime() as f32;
    if now - round_finish_start_time < 2.0 {
      mut v := round_index + 1;

      mut style := jiggly_text_style;
      style.foreground = Color::lerp(GREEN, CYAN, 0.5);
      style.font_size = 18;
      style.jiggle_intensity = 2;
      style.jiggle_rate = 10;

      mut text := format("Round: %...", (v,), FormatOptions::default());
      text_w := measure_jiggly_text(text, style) / 4.0;
      jiggly_text(text, get_center_screen_rect(24, 12, .{x: -(text_w * 3), y: 0.0}), style);
      text.deinit();

      v = round_base_num_enemies_to_advance * round_index;
      text = format("Requires % enemies to pass.", (v,), FormatOptions::default());
      jiggly_text(text, get_center_screen_rect(24, 12, .{x: -(text_w * 3), y: 24}), style);
      text.deinit();
    } else {
      misses_this_round = 0;
      round_index++;
      targets_destroyed = 0;
      round_finish_start_time = -1.0;
    }
  }

  if IsKeyReleased(KeyboardKey::KEY_SPACE) && space_down {
    space_down = false;
    character.cannon_idx = !character.cannon_idx;
  }

  if bullet_routine.count > 0 && IsKeyDown(KeyboardKey::KEY_SPACE) {
    space_down = true;
    bullet_routine.spawn();
  } else {
    space_down = false;
    bullet_routine.count = 0;
  }

  if timer.tick() {
    expected_length := 3 * round_index;
    if enemies.length < expected_length  {
      for i in 0..expected_length/2 {
        make_enemy();
      }
    }
    // :GameFailure
    // TODO: do we want this failure case? it felt really bad when we added these.
    // } else {
    //   round_failed = true;
    //   scene = Scene::MainMenu;
    // }
  }
  mut moved := false;
  if IsKeyDown(KeyboardKey::KEY_A) {
    character.horizontal_velocity -= character.speed;
    moved = true;
  }
  if IsKeyDown(KeyboardKey::KEY_D) {
    character.horizontal_velocity += character.speed;
    moved = true;
  }

  if moved || character.horizontal_velocity > 0 || character.horizontal_velocity < 0 {
    for i in 0..fabs(character.horizontal_velocity * smoke_particle_density) as s64 {
      make_particle(ParticleKind::Smoke, .{
        x: character.rect.x - 10,
        y: character.rect.y + (character.rect.height / 3),
      }, player_smoke_color);
    }
  }

  character.rect.x += character.horizontal_velocity;
  character.horizontal_velocity *= player_drag;
  tilt := (character.horizontal_velocity / character.speed) * max_tilt / 4;
  character.rotation = clamp(tilt, -max_tilt, max_tilt);

  if IsKeyPressed(KeyboardKey::KEY_SPACE) && bullet_routine.count == 0 {
    bullet_routine.count = bullet_max_burst;
  }

  mut dead_bullets: List!<*mut Bullet>;
  mut dead_enemies: List!<*mut Enemy>;

  // update enemy transforms.
  for enemy in enemies {
    enemy_move_towards_or_get_new_target(enemy);
    enemy.rotation += enemy_rotation_speed;
    if enemy.rotation >= 360.0 {
      enemy.rotation = 0.0;
    }
  }

  screen_rect : Rectangle = .{
    x: 0.0, y: 0.0,
    width: GetScreenWidth() as f32,
    height: GetScreenHeight() as f32,
  };

  // update bullets and perform collision against enemies.
  for bullet in bullets {
    bullet.rect.y += bullet.velocity.y;
    bullet.rect.x += bullet.velocity.x;
    bullet.velocity.x *= bullet_drag;
    bullet.velocity.y *= bullet_drag;

    // mark stopped bullets or bullets off-screen as dead.
    if !CheckCollisionRecs(screen_rect, bullet.rect) || bullet.velocity.length_sqr() <= bullet_min_velocity {
      dead_bullets.push(bullet);
      bullet.dead = true;
      on_bullet_fizzle();
      continue;
    }

    bullet_rect := bullet.rect;
    bullet_rect.width *= 0.5;
    bullet_rect.x += bullet_rect.width;

    n_enemies_killed_this_frame : s32 = 0;
    for enemy in enemies {
      x_diff := enemy.rect.x + enemy.rect.width / 2 - bullet_rect.x;
      y_diff := enemy.rect.y - enemy.rect.height / 2 - bullet_rect.y;
      sqr_dist := x_diff * x_diff + y_diff * y_diff;
      radius := (enemy.rect.width + bullet_rect.height) / 2;
      if sqr_dist < radius * radius {
        if !enemy.dead {
          enemy.dead = true;
          dead_enemies.push(enemy);
          n_enemies_killed_this_frame++;
          on_enemy_killed(enemy, n_enemies_killed_this_frame);
        }
        if !bullet.dead {
          dead_bullets.push(bullet);
          bullet.dead = true;
        }
        targets_destroyed++;

        enemy_pos : Vector2 = .{x: enemy.rect.x, y: enemy.rect.y};
        u8acter_pos : Vector2 = .{x: character.rect.x, y: character.rect.y};
        distance := enemy_pos.distance(u8acter_pos);
        amount : s32 = (distance * round_index) as s32;
        score += amount;
        ui_text_color.a = 255 as u8;
        
        mut text := format("+%", (amount,), FormatOptions::default());
        make_text_particle(text, 12 + clamp(0, 8, distance), enemy_pos, clamp(0.5, 3.5, distance as f32) as f32);
        text.deinit();
        break;
      }
    }
  }


  while !dead_bullets.is_empty() {
    free(dead_bullets.pop());
  }

  while !dead_enemies.is_empty() {
    free(dead_enemies.pop());
  }

  mut dead_particles: List!<*mut Particle>;
  for particle in particles {
    if !update_particle(particle)
      then dead_particles.push(particle);
  }

  while !dead_particles.is_empty() {
    free(dead_particles.pop());
  }

  mut dead_text_particles : List!<*mut TextParticle>;
  for particle in text_particles {
    particle.position = particle.position.add(Vector2::scalar(0.1));
    now := GetTime() as f32;
    particle.color.a = lerp(particle.color.a, 0, (now - particle.spawn_time) / particle.lifetime);
    if now - particle.spawn_time >= particle.lifetime {
      dead_text_particles.push(particle);
    }
  }

  while !dead_text_particles.is_empty() {
    free(dead_text_particles.pop());
  }
}

init :: fn() {
  background_texture = LoadTexture("res/background.png"c);

  screen_width =  GetScreenWidth() as f32;
  screen_height = GetScreenHeight() as f32;

  background_rect = .{
    x: 0.0,
    y: 0.0,
    width: background_texture.width as f32,
    height: background_texture.height as f32
  };

  character.texture = LoadTexture("res/character.png"c);

  player_smoke_color = CYAN;
  player_smoke_color.r /= 2;
  player_smoke_color.g /= 2;
  player_smoke_color.b /= 2;

  w := character.texture.width  as f32;
  h := character.texture.height as f32;
  character.tex_rect = .{
    x: 0, y: 0,
    width: w, height: h
  };

  character.rect = .{
    x: screen_width / 2,
    y: screen_height / 1.25,
    width: 64, height: 64
  };

  character.origin = .{ x: character.rect.width / 2, y: character.rect.height / 2 };

  bullet_render_info = RenderInfo::create(LoadTexture("res/bullet.png"c));
  enemy_render_info = RenderInfo::create(LoadTexture("res/enemy.png"c));
  smoke_particle_render_info = RenderInfo::create(LoadTexture("res/smoke.png"c));
  fire_particle_render_info = RenderInfo::create(LoadTexture("res/fire.png"c));
  timer.interval = 3;

}

init_audio :: fn() {
  InitAudioDevice();
  if !IsAudioDeviceReady() {
    printf("Failed to initialize audio device.\n"c);
    exit(1);
  }
  // init audio
  menu_music = LoadMusicStream("res/music1.wav"c);
  game_music = LoadMusicStream("res/music.wav"c);
  menu_music.looping = true;
  game_music.looping = true;

  SetMusicVolume(menu_music, 1.0);
  SetMusicVolume(game_music, 1.5);

  PlayMusicStream(menu_music);
  current_music = &mut menu_music;

  shot_sound = LoadSound("res/shot.wav"c);
  SetSoundVolume(shot_sound, 5.0);

  explosion_sound = LoadSound("res/explosion_low.wav"c);
  SetSoundVolume(explosion_sound, 1);

  thud_sound = LoadSound("res/thud.wav"c);
  SetSoundVolume(thud_sound, 0.4);

  fail_sound = LoadSound("res/fail.wav"c);
  SetSoundVolume(fail_sound, 0.05);
  SetMasterVolume(0.75);
}

reset_game_state :: fn() {
  misses_this_round = 0;
  score = 0;
  targets_destroyed = 0;
  num_enemies_spawned = 0;
  can_burst = true;
  timer.last_tick_time = GetTime();


  while bullets.length > 0 {
    n := bullets.pop();
  }
  while particles.length > 0 {
    n := particles.pop();
  }
  while enemies.length > 0 {
    n := enemies.pop();
  }
  while text_particles.length > 0 {
    n := text_particles.pop();
    n.text.deinit();
  }
}

swap_music :: fn() {
  StopMusicStream(*current_music);
  if scene == Scene::MainMenu {
    current_music = &mut menu_music;
  } else {
    current_music = &mut game_music;
  }
  PlayMusicStream(*current_music);
}

draw_main_menu :: fn() {
  width : f32 = 72;
  height : f32 = 48;

  start_button_rect := Rectangle .{
    x: screen_width / 2 - (width / 2), 
    y: screen_height / 1.2 - (height / 2), 
    width: width,
    height: height
  }
  
  if button("Start game", start_button_rect, button_style) {
    scene = !scene;
    game_start_time = GetTime();
    reset_game_state();
    bg_color = BLACK;
    round_index = 0;
    round_failed = false;
  }

  rect : Rectangle = .{
    x: screen_width / 7,
    y: screen_height / 10,
    width: screen_width / 2,
    height: screen_height / 10
  };

  jiggly_text("target practice", rect, jiggly_text_style);

  if round_failed {
    mut style := jiggly_text_style;
    mut rect: Rectangle = .{
      x: screen_width / 7,
      y: screen_height / 3,
      width: screen_width / 2,
      height: screen_height / 10
    };
    style.foreground = RED;
    jiggly_text("You Lost!", rect, style);
    rect.y += 128;
    style.font_size = 12;

    style.foreground = CYAN;
    style.jiggle_intensity = 3.0;
    style.jiggle_rate = 1.0;
    mut text := qformat("reached round %,", (round_index,));
    jiggly_text(text, rect, style);
    text.deinit();
    rect.y += 64;
    text = qformat("% targets taken down", (targets_destroyed,));
    jiggly_text(text, rect, style);
    text.deinit();
    rect.y += 64;
    text = qformat("scored % points", (score,));
    jiggly_text(text, rect, style);
    text.deinit();
  }
}

mut music_muted := false;

draw_game_menu :: fn() {
  width : f32 = 72 / 3;
  height : f32 = 48 / 3;

  mut style := button_style;
  style.use_jiggly_text = false;
  swap_rect := Rectangle .{x: screen_width - width * 8, y: screen_height - height * 1.2, width: width, height: height};

  if button("swap music", swap_rect, style) {
    StopMusicStream(*current_music);
    if current_music == &mut game_music {
      current_music = &mut menu_music;
    } else {
      current_music = &mut game_music;
    }
    PlayMusicStream(*current_music);
  }

  style = button_style;
  style.use_jiggly_text = false;
  mute_rect := Rectangle .{x: screen_width - width * 3, y: screen_height - height * 1.2, width: width, height: height};

  if button("mute music", mute_rect, style) {
    if music_muted {
      PlayMusicStream(*current_music);
      music_muted = false;
    } else {
      music_muted = true;
      StopMusicStream(*current_music);
    }
  }
}

main :: fn() {
  jiggly_text_style.highlighted = CYAN.with_alpha(24);
  button_style.highlighted = CYAN.with_alpha(24);
  format_buffer = malloc(sizeof(u8) * 1024);

  InitWindow(800, 600, "target practice"c);
  SetTargetFPS(60);

  init();
  init_audio();

  while !WindowShouldClose() {
    screen_width = GetScreenWidth();
    screen_height = GetScreenHeight();

    UpdateMusicStream(*current_music);
    BeginDrawing();
    // BeginMode2D(camera);
      ClearBackground(bg_color);
      draw_background();
      DrawFPS(0, 72);
      if scene == Scene::MainMenu {
        draw_main_menu();
      } else {
        if IsKeyPressed(KeyboardKey::KEY_BACKSPACE) {
          scene = Scene::MainMenu;
          swap_music();
        }
        update_game();
        draw_game();
        draw_game_menu();
      }
      // DrawText("This game is totally broken right now!!\n fix me please\n Raylib bindings are the source of\n the problem, they changed\n And the previous bindings,\n were totally wrong\n\n It's mostly the Timer object I think\n and the Camera.", 0, 120, 32, RED);
    // EndMode2D();
    EndDrawing();
  }

  CloseAudioDevice();
  free(format_buffer);
  return;
}