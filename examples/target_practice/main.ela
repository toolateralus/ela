#import raylib;
#import core;

#compiler_flags "-g"

/*
  * TODO
  * We should probably make the game a bit more balanced in score and add some goals. *
  ? - Rounds? increased spawn rate, rogue like- advancing by completing N clears, and when you fail to clear it in X time per round, you go back to the start.
  ? - High score leaderboard
*/

Scene :: enum {
  MainMenu,
  Game,
}

button_style : Style = {
  WHITE,
  CLEAR,
  CYAN.with_alpha(24),
  20
};

jiggly_text_style : Style = {
  WHITE,
  CLEAR,
  CYAN.with_alpha(24),
  40
};

round_base_num_enemies_to_advance: int = 6;
round_index : int = 1;
round_failed := false;
camera: Camera2D;
scene: int = Scene.MainMenu;

max_tilt : float = 16;
screen_width : float;
screen_height : float;
zero : Vector2 = {0, 0};

player_drag := 0.87;

bullet_start_velocity := -15.0;
bullet_min_velocity := 0.3;
bullet_scale := 32.0;
bullet_drag := 0.99;

enemy_scale := 48.0;
enemy_rotation_speed := 13.0;
enemy_max_speed := 1.0;

score : int  = 0;
targets_destroyed : int = 0;
num_enemies_spawned : int = 0;
can_burst := true;

bullet_max_burst: int = 3;

smoke_particle_init_scale : Vector2 = {15, 15};
smoke_particle_max_burst := 6;
smoke_particle_density := 1.5;

player_smoke_color : Color;

fire_particle_density := 3.0;
fire_particle_max_burst := 6;

game_start_time : float;
fade_in_length : float = 3.0;
misses_this_round : s8 = 0;
round_finish_start_time : float = -1;

background_rect : Rectangle;

format_buffer: char* = malloc(sizeof(char) * 1024);

game_music: Music;
menu_music: Music;
current_music: Music*;

spark_color : Color = {
  YELLOW.r,
  YELLOW.g,
  YELLOW.b,
  (u8)25
};

bg_color : Color = BLACK;

target_bg_color : Color = {
  (u8)75, (u8)75, (u8)75,(u8)255,
}

ParticleKind :: enum {
  Smoke,
  Fire,
}

RenderInfo :: struct {
  texture: Texture2D;
  tex_rect : Rectangle;
  #ctor :: (tex: Texture2D) {
    w := (float)tex.width;
    h := (float)tex.height;
    tex_rect = {
      0, 0,
      w, h
    };
    texture = tex;
  }
}

Particle :: struct {
  render_info: RenderInfo*;
  velocity: Vector2;
  spawn_time: float;
  lifetime: float;
  kind: int;
  position: Vector2;
  scale: Vector2;
  color: Color = WHITE;
}

Character :: struct {
  texture: Texture2D;
  rect: Rectangle;
  tex_rect : Rectangle;
  horizontal_velocity: float;
  speed: float = 2.25;
  origin: Vector2;
  cannon_idx: int;
  rotation: float;
}

Bullet :: struct {
  velocity: Vector2;
  speed: float = 2.25;
  rotation: float;
  dead : bool = false;
  render_info: RenderInfo*;
  origin: Vector2;
  rect: Rectangle;
  #ctor :: (_rect: Rectangle, info: RenderInfo*, vel : Vector2, rot: float) {
    rotation = rot;
    render_info = info;
    rect = _rect;
    origin = { rect.width / 2, rect.height / 2 };
    velocity = vel;
  }
}

Enemy :: struct {
  id: int;
  dead: bool = false;
  rect: Rectangle;
  origin: Vector2;
  render_info : RenderInfo*;
  target: Vector2;
  rotation: float;
  speed: float;
  #ctor :: (_rect: Rectangle, info: RenderInfo*) {
    render_info = info;
    rect = _rect;
    origin = { rect.width / 2, rect.height / 2 };
  }
};


TextParticle :: struct {
  position: Vector2;
  font_size : int;
  text: string;
  spawn_time: float;
  lifetime: float;
  color: Color = WHITE;
}


timer : Timer;

bullet_render_info: RenderInfo*;
enemy_render_info: RenderInfo*;
smoke_particle_render_info: RenderInfo*;
fire_particle_render_info: RenderInfo*;
background_texture : Texture2D;

character : Character;
bullets: Bullet*[];
enemies: Enemy*[];
particles: Particle*[];
text_particles: TextParticle*[];

shot_sound: Sound;
explosion_sound: Sound;
thud_sound: Sound;
fail_sound: Sound;

ui_text_color : Color = WHITE;

get_center_screen_rect:: (width: float, height, offset: Vector2) -> Rectangle {
  return #make(Rectangle, {
    screen_width / 2 + offset.x,
    screen_width / 2 + offset.y,
    width,
    height
  });
}

make_text_particle :: (text: string, font_size: int, position: Vector2, lifetime: float) {
  particle := new TextParticle();
  particle.position = position;
  particle.font_size = font_size;
  particle.text = text;
  particle.spawn_time = GetTime();
  particle.lifetime = lifetime;
  text_particles ~= particle;
}

// great function name
get_random_grayscale_color_with_per_channel_variance :: (_variance: float = 50.0) -> Color {
  gray_value : u8 = (u8) clamp(randf() * 255.0, 0, 255);
  variance :: () -> u8 { return (u8)randf() * _variance; };
  r : u8 = (u8) clamp(gray_value + variance(), 0, 255);
  g : u8 = (u8) clamp(gray_value + variance(), 0, 255);
  b : u8 = (u8) clamp(gray_value + variance(), 0, 255);
  return #make(Color, {r, g, b, (u8)255});
}

random_vector2 :: (origin: Vector2, max: float) -> Vector2 {
  result: Vector2;
  result.x = origin.x + randf() * max;
  result.y = origin.y + randf() * max;
  return origin;
}

random_vector2 :: (origin: Vector2, min, max) -> Vector2 {
  result: Vector2;
  result.x = origin.x + min.x + randf() * (max.x - min.x);
  result.y = origin.y + min.y + randf() * (max.y - min.y);
  return result;
}

make_particle :: (kind: int, position: Vector2, tint: Color) {
  particle := new Particle;

  if kind == ParticleKind.Smoke {
    max_vel := 3.0;
    particle.position = random_vector2(position, max_vel);
    particle.velocity = random_vector2({0.0, 0.0}, {-max_vel, -1.0}, {max_vel, max_vel});
    burst : int = (int)randf() * smoke_particle_max_burst;
    if can_burst && burst > 1 {
      can_burst = false;
      for _ in 0..burst { make_particle(kind, position, tint); }
      can_burst = true;
    }

    particle.color = ColorAlphaBlend(get_random_grayscale_color_with_per_channel_variance(50.0), tint, WHITE);
    particle.render_info = smoke_particle_render_info;
    particle.lifetime = 1.0;
    particle.scale = smoke_particle_init_scale * randf() * 6400.0;
    particle.spawn_time = GetTime();
  } else if kind == ParticleKind.Fire {
    max_spread := 24.0;
    particle.position = random_vector2(position, max_spread);

    burst : int = 24;

    if can_burst && burst > 1 {
      can_burst = false;
      for _ in 0..burst { make_particle(kind, position, tint); }
      can_burst = true;
    }

    particle.render_info = fire_particle_render_info;
    particle.lifetime = 4.0 / 60; // ? show for one frame?
    particle.scale = {16.0, 16.0}; // ? this right?
    particle.spawn_time = GetTime();
    particle.color = tint;
  }

  particles ~= particle;
}

update_particle :: (particle: Particle*) -> bool {
  time := GetTime();
  if particle.kind == ParticleKind.Smoke {
    particle.position = Vector2Add(particle.position, particle.velocity);
    particle.velocity = Vector2Scale(particle.velocity, 0.98)
    t := particle.spawn_time / time;
    scale := lerp(smoke_particle_init_scale.x * 0.15, smoke_particle_init_scale.x, t);
    delta := time - particle.spawn_time;
    particle.color.a = clamp(particle.color.a - 12, 0, 255);
    if delta > particle.lifetime {
      return t < 0.1 && particle.color.a == 0;
    }
    particle.scale = {scale, scale};
  } else if  particle.kind == ParticleKind.Fire {
    particle.scale.x *= 0.95;
    particle.scale.y *= 0.95;
    if particle.color.a > 0 {
      particle.color.a /= 2;
    }
  }
  return true;
}

enemy_move_towards_or_get_new_target :: (enemy: Enemy*) {
  position : Vector2 = {enemy.rect.x, enemy.rect.y};
  if Vector2Distance(position, enemy.target) < 5 || Vector2Equals(zero, enemy.target) {
    enemy.target = { randf() * screen_width, randf() * screen_height };
    enemy.target.y = clamp(enemy.target.y, 0, screen_height / 1.5);
    enemy.speed = randf() * enemy_max_speed * round_index;
  } else {
    direction := Vector2Normalize(Vector2Subtract(enemy.target, position));
    position = Vector2Add(position, Vector2Scale(direction, enemy.speed));
    position.y = clamp(position.y, 0, screen_height / 1.5);
    enemy.rect.x = position.x;
    enemy.rect.y = position.y;
  }
}

make_enemy :: () {
  x := randf() * screen_width;
  y := randf() * screen_height;
  rect : Rectangle = {x, y, enemy_scale, enemy_scale};

  rect.x = clamp(rect.x, 0, screen_width);
  rect.y = clamp(rect.y, 0, screen_height / 1.5);

  enemy := new Enemy(rect, enemy_render_info);
  enemy_move_towards_or_get_new_target(enemy);

  for _ in 0..10 {
    make_particle(ParticleKind.Smoke, {rect.x, rect.y}, BLUE);
  }

  enemy.id = enemies.length;
  enemies ~= enemy;
}

make_bullet :: (x: float, y, rotation) {
  offset: float;
  if character.cannon_idx == 0 {
    offset = -(bullet_scale / 2.0)
  } else {
    offset = (bullet_scale / 2.0);
  }
  rect : Rectangle = {x + offset, y - bullet_scale, bullet_scale, bullet_scale};
  radians := (rotation / 360) * 3.14159265 * 2;
  direction : Vector2 = {-(float)sin(radians), (float)cos(radians)};
  start_velocity := Vector2Scale(direction, bullet_start_velocity);
  bullets ~= new Bullet(rect, bullet_render_info, start_velocity, rotation);
  make_particle(ParticleKind.Smoke, {rect.x, rect.y}, PINK);
  fire_pos : Vector2 = {rect.x - (bullet_scale * 0.5) + character.horizontal_velocity, rect.y - bullet_scale};
  make_particle(ParticleKind.Fire, fire_pos, WHITE);
}

draw_background :: () {
  bg_color = color_lerp(bg_color, target_bg_color, 0.25);
  DrawTexturePro(background_texture, background_rect, {0.0, 0.0, screen_width, screen_height}, {0.0, 0.0}, 0.0, bg_color);
  now : float = (float)GetTime();
  t := (now - game_start_time) / fade_in_length;
  if scene == Scene.Game && t < fade_in_length {
    DrawRectangle(0, 0, (int)screen_width, (int)screen_height, color_lerp(BLACK, CLEAR, t));
  }
}

draw_game :: () {
  if IsWindowResized() {
    character.rect.y = screen_height / 1.2;
  }

  for bullet in bullets {
    DrawTexturePro(bullet.render_info.texture, bullet.render_info.tex_rect, bullet.rect, bullet.origin, bullet.rotation, WHITE);
  }
  for enemy in enemies {
    DrawTexturePro(enemy.render_info.texture, enemy.render_info.tex_rect, enemy.rect, enemy.origin, enemy.rotation, WHITE);
  }
  for particle in particles {
    rect : Rectangle = {
      particle.position.x,
      particle.position.y,
      particle.scale.x,
      particle.scale.y,
    };
    DrawTexturePro(particle.render_info.texture, particle.render_info.tex_rect, rect, zero, 0.0, particle.color);
  }
  for particle in text_particles {
    DrawText(particle.text.data, (int)particle.position.x, (int)particle.position.y, particle.font_size, particle.color);
  }

  DrawTexturePro(character.texture, character.tex_rect, character.rect, character.origin, character.rotation, WHITE);

  sprintf(format_buffer,  "Score:            %d", score);
  DrawText(format_buffer, 0, 0, 24, ui_text_color);

  sprintf(format_buffer,  "Count:            %d", targets_destroyed);
  DrawText(format_buffer, 0, 30, 24, ui_text_color);

  if ui_text_color.a > 0 then
    ui_text_color = ui_text_color.with_alpha(ui_text_color.a - 5);
}

BulletRoutine :: struct {
  count : int = 0;
  timer: Timer;
  interval: float = 0.1;
  spawn :: () -> bool {
    timer.interval = interval;
    if timer.tick() {
      count--;
      PlaySound(shot_sound);
      make_bullet(character.rect.x, character.rect.y, character.rotation); 
      if count == 0 {
        character.cannon_idx = !character.cannon_idx;
        return true;
      }
      return false;
    } else {
      return false;
    }
  }
}

bullet_routine : BulletRoutine;


on_bullet_fizzle :: () {
  score *= 0.85;
  ui_text_color.a = 255;
  PlaySound(thud_sound);
  PlaySound(fail_sound);
  bg_color.r += 55;

  // :GameFailure
  // TODO: do we want this?
  // misses_this_round++;
  // if misses_this_round >= 3 {
  //   round_failed = true;
  //   scene = Scene.MainMenu;
  // }
}

on_enemy_killed :: (enemy: Enemy*, n_enemies_killed_this_frame: int) {
  PlaySound(explosion_sound);
  make_particle(ParticleKind.Fire, {enemy.rect.x, enemy.rect.y}, WHITE);
  for _ in 0..4 {
    make_particle(ParticleKind.Smoke, {enemy.rect.x, enemy.rect.y}, spark_color);
  }
  // bonus score.
  if n_enemies_killed_this_frame >= enemies.length {
    bg_color.g += 55;
    score *= 1.2;
  }
}

space_down := false;

update_game :: () {

  // advance level.
  if targets_destroyed >= round_base_num_enemies_to_advance * round_index {
    if round_finish_start_time == -1.0 { round_finish_start_time  = (float)GetTime(); }
    now : float = (float)GetTime();
    if now - round_finish_start_time < 2.0 {
      text : string = $"Round: {round_index + 1}...";
      style := jiggly_text_style;
      style.foreground = color_lerp(GREEN, CYAN, 0.5);
      style.font_size = 18;
      style.jiggle_intensity = 2;
      style.jiggle_rate = 10;

      text_w := measure_jiggly_text(text.data, style) / 4.0;
      jiggly_text(text.data, get_center_screen_rect(24, 12, {-(text_w * 3), 0.0}), style);

      text = $"Requires {round_base_num_enemies_to_advance * round_index} enemies to pass.";
      jiggly_text(text.data, get_center_screen_rect(24, 12, {-(text_w * 3), 24}), style);

    } else {
      misses_this_round = 0;
      round_index++;
      targets_destroyed = 0;
      round_finish_start_time = -1.0;
    }
  }

  if IsKeyReleased(Key.Space) && space_down {
    space_down = false;
    character.cannon_idx = !character.cannon_idx;
  }

  if bullet_routine.count > 0 && IsKeyDown(Key.Space) {
    space_down = true;
    bullet_routine.spawn();
  } else {
    space_down = false;
    bullet_routine.count = 0;
  }

  if timer.tick() {
    expected_length := 3 * round_index;
    if enemies.length < expected_length  {
      for i in 0..expected_length/2 {
        make_enemy();
      }
    }
    // :GameFailure
    // TODO: do we want this failure case? it felt really bad when we added these.
    // } else {
    //   round_failed = true;
    //   scene = Scene.MainMenu;
    // }
  }
  moved := false;
  if IsKeyDown(Key.A) {
    character.horizontal_velocity -= character.speed;
    moved = true;
  }
  if IsKeyDown(Key.D) {
    character.horizontal_velocity += character.speed;
    moved = true;
  }

  if moved || character.horizontal_velocity > 0 || character.horizontal_velocity < 0 {
    for i in 0..(int)fabs(character.horizontal_velocity * smoke_particle_density) {
      make_particle(ParticleKind.Smoke, {
        character.rect.x - 10,
        character.rect.y + (character.rect.height / 3),
      }, player_smoke_color);
    }
  }

  character.rect.x += character.horizontal_velocity;
  character.horizontal_velocity *= player_drag;
  tilt := (character.horizontal_velocity / character.speed) * max_tilt / 4;
  character.rotation = clamp(tilt, -max_tilt, max_tilt);

  if IsKeyPressed(Key.Space) && bullet_routine.count == 0 {
    bullet_routine.count = bullet_max_burst;
  }

  dead_bullets: Bullet*[];
  dead_enemies: Enemy*[];

  // update enemy transforms.
  for enemy in enemies {
    enemy_move_towards_or_get_new_target(enemy);
    enemy.rotation += enemy_rotation_speed;

    if enemy.rotation >= 360.0 {
      enemy.rotation = 0.0;
    }
  }

  screen_rect : Rectangle = {
    0.0, 0.0,
    (float)GetScreenWidth(),
    (float)GetScreenHeight()
  };

  // update bullets and perform collision against enemies.
  for bullet in bullets {
    bullet.rect.y += bullet.velocity.y;
    bullet.rect.x += bullet.velocity.x;
    bullet.velocity.x *= bullet_drag;
    bullet.velocity.y *= bullet_drag;

    // mark stopped bullets or bullets off-screen as dead.
    if !CheckCollisionRecs(screen_rect, bullet.rect) || Vector2LengthSqr(bullet.velocity) <= bullet_min_velocity {
      dead_bullets ~= bullet
      bullet.dead = true;
      on_bullet_fizzle();
      continue;
    }

    bullet_rect := bullet.rect;
    bullet_rect.width *= 0.5;
    bullet_rect.x += bullet_rect.width;

    n_enemies_killed_this_frame : int = 0;
    for enemy in enemies {
      x_diff := enemy.rect.x + enemy.rect.width / 2 - bullet_rect.x;
      y_diff := enemy.rect.y - enemy.rect.height / 2 - bullet_rect.y;
      sqr_dist := x_diff * x_diff + y_diff * y_diff;
      radius := (enemy.rect.width + bullet_rect.height) / 2;
      if sqr_dist < radius * radius {
        if !enemy.dead {
          enemy.dead = true;
          dead_enemies ~= enemy;
          n_enemies_killed_this_frame++;
          on_enemy_killed(enemy, n_enemies_killed_this_frame);
        }
        if !bullet.dead {
          dead_bullets ~= bullet;
          bullet.dead = true;
        }
        targets_destroyed++;

        enemy_pos : Vector2 = {enemy.rect.x, enemy.rect.y};
        character_pos : Vector2 = {character.rect.x, character.rect.y};
        distance := Vector2Distance(enemy_pos, character_pos);
        amount : int = (int)distance * round_index;
        score += amount
        ui_text_color.a = (u8)255;
        make_text_particle($"+{amount}", 12 + clamp(0, 8, distance), enemy_pos, (float)clamp(0.5, 3.5, (float)distance));
        break;
      }
    }
  }

  for bullet in dead_bullets {
    bullets ~~ bullet;
    delete(bullet);
  }

  for enemy in dead_enemies {
    enemies ~~ enemy;
    delete(enemy);
  }

  dead_particles: Particle*[];
  for particle in particles {
    if !update_particle(particle)
      then dead_particles ~= particle;
  }

  for particle in dead_particles {
    particles ~~ particle;
    delete(particle);
  }

  dead_text_particles : TextParticle*[];
  for particle in text_particles {
    particle.position = Vector2Add(particle.position, {0.1, 0.1});
    now := (float)GetTime();
    particle.color.a = lerp(particle.color.a, 0, (now - particle.spawn_time) / particle.lifetime);
    if now - particle.spawn_time >= particle.lifetime {
      dead_text_particles ~= particle;
    }
  }

  for particle in dead_text_particles {
    text_particles ~~ particle;
    delete(particle);
  }

}

init :: () {



  background_texture = LoadTexture("res/background.png");

  screen_width = (float)GetScreenWidth();
  screen_height = (float)GetScreenHeight();

  background_rect = {
    0.0, 0.0,
    (float)background_texture.width, (float)background_texture.height
  };

  character.texture = LoadTexture("res/character.png");
  player_smoke_color = CYAN;

  player_smoke_color.r /= 2;
  player_smoke_color.g /= 2;
  player_smoke_color.b /= 2;

  w := (float)character.texture.width;
  h := (float)character.texture.height;
  character.tex_rect = {
    0, 0,
    w, h
  };

  character.rect = {
    screen_width / 2,
    screen_height / 1.25,
    64, 64
  };

  character.origin = { character.rect.width / 2, character.rect.height / 2 };

  bullet_render_info = new RenderInfo(LoadTexture("res/bullet.png"));
  enemy_render_info = new RenderInfo(LoadTexture("res/enemy.png"));
  smoke_particle_render_info = new RenderInfo(LoadTexture("res/smoke.png"));
  fire_particle_render_info = new RenderInfo(LoadTexture("res/fire.png"));
  timer.interval = 3;

}

init_audio :: () {
  InitAudioDevice();
  if !IsAudioDeviceReady() {
    printf("Failed to initialize audio device.\n");
    exit(1);
  }
  // init audio
  menu_music = LoadMusicStream("res/music1.wav")
  game_music = LoadMusicStream("res/music.wav");
  menu_music.looping = true;
  game_music.looping = true;

  SetMusicVolume(menu_music, 1.0);
  SetMusicVolume(game_music, 1.5);

  PlayMusicStream(menu_music);
  current_music = &menu_music;

  shot_sound = LoadSound("res/shot.wav");
  SetSoundVolume(shot_sound, 5.0);

  explosion_sound = LoadSound("res/explosion_low.wav");
  SetSoundVolume(explosion_sound, 1);

  thud_sound = LoadSound("res/thud.wav");
  SetSoundVolume(thud_sound, 0.4);

  fail_sound = LoadSound("res/fail.wav");
  SetSoundVolume(fail_sound, 0.05);
  SetMasterVolume(0.75);
}

reset_game_state :: () {
  misses_this_round = 0;
  score = 0;
  targets_destroyed = 0;
  num_enemies_spawned = 0;
  can_burst = true;
  timer.last_tick_time = GetTime();


  while bullets.length > 0 {
    n := ~bullets;
  }
  while particles.length > 0 {
    n := ~particles;
  }
  while enemies.length > 0 {
    n := ~enemies;
  }
  while text_particles.length > 0 {
    n := ~text_particles;
  }
}

swap_music :: () {
  StopMusicStream(*current_music);
  if scene == Scene.MainMenu {
    current_music = &menu_music;
  } else {
    current_music = &game_music;
  }
  PlayMusicStream(*current_music);
}

start_game_callback :: () {
  scene = !scene;
  game_start_time = GetTime();
  reset_game_state();
  bg_color = BLACK;
  round_index = 0;
  round_failed = false;
}

draw_main_menu :: () {
  width : float = 72;
  height : float = 48;
  draw_button("Start game", {screen_width / 2 - (width / 2), screen_height / 1.2 - (height / 2), width, height}, button_style, &start_game_callback);

  rect : Rectangle = {
    screen_width / 7,
    screen_height / 10,
    screen_width / 2,
    screen_height / 10
  };

  jiggly_text("target practice", rect, jiggly_text_style);

  if round_failed {
    style := jiggly_text_style;
    rect : Rectangle = {
      screen_width / 7,
      screen_height / 3,
      screen_width / 2,
      screen_height / 10
    };
    style.foreground = RED;
    jiggly_text("You Lost!", rect, style);
    rect.y += 128;
    style.font_size = 12;

    style.foreground = CYAN;
    style.jiggle_intensity = 3.0;
    style.jiggle_rate = 1.0;
    jiggly_text($"reached round {round_index},".data, rect, style);
    rect.y += 64;
    jiggly_text($"{targets_destroyed} targets taken down".data, rect, style);
    rect.y += 64;
    jiggly_text($"scored {score} points".data, rect, style);

  }
}

switch_music_callback :: () {
  StopMusicStream(*current_music);
  if current_music == &game_music {
    current_music = &menu_music;
  } else {
    current_music = &game_music;
  }
  PlayMusicStream(*current_music);

}

music_muted := false;
mute_music_callback :: () {
  if music_muted {
    PlayMusicStream(*current_music);
    music_muted = false;
  } else {
    music_muted = true;
    StopMusicStream(*current_music);
  }
}

draw_game_menu :: () {
  width : float = 72 / 3;
  height : float = 48 / 3;

  style := button_style;
  style.use_jiggly_text = false;
  draw_button("swap music", {screen_width - width * 8, screen_height - height * 1.2, width, height}, style, &switch_music_callback);

  style = button_style;
  style.use_jiggly_text = false;
  draw_button("mute music", {screen_width - width * 3, screen_height - height * 1.2, width, height}, style, &mute_music_callback);



}

main :: () -> int {
  InitWindow(800, 600, "target practice");
  SetTargetFPS(60);

  init();
  init_audio();
  // SetWindowState(ConfigFlags.WindowResizable);

  while !WindowShouldClose() {
    screen_width = GetScreenWidth();
    screen_height = GetScreenHeight();


    UpdateMusicStream(*current_music);
    BeginDrawing();
    BeginMode2D(camera);
      ClearBackground(bg_color);
      draw_background();

      // ? DrawFPS(0, 72); For debugging framerate.

      if scene == Scene.MainMenu {

        draw_main_menu();
      } else {

        if IsKeyPressed(Key.Backspace) {
          scene = Scene.MainMenu;
          swap_music();
        }

        update_game();
        draw_game();
        draw_game_menu();
      }
    EndMode2D();
    EndDrawing();
  }

  CloseAudioDevice();

  delete(bullet_render_info,
        fire_particle_render_info,
        smoke_particle_render_info,
        enemy_render_info);

  free(format_buffer);
  return 0;
}
