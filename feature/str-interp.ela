find_next_curly_match :: fn(fmt: c_string, last_index: u32*) -> u32 {
  i := *last_index;
  while fmt[i] != '\0' {
    if fmt[i] == '{' && fmt[i + 1] == '}' {
      *last_index = i + 2;
      return i;
    }
    i += 1;
  }
  return -1;
}

format :: fn!<Types...>(fmt: c_string, args: Types) -> c_string where Types is Display {
  stream: Formatter;
  defer stream.deinit();
  fmt_len, index, match_pos := (strlen(fmt), 0 as u32, 0 as u32);
  #for arg in args {
    match_pos = find_next_curly_match(fmt, &index);
    if match_pos == -1 {
      break;
    }
    stream.write(fmt + index, match_pos - index);
    arg.format(&stream);
    index = match_pos + 2;
  }

  if index < fmt_len {
    stream.write(fmt + index, fmt_len - index);
  }

  return stream.copy_string();
}