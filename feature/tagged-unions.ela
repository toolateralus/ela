

AST :: enum(union) {
  Identifier :: str;
  Float :: f64;
  Integer :: s64;
  Binary :: struct {
    left: AST*,
    right: AST*,
    op: Operator,
  };
  Unary :: struct {
    operand: AST*,
    op: Operator,
  };
  Program :: struct {
    statements: List![AST];
  }
}

c: {
  typedef struct AST {
    s32 index;
    union {
      str _Identifier;       // index0
      f32 _Float;             // index1
      int64_t _Integer;         // index2
      struct {  
        AST *left;
        AST *right;
        Operator *op
      } Binary;                  // index3
      struct {
        AST *operand;
        Operator op;
      } Unary;                   // index4
      struct {
        _array_AST statements;  
      } Program;                 // index5
    };
  } AST;
}

impl AST {
  add :: fn(self*, right: AST*) -> AST* {
    return null;
  }
}

c: {
  AST* AST_add(AST* self, AST* right) {
    return NULL;
  }
}

main :: fn() {

  // Explicitly type a variable as only a variant type:
  // No requirement to always be a parent.
  // You can make this into a generic AST later, 
  // and it will just construct a tagged union around it.
  // This would be the same as making the Program struct on its own.
  program: AST::Program;

  c : {
    typeof(AST, program) program = {0};
  }

  program.statements.push(AST::Binary {
    left: mem::arena::new(AST::Identifier{"Xaryu"}),
    right: new mem::arena::new(AST::Integer{25}),
    op: Operator::Add,
  });

  node : AST = program.statements.first();

  c: {
    AST_Program_push((typeof(AST, Binary)){
      .left = mod_mem_arena_new(AST_WrapSubTypeIndex0(string_from("Xaryu"))),
      .right = mod_mem_arena_new(AST_WrapSubTypeIndex1(25)),
      .op = Operator_OperatorAdd
    });

    AST node = _array_first_AST(&program.statements);
  }

  // Pattern matching with destructure list.
  if node is AST::Binary{left, right, op}; op == Operator::Add {
    result := left.add(right);
    println(result);
  }

  // compiles to
  c: {
    if (node.index = _TYPE_INDEX_OF(AST, Binary)) {
      typeof(node.binary) _binary = node.binary;
      typeof(node.binary.left) left = _binary.left;
      typeof(node.binary.right) right = _binary.right;
      typeof(node.binary.op) op = _binary.op;
      if (op == Operator_OperatorAdd) {
        AST result = AST_Add(left, right);
        println(result);
      }
    }

  }


  // Pattern matching without destructure list.
  if node is binary: AST::Binary; binary.op == Operator::Add {
    result := binary.left.add(binary.right);
    println(result);
  }

  // compiles to

  c: {
    if (node.index = _TYPE_INDEX_OF(AST, Binary)) {
      typeof(node.binary) binary = node.binary;
      if (binary.op == Operator_OperatorAdd) {
        AST result = AST_Add(binary.left, binary.right);
        println(result);
      }
    }
  }

  match node {
    binary: AST::Binary: {
      ...
    }
    AST::Unary{operand, op}: {
      ...
    }
  }

  c: {
    if (node.index = _TYPE_INDEX_OF(AST, Binary)) {
      typeof(AST, Binary) binary = node.binary;
      ...
    } else if (node.index = _TYPE_INDEX_OF(AST, Unary)) {
      typeof(AST, Unary) unary = node.unary;
      ..
    }
  }

}
