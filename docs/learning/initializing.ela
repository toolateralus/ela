
MyStruct :: struct {
  a: s32,
  b: s32,
  c: s32,
}

main :: fn() {
  // Initializer lists, unless used for an array, must name the fields it is assigning.
  // You can place the type right before the list
  instance := MyStruct .{
    a: 10,
    b: 20,
    c: 30,
  }

  // Or you can infer it. In many places this is valid, such as returning from a function, in an argument where the type is known, etc.
  instance1 : MyStruct = .{
    a: 10,
    b: 20,
    c: 30
  }

  // see 'array.ela' in learning to see how arrays are initialized.

  /* 
    if the expected type is unknown, or not a fixed array, such as s32[10],
    the result of .[...] will be Init_List!<T>. this can be used in functions to initialize your collection types
  */

  init_list := .[0, 1, 2];

  // the above is equivalent to:
  // init_list : Init_List!<s32> = .[0, 1, 2];

  // an example of where this is used, is for List!<T>
  list := s32[]::init(.[
    0,1,2,3,4
  ]);

  // the Init_List!<T> type can be though of as a stack allocated variable length array,
  // where it's lifetime is local to the declaring scope. Do not hang on to this type unless you are certain of 
  // it's lifetime, it's generally just not reccomended.
}