
MyStruct :: struct {
  a: s32;
  b: s32;
  c: s32;
}

main :: fn() {
  //  * parameterized. Will set as many fields as it can, or call a constructor if it finds a match with the types provided.
  some_struct := MyStruct {0, 1, 2};
    
  some_struct1 : MyStruct = {0, 1, 2};

  // Everything in ela is always zero initialized.
  some_struct2: MyStruct;
    

  
  // ? #make directive.
  {
    //  * default constructor.
    some_struct3 := #make(MyStruct);
      
    //  * using initializer list in #make. note this uses the same semantics as the init list examples.
    some_struct4 := #make(MyStruct, {0, 1, 2});
      
    //  * using a copy constructor.
    some_struct5 := #make(MyStruct, some_struct);
      
    //  * calling a constructor without init list. varargs.
    some_struct6 := #make(MyStruct, 0, 1, 2);
      
  }
    
  /* 
  * Casting types.
  */

  f : float;

  // rust style cast.
  f1 := f as int;

  // using a copy constructor.
  f2 := #make(int, f); 
  
}