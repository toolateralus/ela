
/* 
  Arrays in Ela work just like C, they're fixed length and stack allocated.
  They cannot be assigned to, only read and written to (once declared).
  You can create them with initializer lists, or no initialization (zero initialized)
*/

main :: fn() {

  mut my_array: s64[10]; // all zeroes.
  for i in 0..10 {
    my_array[i] = i;
  }

  // if you wanted an initializer list version:
  my_other_array := s64.[
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
  ];

  // alternatively..
  my_other_array2: s64[10] = .[
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
  ];

}

/* 
  functions can take fixed array parameters, (which ultimately get casted down to a pointer, with a warning)
  but, you cannot return a fixed array from a function, since it's stack allocated.
*/

// this will emit a warning, because things like sizeof() will totally act weird in this, and is generally not reccomended.
some_func :: fn(array: s32[10]) {

}

// illegal.
some_func1 :: fn() -> s32[] {

}
