import fmt::*;

main :: fn() {
  { // * Declarations
    /* immutable variables. */
    x: s64; // 0 init.
    x1: s64 = 0;
    x2 := 0; // type is whatever is on the right hand side of ':='

    /* mutable variables. */
    mut x3: s64; // 0 init.
    mut x4: s64 = 0;
    mut x5 := 0; // type is whatever is on the right hand side of ':='

    /* compile time constants */
    const x6: s64; // 0 init.
    const x7: s64 = 0;
    const x8 := 0; // type is whatever is on the right hand side of ':='
  }

  { // * Number/Bool Literals
    /*
      float literals default to 'f32', but will coerce in certain contexts to f64.
    */
    mut x := 0.0;

    // type coerced to f64.
    mut x1: f64 = 0.0;

    x = x1; // invalid, because we are narrowing the number by 4 bytes.
    x = x1 as f64; // this is how you'd do that.

    x1 = x; // valid, because we are just promoting this to a f64.

    /*
      the same goes for integer literals. always default to signed 32 bit, but can coerce in declarations
      for quality of life.

      the narrowing semantics are identical to floats, except signedness becomes a factor as well.
    */

    mut s := 0;  // default s32.
    mut s1: u64 = 0; // type gets coerced to u64, no need to cast.

    s1 = s; // promotion is legal.
    s = s1; // implicit narrowing is illegal;
    s = s1 as s32; // fine.

    /*
      the 'bool' type works very similar, except it's much stricter. any number can cast to bool, explicitly.
      pointers may be implicitly cast to bool just to ease checking whether they're null or not.
    */
  }

  { // * Strings

    /*
      defaults to type 'str', which is a lot like a C-string, except it stores length information,
      so it is a struct. calling into C code with this will be a very bad time!


      side note: mutating the data of a 'str' will almost always cause a segfault,
      because much like C, changing a string literal is changing protected memory.
    */
    string := "Hello, World"; // type = 'str'.

    /*
      To get a C compatible string, aka type '*const u8', we just use the 'c' suffix on the literal,
      which tells the compiler to not construct a 'str' type around the literal.
    */

    c_string := "Hello, World"c; // type = '*const u8'.
    //                        ^^<- here!


    /*
      There is another string type in Ela, that's builtin. Except, there's no way to construct solely from a literal.
      it is the 'String' type, and it's a heap allocated string.


      We can use "String::from" to create a heap allocated string from any type that implements
      'AsByteSlice' which means it's convertible to a slice of bytes.

      'String' must always be freed in some way or another.
    */

    mut string1 := String::from("Hello, World!");
    defer string1.deinit(); // here we release its resources.
  }

  { // * Object literals.
    /* 
      
      To easily construct things like structs, unions, fixed arrays(caveat) etc, we can use initializer lists.

      There are two types of initializer list - those which are used to initialize named fields in a concrete type like 
      a struct, and so called 'collection initializers' which are more akin to an array literal. We'll talk about those
      in a second.
      
    */

    Vector2 :: struct {
      x: f32, y: f32
    }

    v: Vector2; // zero initialized.

    // initializer list, it infers its type from the declaration so no need to annotate it.
    v1: Vector2 = .{
      x: 0,
      y: 0,
    };

    // initializer list, pass the type to the list itself so it doesn't need to infer the type.
    v2 := Vector2.{
      x: 0,
      y: 0,
    };

    /* 
      These are very useful, and can be used recursively, they can infer their types from a function calls arguments,
      and many other things.
    */
  }

  { // * 'Array literals'
    /* 
      much like an object literal, we may want to construct a sequence of homogenously typed values,
      and not have to push them into a List one by one or something. Or, we want a default set of values 
      in a stack allocated 'c style' array. Sometimes we even just want a stack allocated 'variable length array', which
      we can use 'Collection Initializer's for.
    */

    // Here we make an 'InitList!<s32>', which is stack allocated, and inherently unsafe to hold onto oustide of this scope.
    x := s32.[
      0, 1, 2, 3
    ];

    /*
      common collection types like List!<T> will often implement an 'init' function that takes one of these lists.
      if you're implementing an 'init' function, it's imperative that you COPY the memory out of the init list, if you intend to hang on to it.
    */
    list := List!<s32>::init(.[0, 1, 2]);


    /* Fixed arrays are the only type that will automatically convert an InitList!<T> to itself */
    array: s32[10] = .[0,1,2,3,4,5,6,7,8,9];

  }

  { // * Range literals.
    /* 
      range literals are just syntactic sugar for the RangeBase!<T> type.
      T will default to whatever is on the left hand side of the range, and both types must be the same or convertible to the left type.
    */

    range := 0..10;

    // this is equivalent to
    _range := RangeBase!<s32>.{begin: 0, end: 10};

    /* ranges are useful for providing iteration ranges such as for loops, slicing things in subscript/index overloads, etc. */
  }

  { // * Tuple literals.

    /* 
      Tuple literals are just kind of anonymous structs with unnamed fields.
      the 'anonymous' type will be automatically generated, on use or reference of one of these types.


      to describe a tuple type, you simply use the () syntax.

      NOTE: tuples can have one element, and to describe this use ($value/$type,);
    */

    tuple_type: (s32, s32);
    tuple_value := (0, 0);

    /// just to be clear, typeof(tuple_type) == typeof(tuple_value)

    /* 
      there is no maximum number of elements to a tuple type, nor maximum size.
      they are very dynamic, namely being used as a primary replacement for C varargs.
    */

    /* 
      You can destructure a tuple into variables, using this syntax;
    */
    a, b := (0, 0);
    // or, for mutability:
    mut _a, _b := (0, 0);
    a_, mut b_ := (0, 0);


    /*   
      You can also use .$index syntax to access the 'fields' of a tuple.
    */

    mut tuple := (0, 0, 0);

    tuple.0 = 100;
    tuple.1 = 200;
    // ! tuple.3 = 100; // invalid, no member named 3. it's 0 based.
  }

  { // * Function literals. (lambda)
    /* 
      function literals are simple, they just return a pointer to the function created.
      the function cannot use closures/captures, i.e using local variables that arent passed in as parameters, etc.
    */


    func := fn() {
      println("hello, world!");
    };

    /* 
      the way you denote a function pointer is the * after fn.
      this is equivalent to:  
    */
    func1: fn * () -> void = func;
  }

  { // * 'dyn' literals.

    /* 
      'dyn' objects are a way to use a type erased instance of a type that uses an trait,
      while being typed as that trait itself. 

      to be dyn compatible an trait must meet these requirements:

      all functions are methods, i.e takes a 'self' parameter.
      all 'self' parameters must be taken by '*const self' or '*mut self' pointer semantic.
      the #self type is never returned, only concrete types.


      to create a dyn trait, aka an 'trait object'
    */

    // We must have an trait, and a type that implements it.
    Trait :: trait {
      function :: fn(*mut self);
    }
    
    MyThing :: struct {
      x: s32,
    }

    impl Trait for MyThing {
      function :: fn(*mut self) {
        println("hello from MyThing (dyn Trait)");
      }
    }

    // then,
    mut instance: MyThing;
    
    // we can infer the trait type via the declaration
    dynamic : dyn Trait = dynof(&mut instance);

    // or provide it manually
    dynamic1 := dynof(&mut instance, Trait);
    
    // the 'instance' argument to the dyn trait must be a '*mut/*const' pointer, 
    // because the type erasure requires holding on the the original instance as a '*mut/*const void'

    // Then, we can just call the methods as if we had 'MyThing', except without all of its type specific members and methods.
    dynamic.function(); // prints 'hello from MyThing (dyn Trait)'
  }

  { // * choice variant literals. (this section basically describes all there is about choice types, anyway.)

    Choice :: choice {
      A, 
      B(s32),
      C{a: *mut Choice, b: *mut Choice}
    }

    /* 
      Choice variants have three patterns they can follow, as shown above.

      the 'Marker' pattern - No data associated, just an index.
      the 'Tuple'  pattern - a collection of nameless field(s).
      the 'Struct' pattern - a collection of key-value pairs, i.e named fields.

      therefore, there are 3 ways to 'construct' a choice variant, which is essentially a literal.
    */

    // 'Marker' pattern:
    // basically just an enum variant.
    mut ch: Choice = Choice::A;

    // 'Tuple' pattern:
    // looks just like a call of an associated function.
    mut ch1: Choice = Choice::B(10);

    // 'Struct' pattern:
    // looks just like initializing any other struct, with the above shown 'Object Literal'.
    ch2: Choice = Choice::C.{
      a: &mut ch,
      b: &mut ch1,
    };

    /* 
      pattern matching is done in a very similar way 
      only within control flow statements like 'while' and 'if', 
      using the 'is' construct.
    */

    if ch2 is Choice::C.{a: a, b: b} {
      /// ...
    } else if ch1 is Choice::B(v) {
      /// ...
    } else if ch is Choice::A {
      /// ...
    }
  }
}
