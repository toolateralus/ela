

// C style union
MyUnion :: union {
  a: int;
  b: float;
}

// unions can use initializer lists, but only one value can ever be provided.
onion : MyUnion = {a: 10};

NonTrivialTag :: enum {
  Int,
  Float,
  String,
}

NonTrivialWrapper :: struct {
  tag: NonTrivialTag;
  // you can define an anonymous union, which behaves like a normal union,
  // but the field names will be accesible within the parent struct.
  #anon :: union {
    a: int;
    b: float;
    c: string; 
  };
}
