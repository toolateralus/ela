; // import core for interpolated strings.


// Define a simple vector structure.
Vector2 :: struct {
  // with 2 f32 fields.
  x: f32,
  y: f32
}

impl Vector2 {
  // Define a to_string so that interpolated strings can print us implicitly.
  to_string :: fn(self*) -> c_string {
    return $"x={self.x}, y={self.y}";
  }
}


main :: fn() {
  // get the Type* that represents Vector2.
  type := #type(Vector2);
  instance: Vector2;
  println($"default value, instance={instance}");
  
  i : f32;
  for field in type.fields {    
    // set the field on instance, to value 'i'
    field.set(&instance, i);
    println($"Field descriptor: name=({field.name}), size=({field.size}), offset=({field.offset}), type_name=({field.type.name})");
    i += 0.5;
  }
  
  for field in type.fields {
    // store the value of the field from instance in 'v'
    // It will return a pointer to the field in the struct for mutation (as a char*)
    // however, we just dereference it.
    v := field.get(&instance) as f32*;
    println($"Reading {field.name} = {*v}");
  }
  
  println($"final result :: instance={instance}");
}

