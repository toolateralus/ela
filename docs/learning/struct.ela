/* 
  

*/
MyStruct :: struct {
  // normal field declaration:
  field: float;
  
  // field with a default value:
  field1: float = 100.0;
  
  // pointer to self (linked list):
  // see docs/directives to understand #self.
  field2: #self *;
  
  // method
  my_method :: () -> float {
    // implicit this pointer,
    return field;
    
    // you can also use this.*
    return this.field;
  }
  
  //? constructors
  // * See docs/learning/constructing.ela for more info about calling constructors.
  #ctor :: () {
    field = 100.0;
    field1 = 200.0;
    field2 = new #self{}; // this would obviously infinitely recurse, but just an example.
  }
  
  //? Parameterized constructor
  #ctor :: (f: float, f1, next: #self*) {
    this.field = f;
    this.field1 = f1;
  }
  
  //? destructors
  #dtor :: () {
    if field2 then
      delete(field2);
  }
  
  
  //? Operator overloads
  /* 
      Right now, mostly all the operators allowed in C++ are allowed here.
      However, we will certainly ban many of them, and only allow the most neccesary ones.
  */
  #operator(+) :: (other: MyStruct) -> MyStruct {
    output: MyStruct;
    output.field = other.field + field;
    output.field1 = other.field1 + field1;
    return output;
  }
  
  // You have to define compound assignment operators explicitly.
  #operator(+=) :: (other: #self) -> #self {
    // ... implementation.
  }
  
  
  //? to_string allows us to implicitly be stringified by interpolated strings.
  //? this can also return a char*, but a string is preferred to not cause memory leaks.
  to_string :: () -> string {
    return "";
  }
  
  // to_string :: () -> char* {
  //   return "";
  // }
  
}