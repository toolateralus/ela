
/* functions are simply defined with $name :: fn($params) -> $return_ty $block syntax. */
// the -> $return_ty can be omitted, and it will be assumed to return void.
add :: fn(a: s32, b: s32) -> s32 {
  return a + b;
}

// Note: for all generics, (structs, functions, unions, tagged unions, ttraits)
// the syntax will always be the same. !<T, T1, T2>;

// No function overloading. Use generics instead, as such:
generic :: fn!<T>(t: T) -> T {
  return t * 2;
}

generic1 :: fn!<T, T1>(t: T, t1: T1) -> T {
  return t * t1;
}


// For functions (or control flow) that return perform a single expression, you can use 'expression body'.
// this is basically an implicit returning body.

getter :: fn() -> s32 => 10;
print_something :: fn() => println("swoop");


some_complex_generic :: fn!<T>(s: str, v: Vector2, t: T) -> T {
  return 0.0; // we know we only use this as float, as shown below.
}

inferred_by_expected_type :: fn!<T>() -> T {
  return .{};
}

main :: fn() {

  // inferred.
  some_complex_generic("Hi", .{x: 0, y: 0}, 100.0);

  // inferred! we have rather good inference for generic functions.
  x: s32[] = inferred_by_expected_type();

  generic(10); // infers.
  generic(20); // infers.

  // To specify explicitly
  generic!<s32>(10);
  generic!<s32, f32>(10, 10.0);
}
  
// You can use 'where' clauses to add arbitrary type constraints to generic parameters.
// you can match against concrete types, or even use an empty trait that has another 
// where clause to just check that it passes some kind of set of conditions.
// & and | are the only valid operators in these constraint expressions.
Struct :: struct!<T> where T: s32 | Is_Numeric | Is_Mut_Pointer {

}
