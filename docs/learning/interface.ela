

/* 
  Ela has traits that can declare methods, default or 'overriden'. This doesn't create a vtable,
  it's all done statically, it's just a powerful tool in the type system.

  You cannot have an instance of an trait, by any means in the language now. // TODO: cover dyn traits.
*/


Iter :: trait {
  // some methods.
}

Trait :: trait {
  // referring to 'self' in an trait will refer to the implementer's type.
  to_string :: fn(*const self) -> String;

  // the return types, or parameter types, can be traits themselves.
  // they will just be substituted for their actual types, and applied as a constraint when 
  // implemented. 

  // this is very useful for avoiding using a generic where it's really not needed.

  // this is only valid for trait declarations themselves right now.
  as_iter :: fn(*const self) -> Iter!<#self>
}