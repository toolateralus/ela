#import core;

main :: fn() {
  /* If statements */

  // Your typical if else stuff.
  if true { 
    //
  } else {
    //
  }

  if false {
    //
  } else if true {
    //
  } else {
    //
  }

  //* A single-line-bodied if statement that only has one statement as a body and no else can be shorthanded as 
  if true then println("Hi!");

  /* While loop */
  while true {
    if 0 then break;
    if 1 then continue;
  }

  /* For loops:  */

  // C equivalent:  for (int i = 0; i < 100; ++i) {}
  for i in 0..100 {}

  // you can use any expression on the left or right of the range, as long as it's an s64 type.
  for i in 0..get_max() {}
  for _ in get_min()..get_max() + 100 {}

  // C equivalent: for (int i = 100; i >= 0; --i) {}
  // If the first (left) of the range is greater than the last (right)
  // it will implicitly iterate in reverse.
  for i in 100..0 {}

  // To control the increment in a range, you can use Range's initializer list.

  // C equivalent: for (int i = 0; i < 100; i += 2) {}
  for i in Range{first: 0, last: 100, increment: 2} {}

  // C equivalent: for (int i = 100; i >= 0; i -= 4) {}
  for i in Range{first: 100, last: 0, incrment: 4} {}

  get_array :: fn() -> s32[] {
    arr: s32[];
    for i in 0..100 {
      arr != i;
    }
  }

  // iterate and get copies of elements.
  for v in get_array() {
    println($"{v}");
  }

  /* 
    To avoid copies, or to mutate elements, you can use this syntax to take a pointer to the element you're getting from the iterator
    You cannot use this on Ranges (0..100) currently.
  */
  for *v in array {
    println($"{*v}");
  }


  // Switch cases work much like C, except devoid of the implicit fall-through logic, and the strict numerical restrictions.
  // Also, switches can return a value.

  greeting := switch true {
    false => "Hello!",
    true => "Goodbye",
  }

  switch greeting {
    string::from("Hello"): {
      println("Hello")
    },
    string::from("Goodbye"): {
      println("Goodbye!");
    }
  }

  done :: fn() -> bool {
    return false;
  }

  // In control flow, the expression body => has some interesting semantics. You can do an implicit return out of a function via a switch case,
  // if statement, etc, with the => operator.
  func:: fn() -> int {
    // so then this:
    if done() => 100;

    // is equal to
    if done() { 
      return 100;
    }
  }
}



