// test_for :: () {
// 	for s32 i; i < 10; i = i + 1 {
// 		return 0;
// 	}
// 	s32[] arr;
// 	for v; arr {
// 		return 0;
// 	}
// }

// test_while :: () {
// 	while {
// 		continue;
// 	}
// 	while v {
// 		continue;
// 	}
// }

// test_if_1 :: () {
// 	s32 v = 1;
// 	if v {
// 		return 1;
// 	}
// 	return 0;
// }

// test_if_2 :: () {
// 	s32 v = 1;
// 	if v {
// 		return 1;
// 	} else {
// 		return 0;
// 	}
// }

// test_if_3 :: () {
// 	s32 v = 1;
// 	if !v {
// 		return 0;
// 	} else if v {
// 		return 1;
// 	} else {
// 		return 0;
// 	}
// }

// test_if_0 :: () {
// 	test_if_1();
// 	test_if_2();
// 	test_if_3();
// }

test_comp_assign :: () {
	float deref;
	deref += deref; 
	deref -= deref;
	deref *= deref; 
	deref /= deref;
	deref %= deref; 
	deref &= deref;
	deref |= deref; 
	deref ^= deref;
	deref <<= deref; 
	deref >>= deref;
}

test_operators :: () -> float {
	float left;
	float right;
	float result;
	result = left + right;
	result = left - right;
	result = left * right;
	result = left / right;
	result = left % right;
	result = left == right;
	result = left != right;
	result = left < right;
	result = left > right;
	result = left <= right;
	result = left >= right;
	result = left && right;
	result = left || right;
	result = left & right;
	result = left | right;
	result = left ^ right;
	result = left << right;
	result = left >> right;
	return result;
}

main :: (string[] argv) -> s32 {
	float deref;	
	float xaryus_brother = deref;
	deref += xaryus_brother;

	
	// test_for();
	// test_while();
	
	// test_if_0();
	// test_if_1();
	// test_if_2();
	// test_if_3();
	return 0;
}


// TODO(PARTIALLY DONE):
// SECOND // TODO: [2] Better typing. explicit type conversions, implicit type conversions, 
			// added function types and better type info.
			// no conversion table yet: that can be done later easily.

// TODO: [0] call expressions,  postfix expressions. dont use -> to dereference.

// TODO(cont.) better typing in expressions  (||, != return bool) etc.

// If we get time.
// TODO: [3] # directives, and the ability to define custom ones that just run routines.
// TODO: [4] ffi with C. #extern or #foreign or something for declarations, linking against libc.

// Friday
// TODO: [0] First class types. make(int*) etc.
// TODO: [1] Function pointers, first class functions.
// TODO: [2] Compile time reflection

// Monday
// TODO: [0] Struct Declarations
// TODO: [1] Method declarations

// Tuesday
// TODO: [0] Operator Overloads. (do we even want this? could be helpful)
// TODO: [1] Constructor/Destructor.
// object :: struct {
// 	#constructor :: (object *self) {
		
// 	}
// 	#destructor :: (object *self) {
		
// 	}
// }

// Unforseen future.
// TODO: [1] in-language build system. library with build related functions
// TODO: [2] in-language testing system. 'ela test' type ish. #test attributes
// TODO: [3] compile time programs. use consteval and constexpr to try to get as far as possible without bytecode runtime.



