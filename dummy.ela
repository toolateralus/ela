

test_for :: () -> s32 {
	for s32 i; i < 10; ++i {
		return 0;
	}
	s32[] arr;
	for v; arr {
		return 0;
	}
	return 1;
}

test_while :: () -> s32 {
	
	s32* n = null;
	s32 v;
	if true {
		// do something;
	}
	while v {
		return 1;
	}
	return 1;
}

test_if_1 :: () -> s32  {
	s32 v = 1;
	if v {
		return 1;
	}
	return 0;
}

test_if_2 :: () -> s32 {
	s32 v = 1;
	if v {
		return 1;
	} else {
		return 0;
	}
	return 1;
}

test_if_3 :: () -> s32 {
	s32 v = 1;
	if !v {
		return 0;
	} else if v {
		return 1;
	} else {
		return 0;
	}
	return 1;
}

test_comp_assign :: () {
	s32 deref = 1;
	deref += deref; 
	deref -= deref;
	deref *= deref; 
	deref /= deref;
	deref %= deref; 
	deref &= deref;
	deref |= deref; 
	deref ^= deref;
	deref <<= deref; 
	deref >>= deref;
}

test_operators :: () -> s32 {
	s32 left;
	s32 right;
	s32 result;
	result = left + right;
	result = left - right;
	result = left * right;
	result = left / right;
	result = left % right;
	result = left == right;
	result = left != right;
	result = left < right;
	result = left > right;
	result = left <= right;
	result = left >= right;
	result = left && right;
	result = left || right;
	result = left & right;
	result = left | right;
	result = left ^ right;
	result = left << right;
	result = left >> right;
	return result;
}

sqrt :: (float f) -> float {
	return f;
}

abs :: () -> s32 {
	return 0;
}

main :: (s32 argc, char **argv) -> s32 {
	s32 i = 0;
	
	++i;
	
	i = ++i;
	
	float deref;	
	//test_for();
	test_while();
	
	sqrt(deref);
	
	test_if_1();
	test_if_2();
	test_if_3();
	return 0;
}

