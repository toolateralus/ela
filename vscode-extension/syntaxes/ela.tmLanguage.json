{
  "name": "Ela",
  "scopeName": "source.ela",
  "fileTypes": ["ela"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#hash-keywords"
    },
    {
      "include": "#scope-resolution"
    },
    {
      "include": "#function-declaration"
    },
    {
      "include": "#function-call"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#characters"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ela",
          "match": "//.*$"
        },
        {
          "name": "comment.block.ela",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ela",
          "match": "\\b(if|else|for|while|return|fn|struct|enum|interface|impl|new|deinit|clear|length|get_string|append|append_then_free|append_concat|append_concat_then_free|create|destroy|get|at|is_number|is_string|is_object|is_array|is_boolean|is_null|as_number|as_string|as_object|as_array|as_boolean|expect_type|expect_types|peek_token|get_token|err|set_json_error|get_json_error|json_parse|json_parse_file|json_parse_string|json_serialize|json_serialize_scalar|json_serialize_struct|json_serialize_array|json_deserialize|json_deserialize_struct|json_deserialize_array|json_deserialize_scalar)\\b"
        },
        {
          "name": "keyword.operator.ela",
          "match": "[+\\-*/%<>|&^!~]=?|==|!=|<=|>=|<<|>>|\\b(and|or|not)\\b"
        },
        {
          "name": "keyword.other.ela",
          "match": "\\b(import|alias|static|const|true|false|null)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.user-defined.ela",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "hash-keywords": {
      "patterns": [
        {
          "name": "keyword.other.hash.ela",
          "match": "#\\b\\w+\\b"
        }
      ]
    },
    "scope-resolution": {
      "patterns": [
        {
          "name": "entity.name.scope-resolution.ela",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)::([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "entity.name.scope.ela"
            },
            "2": {
              "name": "entity.name.function.ela"
            }
          }
        }
      ]
    },
    "function-declaration": {
      "patterns": [
        {
          "name": "entity.name.function.ela",
          "match": "\\b\\w+(?=\\s*::\\s*fn\\b)"
        }
      ]
    },
    "function-call": {
      "patterns": [
        {
          "name": "meta.function-call.ela",
          "match": "\\b\\w+\\s*\\(",
          "captures": {
            "0": {
              "name": "entity.name.function.ela"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ela",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ela",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.bold.ela",
          "begin": "`\"",
          "end": "\"`",
          "patterns": [
            {
              "name": "constant.character.escape.ela",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "characters": {
      "patterns": [
        {
          "name": "constant.character.ela",
          "match": "'[^']'"
        }
      ]
    }
  }
}