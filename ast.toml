Program {
  Function main {
    Parameters {
      Parameter argv : type: 16, string[]
    }
    Block {
      Declaration deref : type: 10, float
      Declaration xaryus_brother : type: 10, float = deref
      For {
        CStyle:        Declaration i : type: 1, s32
        condition: (i < 10)
        increment: (i = (i + 1))
        Block {
          Return: 0          
        }
      }
      Declaration arr : type: 17, s32[]
      For {
        RangeBased:
        target: v -> arr
        Block {
          Return: 0          
        }
      }
      While {
        condition: 
        Block {
          Continue
        }
      }
      While {
        condition: v
        Block {
          Continue
        }
      }
    }
    returns: type: 1, s32
  }
  Function test_if_1 {
    Parameters {
    }
    Block {
      Declaration v : type: 1, s32 = 1
      If {
        condition: v
        Block {
          Return: 1          
        }
      }
      Return: 0      
    }
    returns: type: 15, void
  }
  Function test_if_2 {
    Parameters {
    }
    Block {
      Declaration v : type: 1, s32 = 1
      If {
        condition: v
        Block {
          Return: 1          
        }
        Else {
          Block {
            Return: 0            
          }
        }
      }
    }
    returns: type: 15, void
  }
  Function test_if_3 {
    Parameters {
    }
    Block {
      Declaration v : type: 1, s32 = 1
      If {
        condition: !v
        Block {
          Return: 0          
        }
        Else {
          If {
            condition: v
            Block {
              Return: 1              
            }
            Else {
              Block {
                Return: 0                
              }
            }
          }
        }
      }
    }
    returns: type: 15, void
  }
  Function test_if {
    Parameters {
    }
    Block {
      Call test_if_1 {
        Arguments {}
      }

      Call test_if_2 {
        Arguments {}
      }

      Call test_if_3 {
        Arguments {}
      }

    }
    returns: type: 15, void
  }
}
