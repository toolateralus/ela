import assertion::*;

fn add_generic!<T>(a: T, b: T) -> T {
  return a + b;
}

fn generic_return!<T>() -> T {
  t: T;
  return t;
}

#test fn test_generic_add() {
  assert(add_generic!<f32>(100.0, 100.0) == 200.0, "generic_add_float failed");
  assert(add_generic!<s32>(5, 6) == 11, "generic_add_int failed");
  assert(generic_return!<s32>() == 0, "generic_return failed");
  assert(generic_return!<f32>() == 0.0, "generic_return failed");
}

struct Generic!<T> {
  t: T
}

fn generic_fn!<T>() {}

struct Other{}

impl!<T> Generic!<T> {
  fn dont(*const self) -> T {
    t: T;
    return t;
  }
}

struct My_Struct {
  a: Other
}

#test fn test_generic_dependencies() {
  a : Generic!<My_Struct>;
  generic_fn!<Other>();
  b := a.dont();
}

fn default_generic!<T = s32>() -> f32 {
  return 1234.56 as T; // ! making return types more strict has made this fail
}

#test fn test_default_generics() {
  assert_eq(default_generic() as f32, 1234.0, "default generic error");
  assert_eq(default_generic!<f32>(), 1234.56, "default generic error");
}