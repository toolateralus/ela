import assertion::*;

#region basic_struct {

  struct Struct {
    a: s32,
    b: f32,
    c: bool,
  }

  trait Basic {
    fn static_get() -> s32;
    fn method_get(self) -> s32;
    fn method_get_ptr(*mut self) -> s32;
    fn method_get_self(*mut self) -> Self;
    fn static_get_self() -> Self;
  }

  impl Basic for Struct {
    fn static_get() -> s32 {
      return 0;
    }
    fn method_get(self) -> s32 {
      return self.a;
    }
    fn method_get_ptr(*mut self) -> s32 {
      return self.a
    }
    fn method_get_self(*mut self) -> Self {
      return .{a: 100};
    }
    fn static_get_self() -> Self {
      return .{a: 100};
    }
  }
}

#test fn basic_struct() {
  assert(Struct::static_get() == 0, "trait failed");
  assert(Struct::static_get_self().a == 100, "trait failed");
  mut instance: Struct;
  assert(instance.method_get() == 0, "trait failed");
  assert(instance.method_get_ptr() == 0, "trait failed");
  assert(instance.method_get_self().a == 100, "trait failed");
}

#region generic_interface_regular_struct {
  trait GenericInterface!<T> {
    fn static_get() -> T;
    fn method_get(self) -> T;
    fn method_get_ptr(*mut self) -> T;
    fn method_get_self(*mut self) -> Self;
    fn static_get_self() -> Self;
  }

  struct Struct1 {
    a: s32,
    b: f32,
    c: bool,
  }

  impl GenericInterface!<s32> for Struct1 {
    fn static_get() -> s32 {
      return 0;
    }
    fn method_get(self) -> s32 {
      return self.a;
    }
    fn method_get_ptr(*mut self) -> s32 {
      return self.a
    }
    fn method_get_self(*mut self) -> Self {
      return Struct1 .{a: 100};
    }
    fn static_get_self() -> Self {
      return Struct1 .{a: 100};
    }
  }
}

#test fn generic_interface_regular_struct() {
  assert(Struct1::static_get() == 0, "trait failed");
  assert(Struct1::static_get_self().a == 100, "trait failed");
  mut instance: Struct1;
  assert(instance.method_get() == 0, "trait failed");
  assert(instance.method_get_ptr() == 0, "trait failed");
  assert(instance.method_get_self().a == 100, "trait failed");
}

#region generic trait generic struct {
  struct Struct2!<T> {
    n: T
  }  

  impl!<T> GenericInterface!<T> for Struct2!<T> {
    fn static_get() -> T {
      t: T;
      return t;
    }
    fn method_get(self) -> T {
      t: T;
      return t;
    }
    fn method_get_ptr(*mut self) -> T {
      t: T;
      return t;
    }
    fn method_get_self(*mut self) -> Self {
      t: T;
      return .{n: t};
    }
    fn static_get_self() -> Self {
      t: T;
      return .{n: t};
    }
  }
}

#test fn generic_struct_generic_interface() {
  assert(Struct2!<s32>::static_get() == 0, "trait failed");
  assert(Struct2!<s32>::static_get_self().n == 0, "trait failed");
  mut instance: Struct2!<s32>;
  assert(instance.method_get() == 0, "trait failed");
  assert(instance.method_get_ptr() == 0, "trait failed");
  assert(instance.method_get_self().n == 0, "trait failed");
}

#region uninstantiated generic {
  struct GenericWithoutInstance!<T> { }

  impl!<T> GenericWithoutInstance!<T> {
    fn thing(*mut self, t: T) { }
  }
}