import assertion::*;

#test fn test_comp_assign() {
  mut deref: s32 = 1;
  deref += deref;
  assert(deref == 2, "+=");
  deref -= deref;
  assert(deref == 0, "-=");
  deref *= deref;
  assert(deref == 0, "*=)");
  deref = 2;
  deref /= deref;
  assert(deref == 1, "/=");
  deref = 2;
  deref %= deref;
  assert(deref == 0, "%=");
  deref &= deref;
  assert(deref == 0, "&=");
  deref |= deref;
  assert(deref == 0, "|=");
  deref ^= deref;
  assert(deref == 0, "^=");
  deref <<= deref;
  assert(deref == 0, "<<=");
  deref >>= deref;
  assert(deref == 0, ">>=");
}

#test fn test_operators() {
  mut left: s32 = 1;
  mut right: s32 = 1;
  mut result: s32;
  mut result_bool: bool;
  result_bool = left == right;
  assert(result_bool == true, "left should equal right");
  result_bool = left != right;
  assert(result_bool == false, "left should not equal right");
  result_bool = left < right;
  assert(result_bool == false, "left should not be less than right");
  result_bool = left > right;
  assert(result_bool == false, "left should not be greater than right");
  result_bool = left <= right;
  assert(result_bool == true, "left should be less than or equal to right");
  result_bool = left >= right;
  assert(result_bool == true, "left should be greater than or equal to right");
  result_bool = left && right;
  assert(result_bool == true, "left and right should be true");
  result_bool = left || right;
  assert(result_bool == true, "left or right should be true");

  result = left + right;
  assert(result == 2, "left + right should be 2");
  result = left - right;
  assert(result == 0, "left - right should be 0");
  result = left * right;
  assert(result == 1, "left * right should be 1");
  result = left / right;
  assert(result == 1, "left / right should be 1");
  result = left % right;
  assert(result == 0, "left % right should be 0");
  result = left & right;
  assert(result == 1, "left & right should be 1");
  result = left | right;
  assert(result == 1, "left | right should be 1");
  result = left ^ right;
  assert(result == 0, "left ^ right should be 0");
  result = left << right;
  assert(result == 2, "left << right should be 2");
  result = left >> right;
  assert(result == 0, "left >> right should be 0");
}

#test fn test_relational_results() {
  test1: bool = (1 == 1 + 2) || 1 == 2;
  test2: bool = (3 > 2) && (2 < 4);
  test3: bool = !(5 <= 5) || (6 >= 6);
  test4: bool = (7 != 8) && (9 == 9);
  assert(test1 == false, "test1 should be false");
  assert(test2 == true, "test2 should be true");
  assert(test3 == true, "test3 should be true");
  assert(test4 == true, "test4 should be true");
}

#test fn test_address_of() {
  mut v: s32 = 0;
  addr_of_v: *const s32 = &const v;
  assert(addr_of_v != null, "address of grabbed a non-null ptr");
  v = *addr_of_v;
  assert(v == 0, "deref'ing a ptr grabbed with &v failed to == the same value as when it was defined.");
}

#test fn test_implicit_numerical_casting() {
  u1: u8;
  u2: u16 = u1;
  u3: u32 = u2;
  u4: u64 = u3;
  assert(u4 == u1, "unable to upcast successfully");

  s1: s8;
  s2: s16 = s1;
  s3: s32 = s2;
  s4: s64 = s3;
  assert(s1 == s4, "unable to upcast successfully");

  f: f32;
  f1: f64 = f;
  assert(f == f1, "unable to upcast successfully");
}

#test fn test_two_way_implicit_conversion_bin_ops() {
  v: s32;
  v1: s8;
  f: f32;
  assert(v + v1 == 0 && v1 + v == 0, "failed to convert both ways");
}

struct Node {
  next: *mut Node
}

struct Array {
  ptr: [Node; 10]
}

#test fn test_chained_dot_subscript() {
  a: Array;
  a.ptr[0].next = null;
  assert(a.ptr[0].next == null, "failure: a.ptr[0].next != null");

  mut n: Node;
  a.ptr[0].next = &mut n;
  assert(a.ptr[0].next != null, "failure: a.ptr[0].next != null");
}

#test fn test_subscript() {
  mut arr: [s32; 100];
  arr[50] = 0;
  assert(arr[50] == 0, "index 50 on s32[100] failed to == 0");
  n: s32;
  ++n;
}

#test fn test_referencing_pointer() {
  mut node: Node;
  node.next = std::c::malloc(sizeof(Node));
  mut other: Node;
  node.next.next = &mut other;
  assert(node.next != null, "mallocing 'next' of 'Node' failed.");
  assert(node.next.next != null, "dereferencing other into node.next failed.");
  std::c::free(node.next);
}

#test fn test_cast() {
  big:  u16 = 65365 as u16;
  small: u8 = big as u8;
  assert(small == (big % 255), "failed to down cast");
}

struct XaryuStruct {
  f: f32
}

#test fn test_comp_assign_non_iden() {
  mut arr: [f32; 12];
  arr[0] = 10;
  arr[0] += 10;
  assert(arr[0] == 20, "omp assign arr[0] += 10 failed to == 20.");

  xarbars:  [XaryuStruct; 1];
  xarbars[0].f = 10.0;
  xarbars[0].f += 10.0;
  assert(xarbars[0].f == 20.0, "omp assign xarbars[0].f += 10.0; failed to == 20.0");
}

#test fn test_underscores_in_number_literals() {
  n: s32 = 1_000_000;
  assert(n == 1000000, "number literal with underscores failed to equal expected value");
}