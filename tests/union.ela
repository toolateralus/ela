;

union Union {
  a: s32,
  b: s32,
  c: s32,
}

impl Union {
  fn method(*mut self, n: s32) {
    assert("union equality check in method failed", n == self.a && n == self.b && n == self.c);
  }
}

union _Vec2 {
  struct {
    x: s32,
    y: s32,
    z: s32,
  },
  values: [s32; 3],
}

impl _Vec2 {
  fn method(*mut self, n: s32) {
    assert("union equality check in method failed", n == self.x && n == self.y && n == self.z);
    assert("union equality check in method failed", n == self.values[0] && n == self.values[1] && n == self.values[2]);
  }
  fn something() -> Self {
    return .{};
  }
}

#test fn test_union_type_anonymous_sub_struct() {
  mut vec: _Vec2;
  vec.method(0); // this does the assertions
}



#test fn test_union_type() {
  mut test_union: Union;
  test_union.a = 10;
  assert("union variants failed to equal each other", test_union.a == test_union.b && test_union.b == test_union.c);
  test_union.method(10);
}


struct AnonSubUnion {
  union {
    a: s32,
  }
}

#test fn test_anon_union_in_struct() {
  mut anon: AnonSubUnion;
  anon.a = 100;
  assert("Anon sub union failed", anon.a == 100);
}