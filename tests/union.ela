;

Union :: union {
  a: s32,
  b: s32,
  c: s32,
}

impl Union {
  method :: fn(*mut self, n: s32) {
    assert("union equality check in method failed", n == self.a && n == self.b && n == self.c);
  }
}

_Vec2 :: union {
  #anon :: struct {
    x: s32,
    y: s32,
    z: s32,
  },
  values: s32[3],
}

impl _Vec2 {
  method :: fn(*mut self, n: s32) {
    assert("union equality check in method failed", n == self.x && n == self.y && n == self.z);
    assert("union equality check in method failed", n == self.values[0] && n == self.values[1] && n == self.values[2]);
  }
  something :: fn() -> #self {
    return .{};
  }
}

#test test_union_type_anonymous_sub_struct :: fn() {
  vec: _Vec2;
  vec.method(0); // this does the assertions
}



#test test_union_type :: fn() {
  test_union: Union;
  test_union.a = 10;
  assert("union variants failed to equal each other", test_union.a == test_union.b && test_union.b == test_union.c);
  test_union.method(10);
}


AnonSubUnion :: struct {
  #anon :: union {
    a: s32,
  }
}

#test test_anon_union_in_struct :: fn() {
  anon: AnonSubUnion;
  anon.a = 100;
  assert("Anon sub union failed", anon.a == 100);
}