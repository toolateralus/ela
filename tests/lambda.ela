import assertion::*;

type Lambda :: fn(s32, s32) -> s32;

fn takes_lambda(lambda: Lambda, a: s32, b: s32) -> s32{
  return lambda(a, b);
}


#test fn test_lambda() {
  n := fn(a: s32, b: s32) -> s32 {
    return a + b;
  }
  {
    assert(n(1, 2) == 3, "lambda add failed");
    assert(
        fn(a: s32, b: s32) -> s32 { return a + b; }(1, 2) == 3,
        "inline lambda failed"
    );
  }
  {
    assert(takes_lambda(n, 1, 2) == 3, "lambda arg failed");
    assert(
      takes_lambda(fn(a: s32, b: s32) -> s32 { return a + b; }, 1, 2) == 3,
      "lambda inline arg failed"
    );
  }
    
  {
    lambda_expr_body := fn() -> s32 => 3;
    assert(lambda_expr_body() == 3, "lambda expr body failed");
    assert((fn() -> s32 => 3)() == 3, "lambda expr body inline failed");
  }
}