type Lambda :: fn(s32, s32) -> s32;

fn takes_lambda(lambda: Lambda, a: s32, b: s32) -> s32{
  return lambda(a, b);
}


#test fn test_lambda() {
  n := fn(a: s32, b: s32) -> s32 {
    return a + b;
  }
  {
    assert("lambda add failed", n(1, 2) == 3);
    assert("inline lambda failed", 
        fn(a: s32, b: s32) -> s32 { return a + b; }(1, 2) == 3
    );
  }
  {
    assert("lambda arg failed", takes_lambda(n, 1, 2) == 3);
    assert("lambda inline arg failed", takes_lambda(fn(a: s32, b: s32) -> s32 { return a + b; }, 1, 2) == 3);
  }
    
  {
    lambda_expr_body := fn() -> s32 => 3;
    assert("lambda expr body failed", lambda_expr_body() == 3);
    assert("lambda expr body inline failed", (fn() -> s32 => 3)() == 3);
  }
}