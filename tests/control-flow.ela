import assertion::*;

#test fn test_for() {
  for i in 0..10 {
    assert(i < 10, "i should be less than 10");
    return;
  }

  for i in 10..0 {
    assert(i > 0, "i should be greater than 0");
    return;
  }

  arr: List!<s32>;
  for v in arr {
      assert(false, "Unexpected case in array loop");
      return;
  }
  assert(true, "End of test_for reached");
}

#test fn test_while() {
  b: bool = true;
  while b {
      assert(b == true, "while condition == true");
      return;
  }
  assert(true, "End of test_while reached");
}

#test fn test_if_1() {
  v: bool = true;
  mut hit: bool = false;
  if v {
    assert(v == true, "v should be true");
    hit = true;
  } else {
    assert(false, "Unexpected case");
  }
  assert(hit, "failed to fall through if statement");
}

#test fn test_if_2() {
  v: bool = false;
  mut hit: bool = true;
  if v {
      assert(false, "Unexpected case");
  } else if !v {
    hit = true;
  }
  assert(hit, "fell through if else, but didn't set the variable");
}

#test fn test_if_3() {
  v: bool = false;
  mut hit: bool = true;
  if v {
      assert(false, "Unexpected case");
  } else if v {
      assert(false, "Unexpected case");
  } else {
      hit = true;
  }
  assert(hit, "fell though if,if_else,else but didn't set the variable");
}

#test fn empty_for_loops() {
  for i in 0..0 {
  }
  for i in 0..0 {
  }

  mut array: List!<s32>;
  for k in array {
  }
  for k in array.iter_mut() {
  }
}

#test fn test_iterate_array() {
  mut array: List!<s8>;
  for i in 0..4 {
    array.push(i as s8);
  }
  mut n: s32 ;
  for v in array.iter_mut() {
    assert(n == *v, "");
    ++n;
  }

  n = 0;
  mut arr : *mut List!<s8> = std::c::malloc(sizeof(List!<s8>)); 
  *arr = .{};
  for i in 0..4 {
    arr.push(i as s8);
  }

  for v in *arr {
    assert(n == v, "");
    ++n;
  }
  std::c::free(arr);
}

#test fn test_range_based_for_loop_exclusive() {
  mut n: s32;
  ten := 10;
  zero := 0;

  for i in 0..10 {
    n = i;
  }
  assert_eq(n, 9, "Range based for loop failed.");
  for i in 0..ten {
    n = i;
  }
  assert_eq(n, 9, "Range based for loop failed.");
  for i in zero..ten {
    n = i;
  }
  assert_eq(n, 9, "Range based for loop failed.");
  for i in zero..10 {
    n = i;
  }
  assert_eq(n, 9, "Range based for loop failed.");
}

#test fn test_tuple_destructure_in_for_loop() {
  mut list: List!<(s32, s32)>;
  list.push((0, 0));
  list.push((1, 1));
  list.push((2, 2));
  list.push((3, 3));

  mut i := 0;
  for x, y in list {
    assert(x == i && y == i, "failed");
    ++i;
  }

  for &mut x, &mut y in list.iter_mut() {
    (*x) *= 2;
    (*y) *= 2;
  }

  i = 0;
  for x, y in list {
    assert(x == i * 2 && y == i * 2, "failed on set in tuple");
    i++;
  }
}

struct __Struct {
  x: s32,
  y: s32,
}

import fmt::*;
#test fn test_struct_destructure_in_for_loop() {
  mut list: List!<__Struct>;
  list.push(.{x: 0, y: 0});
  list.push(.{x: 1, y: 1});
  list.push(.{x: 2, y: 2});
  list.push(.{x: 3, y: 3});

  mut i := 0;
  for x, y in list {
    assert(x == i && y == i, "failed");
    ++i;
  }

  for &mut x, &mut y in list.iter_mut() {
    (*x) *= 2;
    (*y) *= 2;
  }

  i = 0;
  for x, y in list {
    assert(x == i * 2 && y == i * 2, "failed on set for struct");
    i++;
  }
}

enum SwitchCaseEnum {
  SwitchVariant0,
  SwitchVariant1,
}

fn switch_helper() -> s32 {
  number := 5;
  switch number {
    0: { return 0; }
    5: { return 5; }
  };
  return 1;
}

// ! Some stuff is commented out in here.
// ! There are repros for these items.
#test fn test_switch_statements() {
  integer: s32;

  mut passed := false;
  switch integer {
    0: { passed = true; }
    1: { assert(false, "Switch on s32 case failed");  }
  };

  assert(passed, "Failed to hit positive switch case for integer");
  s := "Hello!";

  passed = false;
  switch s {
    "Hello": { assert(false, "Switch case on str failed"); }
    "Hello!": { passed = true; }
  }
  assert(passed, "Failed to hit positive switch case for str");

  passed = false;
  switch SwitchCaseEnum::SwitchVariant0 {
    SwitchCaseEnum::SwitchVariant0: {
      passed = true;
    }
    SwitchCaseEnum::SwitchVariant1: {
      assert(false, "Switch on enum value failed");
    }
  }
  assert(passed, "Failed to hit positive switch case for enum");

  /*  With return value as expression :  */

  new_int := switch integer {
    0: { return integer; }
    1 => -1,
  }

  assert(new_int == integer, "Return value of switch statement failed");

  // test range based shiz.
  // passed = false;
  // switch 0 {
  //   0..10: {
  //     passed = true;
  //   }
  //   10..20: {
  //     assert(false, "switch on range passing in number failed");
  //   }
  // }
  // assert(passed, "Failed to pass range based switch statement");

  assert(switch_helper() == 5, "Returns in switched failed");
}

#test fn test_switch_with_else() {
  n := 0;
  case := switch n {
    1 => false,
    else => true,
  }
  assert(case as bool, "switch with else case failed");
}


#test fn test_iterate_iter() {
  mut list: List!<s32> = List!<s32>::init(.[0,1,2,3,4,5,6,7,8,9,10]);
  mut idx := 0;
  for v in list.iter() {
    assert(v == idx, "list.iter() for loop failed");
    idx++;
  }
  idx = 0;
  for v in list.iter_mut() {
    assert((*v) == idx, "list.iter() for loop failed");
    idx++;
  }
}

#test fn test_iterate_enumerator() {
  range := 0..10;
  mut idx := 0;
  for v in range.iter() {
    assert(v == idx, "range.iter() for loop failed");
    idx++;
  }
}