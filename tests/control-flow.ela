;

#test fn test_for() {
  for i in 0..10 {
    assert("i should be less than 10", i < 10);
    return;
  }

  for i in 10..0 {
    assert("i should be greater than 0", i > 0);
    return;
  }

  arr: List!<s32>;
  for v in arr {
      assert("Unexpected case in array loop", false);
      return;
  }
  assert("End of test_for reached", true);
}

#test fn test_while() {
  b: bool = true;
  while b {
      assert("while condition == true", b == true);
      return;
  }
  assert("End of test_while reached", true);
}

#test fn test_if_1() {
  v: bool = true;
  mut hit: bool = false;
  if v {
    assert("v should be true", v == true);
    hit = true;
  } else {
    assert("Unexpected case", false);
  }
  assert("failed to fall through if statement", hit);
}

#test fn test_if_2() {
  v: bool = false;
  mut hit: bool = true;
  if v {
      assert("Unexpected case", false);
  } else if !v {
    hit = true;
  }
  assert("fell through if else, but didn't set the variable", hit);
}

#test fn test_if_3() {
  v: bool = false;
  mut hit: bool = true;
  if v {
      assert("Unexpected case", false);
  } else if v {
      assert("Unexpected case", false);
  } else {
      hit = true;
  }
  assert("fell though if,if_else,else but didn't set the variable", hit);
}


#test fn for_loop_2() {
  for i in 0..10 {
    i = i;
  }
  for i in 0..10 {
    i = i;
  }

  mut array: List!<s32>;

  for k in array {
    k = k;
  }
  for k in array.iter_mut() {
    k = k;
  }
}

#test fn test_iterate_array() {
  mut array: List!<s8>;
  for i in 0..4 {
    array.push(i as s8);
  }
  mut n: s32 ;
  for v in array.iter_mut() {
    assert("", n == *v);
    ++n;
  }

  n = 0;
  mut arr : *mut List!<s8> = malloc(sizeof(List!<s8>)); 
  *arr = .{};
  for i in 0..4 {
    arr.push(i as s8);
  }

  for v in *arr {
    assert("", n == v);
    ++n;
  }
  free(arr);
}

#test fn test_range_based_for_loop_exclusive() {
  mut n: s32;
  ten := 10;
  zero := 0;

  for i in 0..10 {
    n = i;
  }
  assert_eq("Range based for loop failed.", n, 9);
  for i in 0..ten {
    n = i;
  }
  assert_eq("Range based for loop failed.", n, 9);
  for i in zero..ten {
    n = i;
  }
  assert_eq("Range based for loop failed.", n, 9);
  for i in zero..10 {
    n = i;
  }
  assert_eq("Range based for loop failed.", n, 9);
}

#test fn test_tuple_destructure_in_for_loop() {
  mut list: List!<(s32, s32)>;
  list.push((0, 0));
  list.push((1, 1));
  list.push((2, 2));
  list.push((3, 3));

  mut i := 0;
  for x, y in list {
    assert("failed", x == i && y == i);
    ++i;
  }

  for *x, *y in list.iter_mut() {
    (*x) *= 2;
    (*y) *= 2;
  }

  i = 0;
  for x, y in list {
    assert("failed on set in tuple", x == i * 2 && y == i * 2);
    i++;
  }
}

struct __Struct {
  x: s32,
  y: s32,
}

import fmt::*;
#test fn test_struct_destructure_in_for_loop() {
  mut list: List!<__Struct>;
  list.push(.{x: 0, y: 0});
  list.push(.{x: 1, y: 1});
  list.push(.{x: 2, y: 2});
  list.push(.{x: 3, y: 3});

  mut i := 0;
  for x, y in list {
    assert("failed", x == i && y == i);
    ++i;
  }

  for *x, *y in list.iter_mut() {
    (*x) *= 2;
    (*y) *= 2;
  }

  i = 0;
  for x, y in list {
    assert("failed on set for struct", x == i * 2 && y == i * 2);
    i++;
  }
}

enum SwitchCaseEnum {
  SwitchVariant0,
  SwitchVariant1,
}

fn switch_helper() -> s32 {
  number := 5;
  switch number {
    0: { return 0; }
    5: { return 5; }
  };
  return 1;
}

// ! Some stuff is commented out in here.
// ! There are repros for these items.
#test fn test_switch_statements() {
  integer: s32;

  mut passed := false;
  switch integer {
    0: { passed = true; }
    1: { assert("Switch on s32 case failed", false);  }
  };

  assert("Failed to hit positive switch case for integer", passed);
  s := "Hello!";

  passed = false;
  switch s {
    "Hello": { assert("Switch case on str failed", false); }
    "Hello!": { passed = true; }
  }
  assert("Failed to hit positive switch case for str", passed);

  passed = false;
  switch SwitchCaseEnum::SwitchVariant0 {
    SwitchCaseEnum::SwitchVariant0: {
      passed = true;
    }
    SwitchCaseEnum::SwitchVariant1: {
      assert("Switch on enum value failed", false);
    }
  }
  assert("Failed to hit positive switch case for enum", passed);

  /*  With return value as expression :  */

  new_int := switch integer {
    0: { return integer; }
    1 => -1,
  }

  assert("Return value of switch statement failed", new_int == integer);

  // test range based shiz.
  // passed = false;
  // switch 0 {
  //   0..10: {
  //     passed = true;
  //   }
  //   10..20: {
  //     assert("switch on range passing in number failed", false);
  //   }
  // }
  // assert("Failed to pass range based switch statement", passed);

  assert("Returns in switched failed", switch_helper() == 5);
}

#test fn test_switch_with_else() {
  n := 0;
  case := switch n {
    1 => false,
    else => true,
  }
  assert("switch with else case failed", case as bool);
}


#test fn test_iterate_iter() {
  mut list: List!<s32> = List!<s32>::init(.[0,1,2,3,4,5,6,7,8,9,10]);
  mut idx := 0;
  for v in list.iter() {
    assert("list.iter() for loop failed", v == idx);
    idx++;
  }
  idx = 0;
  for v in list.iter_mut() {
    assert("list.iter() for loop failed", (*v) == idx);
    idx++;
  }
}

#test fn test_iterate_enumerator() {
  range := 0..10;
  mut idx := 0;
  for v in range.iter() {
    assert("range.iter() for loop failed", v == idx);
    idx++;
  }
}