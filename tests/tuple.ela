import assertion::*;

fn func_returns_tuple() -> (s32, s32) {
  return (10, 10);
}

fn func_takes_tuple_arg(tuple: (s32, s32)) -> (s32, s32) {
  a, b := tuple;
  return (a + 10, b + 10);
}


#test fn test_tuple_array() {
  array : [(s32, s32); 1] = .[(10, 10)];
  a, b := array[0];
  assert(a == 10 && b == 10, "Storing tuple in array failed");
}

#test fn test_tuple_fn_interactions() {
  {
    a, b := func_returns_tuple();
    assert(a == 10 && b == 10, "returning tuple from function failed");
  }

  tuple := (0, 0);
  a, b := func_takes_tuple_arg(tuple);
  assert(a == 10 && b == 10, "returning tuple from function that took it as arg and mutated it failed");
}

#test fn test_nested_tuple() {
  nested := (1, (2, 3));
  {
    _, tup := nested;
    a, b := tup;
    assert(a == 2 && b == 3 && _ == 1, "nested tup failed");
  }
}

#test fn test_tuples() {
  t1 : (s32, s32, s32) = (0, 1, 2);
  {
    a,b,c := t1;
    assert(a == 0 && b == 1 && c == 2, "Declaring typed tuple failed.");
  }

  t2 := (3, 2, 1, 0);
  {
    a,b,c,d := t2;
    assert(a == 3 && b == 2 && c == 1 && d == 0, "Destructuring inferred tuple failed.");
  }
}

#test fn test_tuple_ptr () {
  ptr : *mut (s32, s32) = std::c::malloc(32);
  *ptr = (10, 10);
  {
    a, b := *ptr; 
    assert(a == 10 && b == 10, "mallocing with tuple failed");
  }

  mut ptr_arr: List!<*mut (s32, s32)>;
  ptr_arr.push(ptr);
  {
    a, b := *(ptr_arr[0]);
    assert(a == 10 && b == 10, "mallocing into tuple array failed");
  }   

  std::c::free(ptr);
}

#test fn test_tuple_destructure_with_ptr() {
  &mut x, &mut y := (10, 20);
  *x = 100;
  *y = 200;
  assert(*x == 100 && *y == 200, "tdr fail");
}
