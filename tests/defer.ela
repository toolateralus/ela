import assertion::*;

/* 
 * :: Important :: 
  - Some of these value-based returns from defers may be surprising in that they do not mutate the variables.
  - This is because the defer is always executed after the return value is already obtained: they are merely for mutating state on exit,
    such as calling cleanup functions, not changing the value of the return value post return.
  - Be aware that defers will not modify the value of the thing being returned as they are executed after the return expression is already evaluated.
*/

fn nested_defer_test() -> s32 {
  mut x := 0;
  defer x += 1;
  if (true) {
    defer x += 2;
  }
  return x;
}

#test fn test_nested_defer() {
  assert(nested_defer_test() == 2, "nested defer failed");
}

fn loop_defer_test() -> s32 {
  mut x := 0;
  for i in 0..3 {
    defer x += i;
  }
  return x;
}

#test fn test_loop_defer() {
  assert(loop_defer_test() == 3, "loop defer failed");
}

fn early_return_defer_test() -> s32 {
  mut x := 0;
  defer x += 1;
  if (true) {
    defer x += 2;
    return x;
  }
  return x;
}

#test fn test_early_return_defer() {
  assert(early_return_defer_test() == 0, "early return defer failed");
}

struct DeferCleanup {
  ptr : *mut void
}

// Return statements are evaluated BEFORE the defer, so
// do not try to change a non-pointer, or what a pointer points to,
// and expect that to propagate to the caller via return.

// here we show that the ptr as a u64 is passed back to the caller before it's set to null
// in the defer block. which is absolutely expected behaviour.
fn defer_cleanup_routine(mut c: *mut DeferCleanup) -> u64 {
  defer {
    std::c::free(c.ptr);
    c.ptr = null;
  }
  assert(c.ptr != null, "defer cleanup got null input");
  return (c.ptr as *mut u64) as u64;
}

#test fn test_defer_cleanup_routine() {
  ptr := std::c::malloc(8);
  mut cleanup := DeferCleanup .{
    ptr: ptr
  };
  ptr_as_int : u64 = ptr as u64;
  n := defer_cleanup_routine(&mut cleanup);
  assert(n == ptr_as_int, "yep");
  assert(cleanup.ptr == null, "leanup on defer failed");
}

// Additional comprehensive tests
fn continue_defer_test() -> s32 {
  mut x := 0;
  for i in 0..3 {
    defer x += 1;
    if (i == 1) {
      continue;
    }
    x += 2;
  }
  return x;
}

#test fn test_continue_defer() {
  assert(continue_defer_test() == 7, "ontinue defer failed");
}

fn break_defer_test() -> s32 {
  mut x := 0;
  for i in 0..3 {
    defer x += 1;
    if (i == 1) {
      break;
    }
    x += 2;
  }
  return x;
}

#test fn test_break_defer() {
  assert(break_defer_test() == 4, "break defer failed");
}

fn multiple_defer_test() -> s32 {
  mut x := 0;
  defer x += 1;
  defer x += 2;
  return x;
}

#test fn test_multiple_defer() {
  assert(multiple_defer_test() == 0, "multiple defer failed");
}

fn nested_control_flow_defer_test() -> s32 {
  mut x := 0;
  for i in 0..3 {
    defer x += 1;
    if (i == 1) {
      defer x += 2;
      break;
    }
    x += 3;
  }
  return x;
}

#test fn test_nested_control_flow_defer() {
  assert(nested_control_flow_defer_test() == 7, "nested control flow defer failed");
}