import assertion::*;

trait DynInterface {
  fn default_getter(*const self) -> s32 {
    return 0;
  }
  fn scrut(*const self) -> f64;
}

impl DynInterface for s32 {
  fn scrut(*const self) -> f64 {
    return 100.0;
  }
}

impl DynInterface for u32 {
  fn scrut(*const self) -> f64 {
    return 200.0;
  }
}

#test fn test_dynamic_dispatch() {
  mut num := 0;
  d := dynof(&mut num, DynInterface);
  assert(d.default_getter() == 0, "dyn default method failed");
}

#test fn test_dynamic_dispatch_non_default() {
  mut num := 0;
  d := dynof(&mut num, DynInterface);
  assert(d.scrut() == 100.0, "dyn default method failed");
}

#test fn test_dynamic_dispatch_non_default_2() {
  mut num : u32 = 0;
  d := dynof(&mut num, DynInterface);
  assert(d.scrut() == 200.0, "dyn default method failed");
}

#test fn test_dynamic_dispatch_non_default_3() {
  mut num1 : s32 = 0;
  mut num : u32 = 0;
  mut d := dynof(&mut num, DynInterface);
  assert(d.scrut() == 200.0, "dyn default method failed");
  d = dynof(&mut num1);
  assert(d.scrut() == 100.0, "dyn default method failed");
}

fn dyn_func(o: dyn DynInterface) {
  assert(o.scrut() == 100.0, "dyn as param failed");
}

fn dyn_returns() -> dyn DynInterface {
  mut num := 0;
  return dynof(&mut num);
}

#test fn test_dyn_as_param_and_return_value() {
  iface := dyn_returns();
  dyn_func(iface);
  assert(iface.scrut() == 100.0, "dyn returned from func failed");
}

struct Strakt {
  obj: dyn DynInterface,
}

#test fn test_dyn_as_struct_member() {
  mut x := 0;
  s: Strakt = .{
    obj: dynof(&mut x),
  };
  assert(s.obj.scrut() == 100.0, "nested call of dyn failed");
}

#test fn test_dyn_from_array() {
  mut x := 0;
  mut array: [dyn DynInterface; 100];
  array[0] = dynof(&mut x);
  assert(array[0].scrut() == 100.0, "dyn call from array failed");
}

#test fn test_dyn_from_list() {
  mut x := 0;
  mut array: List!<dyn DynInterface>;
  array.push(dynof(&mut x));
  assert((array[0]).scrut() == 100.0, "dyn call from array failed");
}

impl Strakt {
  fn new() -> Self {
    mut self: Self;
    self.obj = dynof(new(0));
    return self;
  }

  fn init(*mut self) {
    self.obj = dynof(new(0));
  }
}