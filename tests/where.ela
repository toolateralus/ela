struct TestStruct {}
trait TestInterface {}
trait TestInterface1 {}
impl TestInterface for TestStruct {}
impl TestInterface1 for TestStruct {}
struct TestStruct1!<T> where T: TestInterface & TestInterface1 {}

struct TestStruct2 {}
impl TestInterface for TestStruct2 {}

struct TestStruct3!<T> where T: TestInterface | TestInterface1 {}

struct TestStruct4!<T> where T: s32 | f32 {}

fn TestFn!<T>() where T: s32 | f32 {
}

fn TestFn1!<T>() -> T where T: s32 | f32 {
  return .{};
}

struct TestStruct5!<T> where T: s32 | f32 {}

trait TestInterface2!<T> where T: s32 | f32 {}

impl TestInterface2!<s32> for TestStruct {}

impl!<T> TestInterface2!<T> for TestStruct5!<T> where T: s32 | f32 {}

struct TestCompound!<T, T1> where T: s32, T1: s64 {

}


// This test will just yield compile errors, no need for runtime assertions.
#test fn test_instantiation_of_wheres() {
  s1: TestStruct1!<TestStruct>;
  s2: TestStruct3!<TestStruct>;
  s3: TestStruct3!<TestStruct2>;
  s4: TestStruct4!<s32>;
  s5: TestStruct4!<f32>;
  TestFn!<s32>();
  TestFn!<f32>();
  s6: TestStruct5!<s32>;
  s7: TestStruct5!<f32>;
  _s8: TestCompound!<s32, s64>;
}

