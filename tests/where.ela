TestStruct :: struct {}
TestInterface :: interface {}
TestInterface1 :: interface {}
impl TestInterface for TestStruct {}
impl TestInterface1 for TestStruct {}
TestStruct1 :: struct!<T> where T: TestInterface & TestInterface1 {}

TestStruct2 :: struct {}
impl TestInterface for TestStruct2 {}

TestStruct3 :: struct!<T> where T: TestInterface | TestInterface1 {}

TestStruct4 :: struct!<T> where T: s32 | f32 {}

TestFn :: fn!<T>() where T: s32 | f32 {
}

TestFn1 :: fn!<T>() -> T where T: s32 | f32 {
  return .{};
}

TestStruct5 :: struct!<T> where T: s32 | f32 {}

TestInterface2 :: interface!<T> where T: s32 | f32 {}

impl TestInterface2!<s32> for TestStruct {}

impl!<T> TestInterface2!<T> for TestStruct5!<T> where T: s32 | f32 {}

TestCompound :: struct!<T, T1> where T: s32, T1: s64 {

}

#test test_instantiation_of_wheres :: fn() {
  s1: TestStruct1!<TestStruct>;
  s2: TestStruct3!<TestStruct>;
  s3: TestStruct3!<TestStruct2>;
  s4: TestStruct4!<s32>;
  s5: TestStruct4!<f32>;
  TestFn!<s32>();
  TestFn!<f32>();
  s6: TestStruct5!<s32>;
  s7: TestStruct5!<f32>;
  _s8: TestCompound!<s32, s64>;
}




