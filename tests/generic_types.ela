import assertion::*;

struct GenericStruct!<T> {
  a: T,
  b: T,
}

impl!<T> GenericStruct!<T> {
  fn add(*mut self) -> T {
    return self.a + self.b;
  }
}

#test fn test_generic_struct() {
  mut int_adder: GenericStruct!<s32> = .{a: 5, b: 6};
  assert_eq(int_adder.add(), 5 + 6);
  mut float_adder: GenericStruct!<f32> = .{a: 1.23, b: 4.56};
  assert_eq_f32(float_adder.add(), 1.23 + 4.56);
}

union GenericUnion!<T, T1> {
  a: T,
  b: T1,
}

#test fn test_generic_union() {
  mut int_adder: GenericUnion!<s32, f32>;
  int_adder.a = 11;
  assert_eq(int_adder.a, 5 + 6);
  int_adder.b = 1.23 + 4.56;
  assert_eq_f32(int_adder.b, 1.23 + 4.56);
}