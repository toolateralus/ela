#import json;
#import directory;
#error "This thing is totally broken. Workin on it!"


JsonValueDeleter :: struct {
  vals: List![JsonValue*],
}

impl JsonValueDeleter {
  add :: fn(self*, val: JsonValue*) {
    self.vals.push(val);
  }
  // *fixme
  destroy :: fn(self*) {
    for val in self.vals {
      free(val);
    }
  }
}

// #test test_json_types :: fn() {
//   deleter: JsonValueDeleter;
//   defer deleter.destroy();

//   val : JsonValue*;
//   err : JsonError;

//   err, val = json_parse_string("true");

//   if err.has_value {
//     assert($"{err.message} failed to parse bool".data, false);
//   }

//   deleter.add(val);
//   assert("bool", val.is_boolean());

//   err, val = json_parse_string("32.1");
//   if err.has_value {
//     assert($"{err.message} failed to parse number".data, false);
//   }

//   deleter.add(val);
//   assert("number", val.is_number());

//   err, val = json_parse_string("\"hello\"");
//   if err.has_value {
//     assert($"{err.message} failed to parse string".data, false);
//   }
//   deleter.add(val);
//   assert("string", val.is_string());

//   err, val = json_parse_string("[1, 2, 3]");
//   if err.has_value {
//     assert($"{err.message} json parse string, [1,2,3]".data, false);
//   }
//   deleter.add(val);
//   assert("array", val.is_array());

//   err, val = json_parse_string("{\"key\": \"value\"}");
//   if err.has_value {
//     assert($"{err.message} json_parse_string object(key: value)".data, false);
//   }
//   deleter.add(val);
//   assert("object", val.is_object());

//   err, val = json_parse_string("null");
//   if err.has_value {
//     assert($"{err.message} json parse string null".data, false);
//   }
//   deleter.add(val);
//   assert("null", val.is_null());
// }

// #test test_json_values :: fn() {
//   deleter: JsonValueDeleter;
//   val : JsonValue*;
//   err : JsonError;

//   err, val = json_parse_string("true");
//   if err.has_value {
//     assert($"{err.message} json_parse_string true ".data, false);
//   }
//   deleter.add(val);
//   assert("bool", val.as_boolean() == true);

//   err, val = json_parse_string("32.1");
//   if err.has_value {
//     assert($"{err.message} json_parse_string 32.1".data, false);
//   }
//   deleter.add(val);
//   assert("number", val.as_number() == atof("32.1"));

//   err, val = json_parse_string("\"hello\"");
//   if err.has_value {
//     assert($"{err.message} json_parse_string \"hello\"".data, false);
//   }
//   deleter.add(val);
//   assert("string", val.as_string() == "hello");

//   err, val = json_parse_string("[1, 2, 3]");
//   if err.has_value {
//     assert($"{err.message} json_parse_string [1,2,3]".data, false);
//   }
//   deleter.add(val);
//   assert("array length", val.as_array().length == 3);
//   assert("array element 0", val.at(0).as_number() == 1);
//   assert("array element 1", val.at(1).as_number() == 2);
//   assert("array element 2", val.at(2).as_number() == 3);

//   err, val = json_parse_string("{\"key\": \"value\"}");
//   if err.has_value {
//     assert($"{err.message} object(key, value)".data, false);
//   }
//   deleter.add(val);
//   assert("object key", val.get("key").as_string() == "value");
// }

// #test test_scalar_deserialization :: fn() {
//   n : s32 = 100;
//   err, json := json_serialize(&n, #type(s32));
//   if err.has_value {
//     assert($"{err.message} serialize s32".data, false);
//   }
//   deleter: JsonValueDeleter;
//   deleter.add(json);
//   n = 0;
//   assert("json serialize scalar", json.is_number());
//   err = json_deserialize_scalar(json, &n, #type(s32));
//   assert($"json error {err}".data, !err.has_value);
//   assert("json deserialize scalar, s32", n == 100);
// }

// MyJsonStruct :: struct {
//   n: s64,
//   b: f32,
// }
// impl MyJsonStruct {
//   to_string ::fn(self*) -> string {
//     return $"MyJsonStruct [n: {self.n}, b: {self.b}]";
//   }
// }

// #test test_struct_deserialization :: fn() {
//   n : MyJsonStruct = {
//     n: 100,
//     b: 200.0
//   };
//   err, json := json_serialize(&n, #type(MyJsonStruct));
//   if err.has_value {
//     assert($"{err.message}".data, false);
//   }
//   deleter: JsonValueDeleter;
//   deleter.add(json);
//   n = {};
//   assert("json  serialize  object", json.is_object());
//   err = json_deserialize(json, &n, #type(MyJsonStruct));
//   assert("json error", !err.has_value);
//   assert("json deserialize object", n.n == 100 && n.b == 200.0);
// }

// #test test_json_comprehensive :: fn() {
//   deleter: JsonValueDeleter;
//   val : JsonValue*; err: JsonError;

//   err, val = json_parse_file("tests/test.json");

//   if err.has_value {
//     assert($"{err.message}".data, false);
//   }

//   deleter.add(val);
//   assert("string", val.get("string").as_string() == "Hello, World!");
//   assert("number", val.get("number").as_number() == 42);
//   assert("boolean", val.get("boolean").as_boolean() == true);
//   assert("null_value", val.get("null_value").is_null());

//   array_val := val.get("array");
//   assert("array length", array_val.as_array().length == 4);
//   assert("array element 0", array_val.at(0).as_number() == 1);
//   assert("array element 1", array_val.at(1).as_string() == "two");
//   assert("array element 2", array_val.at(2).as_boolean() == false);
//   assert("array element 3", array_val.at(3).is_null());

//   object_val := val.get("object");
//   assert("nested_string", object_val.get("nested_string").as_string() == "Nested Hello");
//   assert("nested_number", object_val.get("nested_number").as_number() == atof("3.14"));
//   assert("nested_boolean", object_val.get("nested_boolean").as_boolean() == false);

//   nested_array_val := object_val.get("nested_array");
//   assert("nested_array length", nested_array_val.as_array().length == 3);
//   assert("nested_array element 0", nested_array_val.at(0).as_string() == "a");
//   assert("nested_array element 1", nested_array_val.at(1).as_string() == "b");
//   assert("nested_array element 2", nested_array_val.at(2).as_string() == "");

//   nested_object_val := object_val.get("nested_object");
//   assert("deeply_nested_key", nested_object_val.get("deeply_nested_key").as_string() == "Deep Value");
// } 
