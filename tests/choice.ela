OptionT :: choice!<T> {
  Some(T),
  None,
}

Math :: choice {
  Vector2 { x: f32, y: f32 },
  Vector3 { x: f32, y: f32, z: f32 },
}

#test test_init_tuple :: fn() {
  /* 
    this treats what would get normally parsed as a call,
    as some sort of a tuple literal.

    * we should be able to do this as well, i.e strong inference.
    * mut x : OptionT!<s32> = Some(10);
  */
  mut x := OptionT!<s32>::Some(10);
}

#test test_init_struct :: fn() {
  /* struct thing, kinda would just work with init list. */
  x := Math::Vector2.{
    x: 0.0,
    y: 0.0
  };
}

#test test_reassign_and_marker_style :: fn() {
  mut x := OptionT!<s32>::Some(10);
  x = OptionT!<s32>::None;
}

return_choice :: fn() -> Math {
  return Math::Vector2.{x: 0, y: 0};
}

get_value :: fn() -> Math {
  return Math::Vector2.{x: 10, y: 10};
}

#test test_pattern_matching_struct_patterns :: fn() {
  val := get_value();
  /* pattern match, named args. mutability optional */
  if val is Math::Vector2.{ x: mut x, y: mut y } {
    assert("pattern match destructure failed", x == 10 && y == 10);
  } 

  if val is Math::Vector2.{ x: x, y: y } {
    assert("pattern match destructure failed 2", x == 10 && y == 10);
  }

  /* again, positional. */
  if val is Math::Vector3.{ x: x, y: y, z: z } {
    assert("pattern match failed", false);
  }
}

#test test_pattern_matching_tuple_patterns :: fn() {
  x := OptionT!<s32>::Some(10);
  /* pattern match, take tuple members as a destructured list */
  if x is OptionT!<s32>::Some(v) {
    // fmt::println(v);
  }
}

#test test_pattern_matching_in_switch :: fn() {
  const widget := Math::Vector2.{
    x: 0.0,
    y: 1.0,
  };

  mut hit := false;

  switch is widget {
    Math::Vector2.{x: x, y: y}: {
      hit = x == 0.0 && y == 1.0;
    }
    else: {
      assert("hit nothing", false);
    }
  }
  assert("'switch is' failed", hit);
}

choice_as_param :: fn(math: Math) {
  // TODO: do we want to allow  { !(math is Pattern)  } ?
  // TODO: or do we want        { math is not Pattern } ?
  if math is Math::Vector2.{x: _, y: _1} {
    // pass.
  } else {
    assert("failed to pattern match parameter choice type", false);
  }
}

#test test_choice_as_param :: fn() {
  choice_as_param(Math::Vector2.{x: 0, y: 0});
}