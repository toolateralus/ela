struct Vec2 {
  x: f32,
  y: f32,
}

trait Add!<Right, Result> {
  fn add(*mut self, right: Right) -> Result;
}

impl Add!<Vec2, Vec2> for Vec2 {
  fn add(*mut self, right: Vec2) -> Vec2 {
    return .{
      x: self.x + right.x,
      y: self.y + right.y
    };
  }
}

#test fn test_main() {
  mut a, mut b := (Vec2.{x: 1, y: 1}, Vec2.{x: 1, y: 1});
  
  result := a.add(b);
  assert("+ failed",  result.x == 2 && result.y == 2);
}

trait Sub!<Right, Result> {
  fn sub(*mut self, right: Right) -> Result;
}

impl Sub!<Vec2, Vec2> for Vec2 {
  fn sub(*mut self, right: Vec2) -> Vec2 {
    return .{
      x: self.x - right.x,
      y: self.y - right.y
    };
  }
}

trait Neg!<Result> {  fn neg(*mut self) -> Result;
}

impl Neg!<Vec2> for Vec2 {
  fn neg(*mut self) -> Vec2 {
    return .{
      x: -self.x,
      y: -self.y
    };
  }
}

impl Vec2 {
  fn subscript(*const self, index: s32) -> *const f32 {
    if index == 0 {
      return &const self.x;
    } else {
      return &const self.y;
    }
  }

  fn subscript_mut(*mut self, index: s32) -> *mut f32 {
    if index == 0 {
      return &mut self.x;
    } else {
      return &mut self.y;
    }
  }
}

#test fn test_sub() {
  mut a, b := (Vec2.{x: 3, y: 2}, Vec2.{x: 1, y: 1});
  
  result := a.sub(b);
  assert("- failed",  result.x == 2 && result.y == 1);
}

#test fn test_neg() {
  mut a := Vec2.{x: 3, y: 2};
  
  result := a.neg();
  assert("neg failed",  result.x == -3 && result.y == -2);
}

#test fn test_index() {
  mut a := Vec2.{x: 3, y: 2};
  
  assert("index 0 failed", a[0] == 3);
  assert("index 1 failed", a[1] == 2);
}

impl Vec2 {
  fn deref(*mut self) -> *mut f32 {
    return &mut self.x;
  }
}

#test fn test_deref() {
  mut a := Vec2.{
    x: 100.0,
    y: 200.0,
  };

  *a = 300.0;

  assert_eq("deref assign failed", a.x, 300.0);
  assert_eq("deref assign failed", *a, 300.0);
}
