
#region basic_struct {

  Struct :: struct {
    a := 0;
    b := 0.0;
    c := false;
  }

  Basic :: interface {
    static_get :: fn() -> int;
    method_get :: fn(self) -> int;
    method_get_ptr :: fn(self*) -> int;
    method_get_self :: fn(self*) -> #self;
    static_get_self :: fn() -> #self;
  }

  impl Basic for Struct {
    static_get :: fn() -> int {
      return 0;
    }
    method_get :: fn(self) -> int {
      return self.a;
    }
    method_get_ptr :: fn(self*) -> int {
      return self.a
    }
    method_get_self :: fn(self*) -> #self {
      return {a: 100};
    }
    static_get_self :: fn() -> #self {
      return {a: 100};
    }
  }
}

#test basic_struct :: fn() {
  assert("interface failed", Struct::static_get() == 0);
  assert("interface failed", Struct::static_get_self().a == 100);
  instance: Struct;
  assert("interface failed", instance.method_get() == 0);
  assert("interface failed", instance.method_get_ptr() == 0);
  assert("interface failed", instance.method_get_self().a == 100);
}

#region generic_interface_regular_struct {
  GenericInterface :: interface![T] {
    static_get :: fn() -> T;
    method_get :: fn(self) -> T;
    method_get_ptr :: fn(self*) -> T;
    method_get_self :: fn(self*) -> #self;
    static_get_self :: fn() -> #self;
  }

  Struct1 :: struct {
    a := 0;
    b := 0.0;
    c := false;
  }

  impl GenericInterface![int] for Struct1 {
    static_get :: fn() -> int {
      return 0;
    }
    method_get :: fn(self) -> int {
      return self.a;
    }
    method_get_ptr :: fn(self*) -> int {
      return self.a
    }
    method_get_self :: fn(self*) -> #self {
      return Struct1 {a: 100};
    }
    static_get_self :: fn() -> #self {
      return Struct1 {a: 100};
    }
  }
}

#test generic_interface_regular_struct :: fn() {
  assert("interface failed", Struct1::static_get() == 0);
  assert("interface failed", Struct1::static_get_self().a == 100);
  instance: Struct1;
  assert("interface failed", instance.method_get() == 0);
  assert("interface failed", instance.method_get_ptr() == 0);
  assert("interface failed", instance.method_get_self().a == 100);
}

#region generic interface generic struct {
  Struct2 :: struct![T] {
    n: T;
  }  

  impl![T] GenericInterface![T] for Struct2![T] {
    static_get :: fn() -> T {
      t: T;
      return t;
    }
    method_get :: fn(self) -> T {
      t: T;
      return t;
    }
    method_get_ptr :: fn(self*) -> T {
      t: T;
      return t;
    }
    method_get_self :: fn(self*) -> #self {
      t: T;
      return {n: t};
    }
    static_get_self :: fn() -> #self {
      t: T;
      return {n: t};
    }
  }
}

#test generic_struct_generic_interface :: fn() {
  assert("interface failed", Struct2![int]::static_get() == 0);
  assert("interface failed", Struct2![int]::static_get_self().n == 0);
  instance: Struct2![int];
  assert("interface failed", instance.method_get() == 0);
  assert("interface failed", instance.method_get_ptr() == 0);
  assert("interface failed", instance.method_get_self().n == 0);
}

#region uninstantiated generic {
  GenericWithoutInstance :: struct![T] { }

  impl![T] GenericWithoutInstance![T] {
    thing :: fn(self*, t: T) { }
  }
}