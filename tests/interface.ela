
#region basic_struct {

  Struct :: struct {
    a: s32,
    b: f32,
    c: bool,
  }

  Basic :: interface {
    static_get :: fn() -> s32;
    method_get :: fn(self) -> s32;
    method_get_ptr :: fn(*mut self) -> s32;
    method_get_self :: fn(*mut self) -> #self;
    static_get_self :: fn() -> #self;
  }

  impl Basic for Struct {
    static_get :: fn() -> s32 {
      return 0;
    }
    method_get :: fn(self) -> s32 {
      return self.a;
    }
    method_get_ptr :: fn(*mut self) -> s32 {
      return self.a
    }
    method_get_self :: fn(*mut self) -> #self {
      return .{a: 100};
    }
    static_get_self :: fn() -> #self {
      return .{a: 100};
    }
  }
}

#test basic_struct :: fn() {
  assert("interface failed", Struct::static_get() == 0);
  assert("interface failed", Struct::static_get_self().a == 100);
  mut instance: Struct;
  assert("interface failed", instance.method_get() == 0);
  assert("interface failed", instance.method_get_ptr() == 0);
  assert("interface failed", instance.method_get_self().a == 100);
}

#region generic_interface_regular_struct {
  GenericInterface :: interface!<T> {
    static_get :: fn() -> T;
    method_get :: fn(self) -> T;
    method_get_ptr :: fn(*mut self) -> T;
    method_get_self :: fn(*mut self) -> #self;
    static_get_self :: fn() -> #self;
  }

  Struct1 :: struct {
    a: s32,
    b: f32,
    c: bool,
  }

  impl GenericInterface!<s32> for Struct1 {
    static_get :: fn() -> s32 {
      return 0;
    }
    method_get :: fn(self) -> s32 {
      return self.a;
    }
    method_get_ptr :: fn(*mut self) -> s32 {
      return self.a
    }
    method_get_self :: fn(*mut self) -> #self {
      return Struct1 .{a: 100};
    }
    static_get_self :: fn() -> #self {
      return Struct1 .{a: 100};
    }
  }
}

#test generic_interface_regular_struct :: fn() {
  assert("interface failed", Struct1::static_get() == 0);
  assert("interface failed", Struct1::static_get_self().a == 100);
  mut instance: Struct1;
  assert("interface failed", instance.method_get() == 0);
  assert("interface failed", instance.method_get_ptr() == 0);
  assert("interface failed", instance.method_get_self().a == 100);
}

#region generic interface generic struct {
  Struct2 :: struct!<T> {
    n: T
  }  

  impl!<T> GenericInterface!<T> for Struct2!<T> {
    static_get :: fn() -> T {
      t: T;
      return t;
    }
    method_get :: fn(self) -> T {
      t: T;
      return t;
    }
    method_get_ptr :: fn(*mut self) -> T {
      t: T;
      return t;
    }
    method_get_self :: fn(*mut self) -> #self {
      t: T;
      return .{n: t};
    }
    static_get_self :: fn() -> #self {
      t: T;
      return .{n: t};
    }
  }
}

#test generic_struct_generic_interface :: fn() {
  assert("interface failed", Struct2!<s32>::static_get() == 0);
  assert("interface failed", Struct2!<s32>::static_get_self().n == 0);
  mut instance: Struct2!<s32>;
  assert("interface failed", instance.method_get() == 0);
  assert("interface failed", instance.method_get_ptr() == 0);
  assert("interface failed", instance.method_get_self().n == 0);
}

#region uninstantiated generic {
  GenericWithoutInstance :: struct!<T> { }

  impl!<T> GenericWithoutInstance!<T> {
    thing :: fn(*mut self, t: T) { }
  }
}