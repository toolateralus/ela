
#import core;

function_pointer_helper :: fn(x: int, y: int) -> int { return x * y; }

// This is totally bugged.
//! See emitter 'get_function_pointer_dynamic_array_declaration', this is super bugged.
//! particularly, lists/ dynamic arrays of function pointers are super shoddy.
#test test_function_pointer_alias :: fn() {
  #alias FunctionPointer :: fn* (int, int) -> int;
  ptr := &function_pointer_helper;
  assert("Function pointer call"c, ptr(2, 3) == 6);


  // array: FunctionPointer[] = {&function_pointer_helper};
  // from_arr : FunctionPointer = &array[0];
  // assert("Array of function pointers"c, from_arr(2, 3) == 6);

  // fixed: FunctionPointer[12];
  // fixed[0] = &function_pointer_helper;
  // from_fixed : FunctionPointer = &fixed[0];

  // assert("Fixed array of function pointers"c, from_fixed(2, 3) == 6);

  // function :: fn() -> FunctionPointer {
  //   return &function_pointer_helper;
  // }

  // returned_ptr : FunctionPointer = function();
  // assert("Function returning function pointer"c, returned_ptr(2, 3) == 6);
}