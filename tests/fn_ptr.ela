import assertion::*;

fn function_pointer_helper(x: s32, y: s32) -> s32 { return x * y; }

type FunctionPointer :: fn (s32, s32) -> s32;

#test fn test_function_pointer_alias() {
  ptr := &mut function_pointer_helper;
  assert(ptr(2, 3) == 6, "Function pointer call");

  mut array: List!<FunctionPointer>;
  array.push(&mut function_pointer_helper);
  from_arr : FunctionPointer = array[0];
  assert(from_arr(2, 3) == 6, "Array of function pointers");

  mut fixed: [FunctionPointer; 12];
  fixed[0] = &mut function_pointer_helper;
  from_fixed : FunctionPointer = fixed[0];
  assert(from_fixed(2, 3) == 6, "Fixed array of function pointers");
}