import assertion::*;

#test fn test_conditional_compilation() {
  #def CHEESE;

  #ifdef HAMBURGER {
    const CONSTANT0 := 100;
  } else ifdef CHEESE {
    const CONSTANT0 := 20;
  } else {
    const CONSTANT0 := 10;
  }
  
  assert(CONSTANT0 == 20, "ifdef failed");
  #undef CHEESE;

  #def HAMBURGER;

  #ifdef HAMBURGER {
    const CONSTANT1 := 100;
  } else ifdef CHEESE {
    const CONSTANT1 := 20;
  } else if true {
    const CONSTANT1 := 10;
  }
  
  assert(CONSTANT1 == 100, "ifdef failed");

  #undef HAMBURGER;
  
  #ifdef HAMBURGER {
    const CONSTANT2 := 100;
  } else ifdef CHEESE {
    const CONSTANT2 := 20;
  } else  {
    const CONSTANT2 := 10;
  }

  
  assert(CONSTANT2 == 10, "ifdef failed");

  #ifndef HAMBURGER {
    const CONSTANT3 := 100;
  } 

  assert(CONSTANT3 == 100, "ifndef failed");

  #def thing

  #ifndef thing {
    for i in 0..100 {
      n := i;
      if i % 3 == 1 {
        n -= 2;
      }
    }
    assert(false, "ndef");
  } else {
    for i in 0..100 {
      mut n := i;
      if i % 3 == 1 {
        n -= 2;
      }
    }
    assert(true, "ndef");
  }

  #undef thing;
  
  #ifndef thing {
    for i in 0..100 {
      mut n := i;
      if i % 3 == 1 {
        n -= 2;
      }
    }
    assert(true, "ndef");
  } else {
    for i in 0..100 {
      mut n := i;
      if i % 3 == 1 {
        n -= 2;
      }
    }
    assert(false, "ndef");
  }
}


#test fn test_constexpr_if() {
  #if true {
    mut n := 0;
  } else {
    mut n := 1;
  }
  assert(n == 0, "`#if true` failed");

  const CONSTANT_EXPR := 100 * 2;
  #if CONSTANT_EXPR > 199 {
    n = 1;
  } else {
    n = 0;
  }
  
  assert(n == 1, "#if V(200) > 199 failed");
}