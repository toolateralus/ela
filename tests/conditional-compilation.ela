;

#test test_conditional_compilation :: fn() {
  #def CHEESE;

  #ifdef HAMBURGER {
    const CONSTANT0 := 100;
  } else ifdef CHEESE {
    const CONSTANT0 := 20;
  } else {
    const CONSTANT0 := 10;
  }
  
  assert("ifdef failed", CONSTANT0 == 20);
  #undef CHEESE;

  #def HAMBURGER;

  #ifdef HAMBURGER {
    const CONSTANT1 := 100;
  } else ifdef CHEESE {
    const CONSTANT1 := 20;
  } else if true {
    const CONSTANT1 := 10;
  }
  
  assert("ifdef failed", CONSTANT1 == 100);

  #undef HAMBURGER;
  
  #ifdef HAMBURGER {
    const CONSTANT2 := 100;
  } else ifdef CHEESE {
    const CONSTANT2 := 20;
  } else  {
    const CONSTANT2 := 10;
  }

  
  assert("ifdef failed", CONSTANT2 == 10);

  #ifndef HAMBURGER {
    const CONSTANT3 := 100;
  } 

  assert("ifndef failed", CONSTANT3 == 100);

  #def thing

  #ifndef thing {
    for i in 0..100 {
      n := i;
      if i % 3 == 1 {
        n -= 2;
      }
    }
    assert("ndef", false);
  } else {
    for i in 0..100 {
      mut n := i;
      if i % 3 == 1 {
        n -= 2;
      }
    }
    assert("ndef", true);
  }

  #undef thing;
  
  #ifndef thing {
    for i in 0..100 {
      mut n := i;
      if i % 3 == 1 {
        n -= 2;
      }
    }
    assert("ndef", true);
  } else {
    for i in 0..100 {
      mut n := i;
      if i % 3 == 1 {
        n -= 2;
      }
    }
    assert("ndef", false);
  }
}


#test test_constexpr_if :: fn() {
  #if true {
    mut n := 0;
  } else {
    mut n := 1;
  }
  assert("`#if true` failed", n == 0);

  const CONSTANT_EXPR := 100 * 2;
  #if CONSTANT_EXPR > 199 {
    n = 1;
  } else {
    n = 0;
  }
  
  assert("#if V(200) > 199 failed", n == 1);
}