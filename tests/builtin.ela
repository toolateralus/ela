#test test_string :: fn() {
  my_string := "Xaryu Baryu";
  assert("str length failed to equal expected value", my_string.length == 11);
}

#test test_array :: fn() {
  array : s32[11] = .[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

  for i in 0..11 {
    assert("array element failed to init", i == array[i])
  }
}

Xaryu :: struct {
  value: s32
}

#test test_array_concat_operator :: fn() {
  array: List![s32];
  array.push(10);
  assert("oncat operator failed", array.length == 1);
}

#test test_array_pop_operator :: fn() {
  array: List![s32];
  for i in 0..100 {
    array.push(10);
  }
  n: s32;
  for i in 0..100 {
    n = array.pop();
  }
  assert("pop operator failed", array.length == 0 && n == 10);
}


#test test_range_var :: fn() {
  r : Range = 0..10;
  assert("range variable failed", r.begin == 0 && r.end == 10);

  i: s32;
  for z in r {
    assert("range iteration failed", i == z);
    i++;
  }
}

#test test_slicing_array :: fn() {
  arr := List![s32]::init(.[
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0,
  ]);
  
  assert("Length", arr.length == 11);

  // for i in 0..10 {
  //   arr[i] = 100;
  // }

  subarr := arr.subarray(0..10);

  for i in 0..10 {
    assert("Slice failed", subarr[i] == arr[i]);
  }

  assert("Slice failed", subarr.length == 10);
}



// #test test_multidimensional_arrays :: fn() {
//   array: s32[5][5];
//   for x in 0..5 {
//     for y in 0..5 {
//       array[x][y] = x * y;
//     }
//   }

//   for x in 0..5 {
//     for y in 0..5 {
//       assert("multidimensional failure", array[x][y] == x * y);
//     }
//   }

//   dynamic : List![List![s64]];
//   for x in 0..5 {
//     dynamic.push({});
//     for y in 0..5 {
//       dynamic[x].push(x * y);
//     }
//   }

//   assert("length failed", dynamic.length == 5);

//   for x in 0..5 {
//     for y in 0..5 {
//       assert("multidimensional failure", dynamic[x][y] == x * y);
//     }
//   }
// }

// #test subscript_string :: fn() {
//   s: str = str::from("0,1,2,3");
//   s[0] = 10;
//   assert("subscript assign str failed", s[0] == (10 as u8));
// }
