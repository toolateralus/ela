#test fn test_string() {
  my_string := "Xaryu Baryu";
  assert("str length failed to equal expected value", my_string.length == 11);
}

#test fn test_array() {
  array : [s32; 11] = .[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

  for i in 0..11 {
    assert("array element failed to init", i == array[i]);
  }
}

#test fn test_range_var() {
  r : Range = 0..10;
  assert("range variable failed", r.begin == 0 && r.end == 10);

  i: s32;
  for z in r {
    assert("range iteration failed", i == z);
    i++;
  }
}

#test fn test_multidimensional_arrays() {
  array: [[s32; 5]; 5];
  for x in 0..5 {
    for y in 0..5 {
      array[x][y] = x * y;
    }
  }

  for x in 0..5 {
    for y in 0..5 {
      assert("multidimensional failure", array[x][y] == x * y);
    }
  }

  mut dynamic : List!<List!<s32>>;
  for x in 0..5 {
    dynamic.push(.{});
    for y in 0..5 {
      dynamic[x].push(x * y);
    }
  }

  assert("length failed", dynamic.length == 5);

  for x in 0..5 {
    for y in 0..5 {
      assert("multidimensional failure", dynamic[x][y] == x * y);
    }
  }
}

/* 
  subscript assign will never work on a 'str' _type ;; it's in the .data section, i.e it's a C string literal.
*/
#test fn subscript_string() {
  mut s := String::from("0,1,2,3,4");
  s[0] = 10;
  assert("subscript assign str failed", s[0] == 10);
}
