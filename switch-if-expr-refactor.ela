

// Returns
return switch n { ... };
return if x < 1 { return x + 2; } else { return x / 2; };
return if x < 1 => x + 2 else => x / 2;

// assignment
value = switch n {...};

value = if x => true else => false;

value = if x { 
          return true; 
        } else {
          return false 
        }; 

// declaration
variable := switch get_type() { 
  type_grug => 100, 
  type_blug: { return 2999 * 2; }
};

// << banned types >> 

// non assignment binary/ unary, << banned >>.
// Too complicated to emit, and it looks fricken terrible.
... switch n { a => 1, b => 2 } * switch n1 { b => 2, a => n * 2 } ...

// same as unary, terrible. << banned >>
// way too hard to read and also hard to emit.
-switch n {}

// function arguments << banned >>
// it's ugly and unwieldy.
// if yuo need to do this, just store it in a local variable.
// it's a good compromise as well to simplify emitting
func(switch n {...}, if x { return true } else { return false });

