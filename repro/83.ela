main :: fn() { 
  // We take the address of a r-value here.
  abc := "Hello".as_char_slice().clone();

  // What we should probably do, is for all expressions, calls, etc.
  // unroll each node of an expression into an individual statement.

  // So, a := f(b) * c + d;  would compile to
  $0 := c;
  $1 := d;
  $2 := f(b);
  $3 := $2 * $0;
  $4 := $3 + 1; 
  a  := $4;

  // so that we can do things like take the address of any value or whatever.
  // this would also aid us in doing things like initializer lists, and any casting, and other expression-based 
  // compile time procedures that aren't very easy to do in-line with an expression
  // this might slightttly slow down our compile times, but I think it will allow us to expand on a few stunted features at the moment.

  // also, this will take is down to a more assembly-level way of emitting things, as if we have registers etc.
  // so, maybe in the future when we write our own backend, whether its just x86 or LLVM,
  // it may be a simpler transition if we're already at that lower level of emitting expressions.


  /* 
    * As stated above, we're not going to worry about this until we do a MIR for LLVM emission
    * which is coming very soon.
  */
}
