import fmt::*;

impl!<T> List!<T> {
  fn reverse(*mut self) {
    len := self.length;

    if len <= 1 then return;

    for i in 0..(len / 2) {
      high := len - 1 - i;
      low := i;

      printlnf("swapping indices: % <-> %", (low, high));

      temp := (*self)[low];
      (*self)[low] = (*self)[high];
      (*self)[high] = temp;
    }
  }
}

/* 
  for some reason, if we don't use self.data![idx] when swapping,
  we get a *stack smashing detected*
  There must be something fundamentally wrong with how our index operators
  are implmented,

  possibly it's just the List!<T> index operator.
*/
fn main() { 
  mut list: List!<s64>;
  for i in 0..100 {
    list.push(i);
  }  
  list.reverse();
}
