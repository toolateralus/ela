
import fs::*;
import fmt::*;


impl!<T> T[] {
  filter :: fn(self, predicate: fn *(T*) -> bool) -> #self {
    copy: #self;
    copy.resize(self.length);
    for *value in self {
      if predicate(value) {
        copy.push(*value);
      }
    }
    return copy;
  }
}

import memory::Tracking_Allocator;

main :: fn() {
  directory := Directory::open(".").unwrap();

  entries := directory.entries.filter(fn(entry: String*) -> bool {
    return switch entry.as_str() {
      ".." => false,
      "." => false,
      ".gitignore" => false,
      "counter" => false,
      "all.sh" => false,
      "new.sh" => false,
      "run.sh" => false,
      "run.ela" => false,
      "run" => false,
      else => true,
    };
  });

  allocator: Tracking_Allocator;

  for entry in entries {
    file := File::open!<String>(entry, FileOpenFlags::Read);
    stat := file.stat().unwrap();

    if stat.is_dir() {
      printlnf("'%' :: is dir", .[any::from(&entry)])
    } else {
      printlnf("'%' :: is file", .[any::from(&entry)])
    }

    defer file.deinit();
  }
}