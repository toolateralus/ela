#import raylib;

Circle :: struct {
  center: Vector2;
  radius: float;
}

ColliderShape :: union {
  circle: Circle;
}

Collider :: struct {
  flags : int;
  shape: ColliderShape;
  
  /* 
    ! Due to how we're using 'stack scoping' for our dot expressions,
    ! using 'other.*' in here, we end up parenting our own scope to ourselves temporarily.
    ! this causes an infinite loop when looking up symbols resulting in a segfault in the compiler.
    ! maybe we should avoid doing the stack scope for a root if we're already in the scope we're about to enter?
    ! maybe there's a better solution to dot expression scoping.  
  */
  is_colliding :: (other: #self) {
    CheckCollisionCircles(shape.circle.center,
                          shape.circle.radius, 
                          other.shape.circle.center,
                          other.shape.circle.radius);
  }
}
