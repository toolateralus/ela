Changelog:

:: {
  .. Removed built-in array[] and string types. 
     They still exist, but they're no longer hard-coded into the compiler,
     they're just in the standard library that's "ghost included" above every translation unit.

  .. Making more built-in interfaces 

  .. Refactor `for i in ...` range based loops. 
     This improves custom iterators, and also allows us to not depend on C++ for iterators.
     Now, we use Iterable![T] and Enumerable![T] interfaces.
  
  .. Rewrite `Range` type in Ela. Allows us to more easily customize how it works, 
     without the compiler requiring it as a hard-dependency
     The same reason as `string` and `T[]` being rewritten.

  .. Improve generic instantiation, more temporally accurate to where it won't have mixups in dependencies (done by Cooper Pilot)
}

:: {
  .. Refactored tuples to be their own structs at compile time, no more relying on template instantiation from C++
  
  .. Added 'tuple.0' aka 'tuple.index' syntax for getting/setting individual tuple members. very nice.

  .. Made it so 'extended types' such as pointers or arrays, don't inherit their base type's scope.

  .. Added the 'Allocator' interface, and the 'Std_Allocator' implementation. Soon, we'll be passing these to our lists and strings, in a very Zig like fashion,
    where you can allocate freely and then call deinit() on your allocator, to release all your resources at once when you're done.
    This won't actually update the state of your objects and pointers, it's not a garbage collector. However, it will be nicer than calling .deinit() on all your 
    arrays and strings manually one by one.
}