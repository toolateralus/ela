alias c_str :: *const u8;

import dlfcn;

module std {
  extern fn printf(fmt: c_str, ...);
  extern fn exit(code: s32);
  extern fn strlen(c: c_str) -> s32;
  extern fn malloc(size: u64) -> *mut void;
  extern fn sprintf(buf: c_str, fmt: c_str, ...) -> s32;
  fn println(str: c_str) {
    printf("%s\n", str);
  }
}

trait XarBar {
  fn printme(*mut self);
}

choice Option!<T> {
  None,
  Some(T),
}

impl!<T> Option!<T> {
  // I hacked these in to avoid using pattern matching while it's still unimplemented.
  fn is_none(mut self) -> bool {
    discriminant := ((&mut self) as *const u8) as *const u32;
    return *discriminant != 2;
  }

  fn get_value(mut self) -> s32 {
    const discriminant_offset := 4;
    mut discriminant := ((&mut self) as *const u8);
    discriminant += discriminant_offset;
    return *(discriminant as *const s32);
  }
}


trait Iterator!<T> {
  fn next(*mut self) -> Option!<T>;
}

trait Iterable {
  fn iter(self) -> Iterator;
}

struct Iter!<T> {
  ptr: *const T, end: *const T
}

impl!<T> Iterator!<T> for Iter!<T> {
  fn next(*mut self) -> Option!<T> {
    value := self.ptr;
    if self.ptr < self.end {
      self.ptr++;
      return Option!<T>::Some(*value);
    }
    return Option!<T>::None;
  }
}

struct Person {
  friendliness: u8,
  curiosity: u32,
  name: c_str
}

impl XarBar for Person {
  fn printme(*mut self) {
    std::printf("%s says:\n", self.name);
    std::printf("  '%s'\n", "\033[1;3;35mbustin on the balls in the box\033[0m");
  }
}

choice Choice {
  A,
  B(u8, u8),
  C {
    z: c_str,
    y: f32, 
    x: s32, 
  },
  Person(Person)
}

enum Enum {
  A, B, C
}

fn get() -> bool {
  return true;
}

const colors: c_str[7] = c_str.[
  "\033[1;3;31m", // Red
  "\033[1;3;33m", // Yellow (used for Orange and Yellow)
  "\033[1;3;33m",
  "\033[1;3;32m", // Green
  "\033[1;3;34m", // Blue
  "\033[1;3;35m", // Magenta (for Indigo/Violet)
  "\033[1;3;35m"
];

fn rainbowize(s: c_str) {
  mut i := 0;
  while (s[i] != 0) {
    color := colors[(i % 7)];
    std::printf("%s%c"c, color, s[i]);
    i += 1;
  }
  std::printf("\033[0m"c);
}

fn rainbowize_str(s: c_str) -> c_str {
  len := std::strlen(s);
  color_len := std::strlen(colors[0]);
  extra := len * color_len + color_len + 1;
  buf: *mut u8 = std::malloc(len + extra);
  out := buf;

  mut i := 0;
  mut written := 0;
  while (s[i] != 0) {
    color := colors[i % 7];
    written += std::sprintf(out + written, "%s%c", color, s[i]);
    i += 1;
  }

  written += std::sprintf(out + written, "\033[0m");
  (out + written)[0] = 0;
  return buf;
}

fn print_discriminant(c: Choice) {
  mut ptr: *const u8 = &const c;
  std::printf("discriminant of c is %d\n", *(ptr as *const u32));
}

impl s32 {
  fn eq(self, other: #self) -> bool {
    // cast to prevent infinite recursion for this basic test.
    return self as s64 == other as s32;
  }
}

struct Generic!<T> {
  value: T
}

impl!<T> Generic!<T> {
  fn printme(self) {
    where T: s32 {
      std::printf("T == s32\n");
    } else {
      std::printf("T != s32\n");
    }
    std::printf("value=%d\n", self.value);
  } 
}

struct RangeBase!<V> {
  begin: V,
  end:   V,
}

alias Range :: RangeBase!<s32>;

struct RangeIter!<T> {
  idx: T,
  end: T,
}

impl!<T> Iterator!<T> for RangeIter!<T> {
  fn next(*mut self) -> Option!<T> {
    value := self.idx;
    if self.idx < self.end {
      self.idx++;
      return Option!<T>::Some(value); 
    }
    return Option!<T>::None;
  }
}

impl!<V> Iterable for RangeBase!<V> {
  fn iter(self) -> RangeIter!<V> {
    return .{
      idx: self.begin,
      end: self.end,
    }
  }
}

@[entry]
fn main() -> s32 {
  mut c := Choice::A;
  print_discriminant(c);
  c = .{};
  print_discriminant(c);
  c = Choice::B(1, 2);
  print_discriminant(c);
  c = Choice::C.{
    x: 10,
    y: 100.0,
    z: "Hello, world!"
  };
  print_discriminant(c);

  std::printf("bb=%d\n", if get() { return 100; });

  switch 0 {
    1: { std::println("wrong!"); }
    2: { std::println("wrong!"); }
    0: { std::println("not wrong!"); }
    else: {
      std::println("default case");
    }
  }

  status: c_str = if 1 == 1 { return "true"c; } else { return "false"c; };
  std::printf("1==1=%s\n", status);

  mut person: Person = .{
    curiosity: 200,
    name: "\033[31mC\033[33mo\033[33mo\033[32mp\033[34me\033[35mr\033[0m (▮▮▮▮▮▮▮▮▮▯ 90% gay)"
  };

  if !get() {
    std::printf("Person says hello! Curiosity=%d\n", person.curiosity);
  } else if false {
    std::printf("Person says hello! Curiosity=%d\n", person.curiosity);
  } else if 0 {
    std::printf("Person says hello! Curiosity=%d\n", person.curiosity);
  } else {
    rainbowize("YOU NEED TO GET A LESSON IN BIG COCK DETECTION\n");
  }

  mut i := 0;
  while i < 10 { 
    std::printf("i=%d, ", ++i); 
  } 
  
  rainbowize("while loop done\n");

  where s32: s32 {
    std::println("s32 == s32! WOW! WOW! WOW! WOW!");
  }

  result := dlfcn::dlopen("/usr/local/include/raylib.so"c, 0);
  std::printf("result=%p (unimportant, just testing modules)\n", result);

  x, y, z := person;
  std::printf("friendliness=%d, curiosity=%d, name=%s\n", x, y, z);

  where Person: XarBar {
    person.printme();
  }
  
  mut iter := RangeIter!<s32>.{ idx: 0, end: 10};
  
  rainbowize("iterator loop: (0 to 10 (exclusive)):\n");
  for i in iter {
    std::printf("i=%d, ", i);
  }
  rainbowize("\niterable loop: (0..10(exclusive))\n");
  for i in 0..10 {
    std::printf("i=%d, ", i);
  }
  rainbowize("\ndone with for loop iterators\n");

  iter.idx = 0;
  while {
    opt := iter.next();
    if opt.is_none() {
      break;
    } else {
      std::printf("%s%d, ", rainbowize_str("while iter="), opt.get_value());
    }
  }

  std::println("end while loop");

  lambda := fn() {
    rainbowize("woo hoo we're in a lambda!\n");
  };

  fn subfunc() {
    rainbowize("in a subfunction\n");
  }

  subfunc();
  lambda();

  struct Fucker {
    xyz: (f32, f32, f32) = (1.0, 2.0, 3.0),
  }

  impl Fucker {
    fn fuck_her(mut self) {
      rainbowize("(in impl within a function) fucker? I hardly know er!\n");
      std::printf("fucker(self).xyz=(%f, %f, %f)\n", self.xyz.0, self.xyz.1, self.xyz.2);    
    }
  }

  fucker: Fucker;
  fucker.fuck_her();

  std::printf("fucker.xyz=(%f, %f, %f)\n", fucker.xyz.0, fucker.xyz.1, fucker.xyz.2);

  generic: Generic!<s32> = .{
    value: 100
  };
  generic.printme();

  fn generic_function!<T>(t: T) -> T {
    return t;
  }

  none := Option!<s32>::None;
  if none is Option!<s32>::None {
    std::println("was none");
  }

  some := Option!<s32>::Some(10);

  if some is Option!<s32>::Some(&mut v) {
    std::printf("was some, v=%p\n", v);
    *v = 100;
  }

  if some is Option!<s32>::Some(v) {
    std::printf("was some, v=%d\n", v);
  }

  struct Vec2 {
    x: f32, y: f32
  }

  const VEC_ARRAY_LEN := 5;

  array: Vec2[VEC_ARRAY_LEN];
  iter2: Iter!<Vec2> = .{
    ptr: array,
    end: (array as *Vec2) + VEC_ARRAY_LEN
  };

  pointer: *s32 = &0;

  for &mut x, &mut y in iter2 {
    std::printf("x=%p, y=%p\n", x, y);
  }

  struct InitList!<T> {
    data: *T,
    length: u64,
  }

  fn takes_init_list(list: InitList!<s32>) {
    for i in 0..list.length {
      std::printf("list[i]=%d\n", list.data![i]);
    }
  }

  takes_init_list(.[0,1,2,3]);

  return 0;
}